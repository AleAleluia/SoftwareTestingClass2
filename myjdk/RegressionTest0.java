
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    java.lang.String[] str_array5 = new java.lang.String[] {  };
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array6 = priorityqueue_b0.toArray(str_array5);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)-1, comparator_obj1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    priorityqueue_b0.clear();
    java.util.function.Consumer<java.lang.Object> consumer_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array12 = priorityqueue_b5.toArray(str_array11);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array13 = priorityqueue_b0.toArray(str_array11);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array13 = priorityqueue_b6.toArray(str_array12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array14 = priorityqueue_b5.toArray(str_array12);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array14 = priorityqueue_b7.toArray(str_array13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array15 = priorityqueue_b6.toArray(str_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(0, comparator_obj1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj1);
    java.util.function.Consumer<java.lang.Object> consumer_obj3 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b2.forEach(consumer_obj3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b6.forEach(consumer_obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.function.Predicate<java.lang.Object> predicate_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = priorityqueue_b0.removeIf(predicate_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.function.Consumer<java.lang.Object> consumer_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    priorityqueue_b0.clear();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array3);
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = arraylist_b0.removeIf(predicate_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.function.Predicate<java.lang.Object> predicate_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = priorityqueue_b6.removeIf(predicate_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    int i9 = priorityqueue_b0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { false };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b6, b_array8);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    priorityqueue_b6.clear();
    java.lang.Boolean b12 = priorityqueue_b6.poll();
    boolean b13 = priorityqueue_b5.remove((java.lang.Object)priorityqueue_b6);
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b5.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    boolean b8 = priorityqueue_b5.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array15 = priorityqueue_b8.toArray(str_array14);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array16 = priorityqueue_b0.toArray(str_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = priorityqueue_b4.removeIf(predicate_obj5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b15);
    java.util.function.Consumer<java.lang.Object> consumer_obj18 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b15.forEach(consumer_obj18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    java.util.SortedSet<java.lang.Boolean> sortedset_b0 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(sortedset_b0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = priorityqueue_b0.parallelStream();
    java.util.function.Predicate<java.lang.Object> predicate_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = priorityqueue_b0.removeIf(predicate_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    java.util.Iterator<java.lang.Boolean> iterator_b29 = priorityqueue_b24.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b24);
    java.lang.Boolean b31 = priorityqueue_b30.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array35 = new java.lang.Boolean[] { false, false };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b32, b_array35);
    priorityqueue_b32.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array45 = priorityqueue_b38.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b32.toArray(str_array45);
    boolean b47 = priorityqueue_b30.contains((java.lang.Object)priorityqueue_b32);
    java.lang.String[] str_array53 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array54 = priorityqueue_b32.toArray(str_array53);
    java.lang.String[] str_array55 = priorityqueue_b8.toArray(str_array53);
    java.lang.Boolean b56 = priorityqueue_b8.peek();
    java.util.function.Consumer<java.lang.Object> consumer_obj57 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b8.forEach(consumer_obj57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b31 + "' != '" + false+ "'", b31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b56);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b5.forEach(consumer_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    java.util.function.Predicate<java.lang.Object> predicate_obj3 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b4 = priorityqueue_b2.removeIf(predicate_obj3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b0.iterator();
    java.lang.Boolean b11 = priorityqueue_b0.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.util.function.Consumer<java.lang.Object> consumer_obj1 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b9.parallelStream();
    priorityqueue_b9.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    boolean b18 = priorityqueue_b0.offer((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b19 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b19);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj5 = null;
    // The following exception was thrown during execution in test generation
    try {
    treeset_b0.forEach(consumer_obj5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'#');

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    boolean b6 = priorityqueue_b0.offer((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.lang.Boolean b14 = priorityqueue_b13.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array18 = new java.lang.Boolean[] { false, false };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b15, b_array18);
    priorityqueue_b15.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array28 = priorityqueue_b21.toArray(str_array27);
    java.lang.String[] str_array29 = priorityqueue_b15.toArray(str_array28);
    boolean b30 = priorityqueue_b13.contains((java.lang.Object)priorityqueue_b15);
    java.lang.String[] str_array36 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array37 = priorityqueue_b15.toArray(str_array36);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array45 = priorityqueue_b38.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b15.toArray(str_array45);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array47 = priorityqueue_b0.toArray(str_array45);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b14 + "' != '" + false+ "'", b14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = treeset_b0.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    java.lang.Object[] obj_array17 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array25 = priorityqueue_b18.toArray(str_array24);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array26 = priorityqueue_b6.toArray(str_array25);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.function.Predicate<java.lang.Object> predicate_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = priorityqueue_b0.removeIf(predicate_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array30 = priorityqueue_b8.toArray(str_array29);
    java.util.Spliterator<java.lang.Boolean> spliterator_b31 = priorityqueue_b8.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b31);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array5 = new java.lang.Boolean[] { false, false };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b2, b_array5);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b2.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b10, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b10.iterator();
    java.lang.Object[] obj_array15 = priorityqueue_b10.toArray();
    boolean b16 = priorityqueue_b1.contains((java.lang.Object)obj_array15);
    java.lang.Object[] obj_array17 = priorityqueue_b1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    boolean b7 = priorityqueue_b5.add((java.lang.Boolean)true);
    boolean b9 = priorityqueue_b5.contains((java.lang.Object)10);
    java.util.Spliterator<java.lang.Boolean> spliterator_b10 = priorityqueue_b5.spliterator();
    java.lang.String[] str_array12 = new java.lang.String[] { "hi!" };
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array13 = priorityqueue_b5.toArray(str_array12);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b7.spliterator();
    boolean b15 = priorityqueue_b0.contains((java.lang.Object)spliterator_b14);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b19 = priorityqueue_b17.remove((java.lang.Object)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array23 = new java.lang.Boolean[] { false, false };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b20, b_array23);
    java.util.Iterator<java.lang.Boolean> iterator_b25 = priorityqueue_b20.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b20);
    java.util.Spliterator<java.lang.Boolean> spliterator_b27 = priorityqueue_b20.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b30 = priorityqueue_b20.remove((java.lang.Object)priorityqueue_b29);
    java.lang.Boolean b31 = priorityqueue_b29.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array35 = new java.lang.Boolean[] { false, false };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b32, b_array35);
    java.util.Iterator<java.lang.Boolean> iterator_b37 = priorityqueue_b32.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b32);
    java.lang.Boolean b39 = priorityqueue_b38.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array43 = new java.lang.Boolean[] { false, false };
    boolean b44 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b40, b_array43);
    priorityqueue_b40.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b46 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array53 = priorityqueue_b46.toArray(str_array52);
    java.lang.String[] str_array54 = priorityqueue_b40.toArray(str_array53);
    boolean b55 = priorityqueue_b38.contains((java.lang.Object)priorityqueue_b40);
    java.lang.String[] str_array61 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array62 = priorityqueue_b40.toArray(str_array61);
    java.lang.String[] str_array63 = priorityqueue_b29.toArray(str_array61);
    java.lang.String[] str_array64 = priorityqueue_b17.toArray(str_array61);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array65 = priorityqueue_b0.toArray(str_array64);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b6 + "' != '" + false+ "'", b6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b39 + "' != '" + false+ "'", b39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    java.util.Iterator<java.lang.Boolean> iterator_b29 = priorityqueue_b24.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b24);
    java.lang.Boolean b31 = priorityqueue_b30.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array35 = new java.lang.Boolean[] { false, false };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b32, b_array35);
    priorityqueue_b32.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array45 = priorityqueue_b38.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b32.toArray(str_array45);
    boolean b47 = priorityqueue_b30.contains((java.lang.Object)priorityqueue_b32);
    java.lang.String[] str_array53 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array54 = priorityqueue_b32.toArray(str_array53);
    java.lang.String[] str_array55 = priorityqueue_b8.toArray(str_array53);
    java.util.Spliterator<java.lang.Boolean> spliterator_b56 = priorityqueue_b8.spliterator();
    priorityqueue_b8.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b31 + "' != '" + false+ "'", b31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b56);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.util.function.Predicate<java.lang.Object> predicate_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = priorityqueue_b6.removeIf(predicate_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array5 = new java.lang.Boolean[] { false, false };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b2, b_array5);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b2.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array14 = new java.lang.Boolean[] { false, false };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b11, b_array14);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b11.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b11);
    java.lang.Boolean b18 = priorityqueue_b17.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b19 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array22 = new java.lang.Boolean[] { false, false };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b19, b_array22);
    priorityqueue_b19.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array32 = priorityqueue_b25.toArray(str_array31);
    java.lang.String[] str_array33 = priorityqueue_b19.toArray(str_array32);
    boolean b34 = priorityqueue_b17.contains((java.lang.Object)priorityqueue_b19);
    java.lang.String[] str_array40 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array41 = priorityqueue_b19.toArray(str_array40);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b42 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array49 = priorityqueue_b42.toArray(str_array48);
    java.lang.String[] str_array50 = priorityqueue_b19.toArray(str_array49);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array51 = priorityqueue_b2.toArray(str_array50);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b18 + "' != '" + false+ "'", b18.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    java.util.function.Consumer<java.lang.Object> consumer_obj26 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b8.forEach(consumer_obj26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj5 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b4.forEach(consumer_obj5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj1);
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { false };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b6, b_array8);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    priorityqueue_b6.clear();
    java.lang.Boolean b12 = priorityqueue_b6.poll();
    boolean b13 = priorityqueue_b5.remove((java.lang.Object)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b17 = priorityqueue_b15.remove((java.lang.Object)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array21 = new java.lang.Boolean[] { false, false };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b18, b_array21);
    java.util.Iterator<java.lang.Boolean> iterator_b23 = priorityqueue_b18.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b18);
    java.util.Spliterator<java.lang.Boolean> spliterator_b25 = priorityqueue_b18.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b27 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b28 = priorityqueue_b18.remove((java.lang.Object)priorityqueue_b27);
    java.lang.Boolean b29 = priorityqueue_b27.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array33 = new java.lang.Boolean[] { false, false };
    boolean b34 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b30, b_array33);
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b30.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b36 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b30);
    java.lang.Boolean b37 = priorityqueue_b36.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array41 = new java.lang.Boolean[] { false, false };
    boolean b42 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b38, b_array41);
    priorityqueue_b38.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b44 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array51 = priorityqueue_b44.toArray(str_array50);
    java.lang.String[] str_array52 = priorityqueue_b38.toArray(str_array51);
    boolean b53 = priorityqueue_b36.contains((java.lang.Object)priorityqueue_b38);
    java.lang.String[] str_array59 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array60 = priorityqueue_b38.toArray(str_array59);
    java.lang.String[] str_array61 = priorityqueue_b27.toArray(str_array59);
    java.lang.String[] str_array62 = priorityqueue_b15.toArray(str_array59);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array63 = priorityqueue_b5.toArray(str_array62);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b37 + "' != '" + false+ "'", b37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    boolean b7 = priorityqueue_b5.add((java.lang.Boolean)false);
    java.util.Iterator<java.lang.Boolean> iterator_b8 = priorityqueue_b5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b8);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Boolean> comparator_b7 = priorityqueue_b0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b6 + "' != '" + false+ "'", b6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b7);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.lang.Boolean b14 = priorityqueue_b13.peek();
    int i15 = priorityqueue_b13.size();
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b13.spliterator();
    boolean b17 = priorityqueue_b5.contains((java.lang.Object)priorityqueue_b13);
    java.util.function.Predicate<java.lang.Object> predicate_obj18 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = priorityqueue_b13.removeIf(predicate_obj18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b14 + "' != '" + false+ "'", b14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array30 = priorityqueue_b8.toArray(str_array29);
    int i31 = priorityqueue_b8.size();
    java.lang.Boolean b32 = priorityqueue_b8.poll();
    java.util.function.Consumer<java.lang.Object> consumer_obj33 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b8.forEach(consumer_obj33);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b32);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)' ', comparator_obj1);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b13 = priorityqueue_b11.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    java.util.Spliterator<java.lang.Boolean> spliterator_b8 = priorityqueue_b0.spliterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = priorityqueue_b0.removeIf(predicate_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b8);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b7.spliterator();
    boolean b15 = priorityqueue_b0.contains((java.lang.Object)spliterator_b14);
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b6 + "' != '" + false+ "'", b6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    java.lang.Boolean b16 = priorityqueue_b15.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array20 = new java.lang.Boolean[] { false, false };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b17, b_array20);
    priorityqueue_b17.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array30 = priorityqueue_b23.toArray(str_array29);
    java.lang.String[] str_array31 = priorityqueue_b17.toArray(str_array30);
    boolean b32 = priorityqueue_b15.contains((java.lang.Object)priorityqueue_b17);
    java.lang.String[] str_array38 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array39 = priorityqueue_b17.toArray(str_array38);
    java.lang.String[] str_array40 = priorityqueue_b0.toArray(str_array38);
    java.util.function.Consumer<java.lang.Object> consumer_obj41 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b16 + "' != '" + false+ "'", b16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    boolean b9 = priorityqueue_b0.offer((java.lang.Boolean)true);
    boolean b11 = priorityqueue_b0.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Boolean b2 = priorityqueue_b1.peek();
    boolean b4 = priorityqueue_b1.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)10, comparator_obj1);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.TreeSet<java.lang.Boolean> treeset_b4 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b4, b_array6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b4);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b0.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.lang.Boolean b10 = priorityqueue_b9.poll();
    java.lang.Object[] obj_array11 = priorityqueue_b9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b10 + "' != '" + false+ "'", b10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b0.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b0.iterator();
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b7.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b17 = priorityqueue_b7.remove((java.lang.Object)priorityqueue_b16);
    java.lang.Boolean b18 = priorityqueue_b16.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b19 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array22 = new java.lang.Boolean[] { false, false };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b19, b_array22);
    java.util.Iterator<java.lang.Boolean> iterator_b24 = priorityqueue_b19.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b19);
    java.lang.Boolean b26 = priorityqueue_b25.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b27 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array30 = new java.lang.Boolean[] { false, false };
    boolean b31 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b27, b_array30);
    priorityqueue_b27.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b33 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array40 = priorityqueue_b33.toArray(str_array39);
    java.lang.String[] str_array41 = priorityqueue_b27.toArray(str_array40);
    boolean b42 = priorityqueue_b25.contains((java.lang.Object)priorityqueue_b27);
    java.lang.String[] str_array48 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array49 = priorityqueue_b27.toArray(str_array48);
    java.lang.String[] str_array50 = priorityqueue_b16.toArray(str_array48);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array51 = priorityqueue_b6.toArray(str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b26 + "' != '" + false+ "'", b26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.Iterator<java.lang.Boolean> iterator_b6 = priorityqueue_b5.iterator();
    java.lang.Object[] obj_array7 = priorityqueue_b5.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array23 = priorityqueue_b5.toArray(str_array21);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.function.Predicate<java.lang.Object> predicate_obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = arraylist_b0.removeIf(predicate_obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.lang.Boolean b14 = priorityqueue_b13.peek();
    int i15 = priorityqueue_b13.size();
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b13.spliterator();
    boolean b17 = priorityqueue_b5.contains((java.lang.Object)priorityqueue_b13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b14 + "' != '" + false+ "'", b14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    java.lang.Boolean b9 = priorityqueue_b0.poll();
    java.util.function.Consumer<java.lang.Object> consumer_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b9);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b14 = priorityqueue_b6.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b14);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.function.Predicate<java.lang.Object> predicate_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = priorityqueue_b0.removeIf(predicate_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)0, comparator_obj1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj1);
    java.util.stream.Stream<java.lang.Boolean> stream_b3 = priorityqueue_b2.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b2.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b10.spliterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b10.spliterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = priorityqueue_b10.removeIf(predicate_obj13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    priorityqueue_b0.clear();
    java.util.function.Predicate<java.lang.Object> predicate_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = priorityqueue_b0.removeIf(predicate_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array13 = new java.lang.Boolean[] { false, false };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b10, b_array13);
    java.util.Iterator<java.lang.Boolean> iterator_b15 = priorityqueue_b10.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b10);
    boolean b17 = priorityqueue_b9.remove((java.lang.Object)priorityqueue_b10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b10);
    boolean b19 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b18);
    java.lang.Object[] obj_array20 = priorityqueue_b18.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.lang.Boolean b7 = priorityqueue_b6.poll();
    java.lang.Boolean b8 = priorityqueue_b6.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array14 = new java.lang.Boolean[] { false, false };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b11, b_array14);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b11.iterator();
    boolean b18 = priorityqueue_b11.add((java.lang.Boolean)false);
    priorityqueue_b11.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array23 = new java.lang.Boolean[] { false, false };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b20, b_array23);
    java.util.Iterator<java.lang.Boolean> iterator_b25 = priorityqueue_b20.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b20);
    java.lang.Boolean b27 = priorityqueue_b26.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array31 = new java.lang.Boolean[] { false, false };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b28, b_array31);
    priorityqueue_b28.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b34 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array41 = priorityqueue_b34.toArray(str_array40);
    java.lang.String[] str_array42 = priorityqueue_b28.toArray(str_array41);
    boolean b43 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b28);
    java.lang.String[] str_array49 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array50 = priorityqueue_b28.toArray(str_array49);
    java.lang.String[] str_array51 = priorityqueue_b11.toArray(str_array49);
    boolean b52 = priorityqueue_b10.remove((java.lang.Object)str_array49);
    java.util.Spliterator<java.lang.Boolean> spliterator_b53 = priorityqueue_b10.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b27 + "' != '" + false+ "'", b27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b53);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    java.util.Comparator<java.lang.Boolean> comparator_b14 = priorityqueue_b12.comparator();
    priorityqueue_b12.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b14);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    int i9 = priorityqueue_b8.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b8.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100.0d);
    boolean b10 = priorityqueue_b0.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b9 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { true, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b9, b_array12);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b9);
    boolean b15 = priorityqueue_b8.remove((java.lang.Object)treeset_b9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.lang.Boolean b7 = priorityqueue_b6.poll();
    java.lang.Boolean b8 = priorityqueue_b6.poll();
    java.util.function.Predicate<java.lang.Object> predicate_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = priorityqueue_b6.removeIf(predicate_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b8);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Spliterator<java.lang.Boolean> spliterator_b9 = priorityqueue_b6.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array13 = new java.lang.Boolean[] { false, false };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b10, b_array13);
    java.util.Iterator<java.lang.Boolean> iterator_b15 = priorityqueue_b10.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b10);
    java.lang.Boolean b17 = priorityqueue_b16.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array21 = new java.lang.Boolean[] { false, false };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b18, b_array21);
    priorityqueue_b18.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array31 = priorityqueue_b24.toArray(str_array30);
    java.lang.String[] str_array32 = priorityqueue_b18.toArray(str_array31);
    boolean b33 = priorityqueue_b16.contains((java.lang.Object)priorityqueue_b18);
    java.lang.String[] str_array39 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array40 = priorityqueue_b18.toArray(str_array39);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array48 = priorityqueue_b41.toArray(str_array47);
    java.lang.String[] str_array49 = priorityqueue_b18.toArray(str_array48);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array50 = priorityqueue_b6.toArray(str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b17 + "' != '" + false+ "'", b17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    priorityqueue_b5.clear();
    java.util.function.Predicate<java.lang.Object> predicate_obj15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = priorityqueue_b5.removeIf(predicate_obj15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.util.function.Consumer<java.lang.Object> consumer_obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.lang.Object[] obj_array12 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b7.spliterator();
    boolean b15 = priorityqueue_b0.contains((java.lang.Object)spliterator_b14);
    java.util.stream.Stream<java.lang.Boolean> stream_b16 = priorityqueue_b0.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b6 + "' != '" + false+ "'", b6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b16);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100);
    java.lang.Boolean b2 = priorityqueue_b1.peek();
    java.util.function.Consumer<java.lang.Object> consumer_obj3 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b1.forEach(consumer_obj3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)true);
    java.util.Spliterator<java.lang.Boolean> spliterator_b8 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b9);
    java.util.Comparator<java.lang.Boolean> comparator_b16 = priorityqueue_b9.comparator();
    boolean b17 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b9);
    boolean b19 = priorityqueue_b0.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.lang.Object[] obj_array4 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array4);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100.0d);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b0.stream();
    java.util.function.Predicate<java.lang.Object> predicate_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = priorityqueue_b0.removeIf(predicate_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    boolean b11 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.lang.Boolean b12 = priorityqueue_b6.peek();
    java.util.Comparator<java.lang.Boolean> comparator_b13 = priorityqueue_b6.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b13);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    boolean b18 = priorityqueue_b0.offer((java.lang.Boolean)false);
    boolean b20 = priorityqueue_b0.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.lang.Boolean b14 = priorityqueue_b13.peek();
    int i15 = priorityqueue_b13.size();
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b13.spliterator();
    boolean b17 = priorityqueue_b5.contains((java.lang.Object)priorityqueue_b13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array20 = new java.lang.Boolean[] { false };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b18, b_array20);
    java.util.Iterator<java.lang.Boolean> iterator_b22 = priorityqueue_b18.iterator();
    priorityqueue_b18.clear();
    boolean b25 = priorityqueue_b18.contains((java.lang.Object)1L);
    java.util.Spliterator<java.lang.Boolean> spliterator_b26 = priorityqueue_b18.spliterator();
    boolean b27 = priorityqueue_b5.remove((java.lang.Object)spliterator_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b14 + "' != '" + false+ "'", b14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b8 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b6.stream();
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b6.forEach(consumer_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    java.lang.Object[] obj_array7 = priorityqueue_b5.toArray();
    java.util.function.Consumer<java.lang.Object> consumer_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b5.forEach(consumer_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = treeset_b0.removeIf(predicate_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    boolean b9 = priorityqueue_b0.offer((java.lang.Boolean)true);
    java.util.function.Consumer<java.lang.Object> consumer_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)-1, comparator_obj1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    boolean b10 = priorityqueue_b0.add((java.lang.Boolean)true);
    java.lang.String[] str_array17 = new java.lang.String[] { "", "hi!", "hi!", "", "", "" };
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array18 = priorityqueue_b0.toArray(str_array17);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b6.forEach(consumer_obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b12 = priorityqueue_b0.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array22 = priorityqueue_b0.toArray(str_array20);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b19 = priorityqueue_b9.remove((java.lang.Object)priorityqueue_b18);
    java.lang.Boolean b20 = priorityqueue_b18.peek();
    java.lang.Boolean b21 = priorityqueue_b18.peek();
    java.util.Iterator<java.lang.Boolean> iterator_b22 = priorityqueue_b18.iterator();
    boolean b23 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b18);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    java.util.Iterator<java.lang.Boolean> iterator_b29 = priorityqueue_b24.iterator();
    boolean b31 = priorityqueue_b24.add((java.lang.Boolean)false);
    priorityqueue_b24.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b33 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array36 = new java.lang.Boolean[] { false, false };
    boolean b37 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b33, b_array36);
    java.util.Iterator<java.lang.Boolean> iterator_b38 = priorityqueue_b33.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b39 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b33);
    java.lang.Boolean b40 = priorityqueue_b39.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array44 = new java.lang.Boolean[] { false, false };
    boolean b45 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b41, b_array44);
    priorityqueue_b41.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b47 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array54 = priorityqueue_b47.toArray(str_array53);
    java.lang.String[] str_array55 = priorityqueue_b41.toArray(str_array54);
    boolean b56 = priorityqueue_b39.contains((java.lang.Object)priorityqueue_b41);
    java.lang.String[] str_array62 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array63 = priorityqueue_b41.toArray(str_array62);
    java.lang.String[] str_array64 = priorityqueue_b24.toArray(str_array62);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array65 = priorityqueue_b0.toArray(str_array62);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b40 + "' != '" + false+ "'", b40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    boolean b8 = priorityqueue_b5.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    java.util.Iterator<java.lang.Boolean> iterator_b31 = priorityqueue_b26.iterator();
    boolean b33 = priorityqueue_b26.add((java.lang.Boolean)false);
    priorityqueue_b26.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b26.iterator();
    java.lang.Boolean b36 = priorityqueue_b26.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b37 = priorityqueue_b26.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj39 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj39);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b40);
    boolean b42 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b40);
    boolean b43 = priorityqueue_b8.remove((java.lang.Object)b42);
    priorityqueue_b8.clear();
    java.util.Spliterator<java.lang.Boolean> spliterator_b45 = priorityqueue_b8.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b45);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.Comparator<java.lang.Boolean> comparator_b10 = priorityqueue_b9.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b10);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    java.lang.Boolean b14 = priorityqueue_b5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b14 + "' != '" + true+ "'", b14.equals(true));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b3 = priorityqueue_b1.remove((java.lang.Object)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array7 = new java.lang.Boolean[] { false, false };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b4, b_array7);
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b4.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b4);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b4.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b14 = priorityqueue_b4.remove((java.lang.Object)priorityqueue_b13);
    java.lang.Boolean b15 = priorityqueue_b13.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array19 = new java.lang.Boolean[] { false, false };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array19);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b16.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.lang.Boolean b23 = priorityqueue_b22.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    priorityqueue_b24.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array37 = priorityqueue_b30.toArray(str_array36);
    java.lang.String[] str_array38 = priorityqueue_b24.toArray(str_array37);
    boolean b39 = priorityqueue_b22.contains((java.lang.Object)priorityqueue_b24);
    java.lang.String[] str_array45 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array46 = priorityqueue_b24.toArray(str_array45);
    java.lang.String[] str_array47 = priorityqueue_b13.toArray(str_array45);
    java.lang.String[] str_array48 = priorityqueue_b1.toArray(str_array45);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b49 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array56 = priorityqueue_b49.toArray(str_array55);
    boolean b58 = priorityqueue_b49.remove((java.lang.Object)true);
    java.lang.Object[] obj_array59 = priorityqueue_b49.toArray();
    java.lang.Boolean b60 = priorityqueue_b49.peek();
    boolean b61 = priorityqueue_b1.remove((java.lang.Object)b60);
    java.util.Spliterator<java.lang.Boolean> spliterator_b62 = priorityqueue_b1.spliterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj63 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b1.forEach(consumer_obj63);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + false+ "'", b23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b62);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    boolean b11 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.lang.Boolean b12 = priorityqueue_b6.peek();
    java.lang.Boolean b13 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array14 = priorityqueue_b6.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b15 = priorityqueue_b6.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array19 = new java.lang.Boolean[] { false, false };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array19);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b16.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.lang.Boolean b23 = priorityqueue_b22.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    priorityqueue_b24.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array37 = priorityqueue_b30.toArray(str_array36);
    java.lang.String[] str_array38 = priorityqueue_b24.toArray(str_array37);
    boolean b39 = priorityqueue_b22.contains((java.lang.Object)priorityqueue_b24);
    java.util.stream.Stream<java.lang.Boolean> stream_b40 = priorityqueue_b24.parallelStream();
    boolean b41 = priorityqueue_b6.contains((java.lang.Object)stream_b40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b13 + "' != '" + false+ "'", b13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + false+ "'", b23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b1.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    priorityqueue_b0.clear();
    java.util.Spliterator<java.lang.Boolean> spliterator_b6 = priorityqueue_b0.spliterator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b0.parallelStream();
    boolean b10 = priorityqueue_b0.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.util.function.Predicate<java.lang.Object> predicate_obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = priorityqueue_b11.removeIf(predicate_obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    java.lang.Boolean b16 = priorityqueue_b15.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array20 = new java.lang.Boolean[] { false, false };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b17, b_array20);
    priorityqueue_b17.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array30 = priorityqueue_b23.toArray(str_array29);
    java.lang.String[] str_array31 = priorityqueue_b17.toArray(str_array30);
    boolean b32 = priorityqueue_b15.contains((java.lang.Object)priorityqueue_b17);
    java.lang.String[] str_array38 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array39 = priorityqueue_b17.toArray(str_array38);
    java.lang.String[] str_array40 = priorityqueue_b0.toArray(str_array38);
    java.lang.Boolean b41 = priorityqueue_b0.poll();
    java.lang.Boolean b42 = priorityqueue_b0.poll();
    java.lang.Boolean b43 = priorityqueue_b0.peek();
    java.util.function.Predicate<java.lang.Object> predicate_obj44 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b45 = priorityqueue_b0.removeIf(predicate_obj44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b16 + "' != '" + false+ "'", b16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b43);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Boolean b2 = priorityqueue_b1.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = priorityqueue_b1.removeIf(predicate_obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = treeset_b0.removeIf(predicate_obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b8 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b6.stream();
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b6.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(2);
    java.util.function.Consumer<java.lang.Object> consumer_obj2 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b1.forEach(consumer_obj2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)1);
    java.util.Iterator<java.lang.Boolean> iterator_b2 = priorityqueue_b1.iterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj3 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b1.forEach(consumer_obj3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b2);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    boolean b5 = priorityqueue_b1.remove((java.lang.Object)(byte)10);
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b1.comparator();
    priorityqueue_b1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b8 = priorityqueue_b6.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    boolean b13 = priorityqueue_b0.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.lang.Boolean b6 = priorityqueue_b5.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b5.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b6 + "' != '" + false+ "'", b6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b9 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b10, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b10.iterator();
    priorityqueue_b10.clear();
    boolean b17 = priorityqueue_b10.contains((java.lang.Object)1L);
    java.util.Spliterator<java.lang.Boolean> spliterator_b18 = priorityqueue_b10.spliterator();
    boolean b19 = priorityqueue_b0.remove((java.lang.Object)spliterator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array15 = new java.lang.Boolean[] { false, false };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b12, b_array15);
    java.util.Iterator<java.lang.Boolean> iterator_b17 = priorityqueue_b12.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b12);
    java.lang.Boolean b19 = priorityqueue_b18.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array23 = new java.lang.Boolean[] { false, false };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b20, b_array23);
    priorityqueue_b20.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array33 = priorityqueue_b26.toArray(str_array32);
    java.lang.String[] str_array34 = priorityqueue_b20.toArray(str_array33);
    boolean b35 = priorityqueue_b18.contains((java.lang.Object)priorityqueue_b20);
    java.lang.String[] str_array41 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array42 = priorityqueue_b20.toArray(str_array41);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b43 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array50 = priorityqueue_b43.toArray(str_array49);
    java.lang.String[] str_array51 = priorityqueue_b20.toArray(str_array50);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array52 = priorityqueue_b6.toArray(str_array50);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b19 + "' != '" + false+ "'", b19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b5);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    java.lang.Object[] obj_array5 = priorityqueue_b0.toArray();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.Boolean b24 = priorityqueue_b8.peek();
    java.util.Iterator<java.lang.Boolean> iterator_b25 = priorityqueue_b8.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b25);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)true);
    boolean b15 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array19 = new java.lang.Boolean[] { false, false };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array19);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b16.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.lang.Boolean b23 = priorityqueue_b22.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    priorityqueue_b24.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array37 = priorityqueue_b30.toArray(str_array36);
    java.lang.String[] str_array38 = priorityqueue_b24.toArray(str_array37);
    boolean b39 = priorityqueue_b22.contains((java.lang.Object)priorityqueue_b24);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array43 = new java.lang.Boolean[] { false, false };
    boolean b44 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b40, b_array43);
    java.util.Iterator<java.lang.Boolean> iterator_b45 = priorityqueue_b40.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b46 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b40);
    java.lang.Boolean b47 = priorityqueue_b46.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b48 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array51 = new java.lang.Boolean[] { false, false };
    boolean b52 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b48, b_array51);
    priorityqueue_b48.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b54 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array60 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array61 = priorityqueue_b54.toArray(str_array60);
    java.lang.String[] str_array62 = priorityqueue_b48.toArray(str_array61);
    boolean b63 = priorityqueue_b46.contains((java.lang.Object)priorityqueue_b48);
    java.lang.String[] str_array69 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array70 = priorityqueue_b48.toArray(str_array69);
    java.lang.String[] str_array71 = priorityqueue_b24.toArray(str_array69);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array72 = priorityqueue_b6.toArray(str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + false+ "'", b23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b47 + "' != '" + false+ "'", b47.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = priorityqueue_b5.removeIf(predicate_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    priorityqueue_b5.clear();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b5.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    java.lang.Object[] obj_array12 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    int i8 = priorityqueue_b0.size();
    boolean b10 = priorityqueue_b0.offer((java.lang.Boolean)false);
    java.util.function.Predicate<java.lang.Object> predicate_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = priorityqueue_b0.removeIf(predicate_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    java.lang.Object[] obj_array17 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    boolean b20 = priorityqueue_b18.offer((java.lang.Boolean)true);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b18.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = priorityqueue_b8.removeIf(predicate_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array30 = priorityqueue_b8.toArray(str_array29);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b31 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array38 = priorityqueue_b31.toArray(str_array37);
    java.lang.String[] str_array39 = priorityqueue_b8.toArray(str_array38);
    boolean b41 = priorityqueue_b8.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b42 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array45 = new java.lang.Boolean[] { false, false };
    boolean b46 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b42, b_array45);
    java.util.Iterator<java.lang.Boolean> iterator_b47 = priorityqueue_b42.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b48 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b42);
    java.lang.Boolean b49 = priorityqueue_b48.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b50 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array53 = new java.lang.Boolean[] { false, false };
    boolean b54 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b50, b_array53);
    priorityqueue_b50.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b56 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array63 = priorityqueue_b56.toArray(str_array62);
    java.lang.String[] str_array64 = priorityqueue_b50.toArray(str_array63);
    boolean b65 = priorityqueue_b48.contains((java.lang.Object)priorityqueue_b50);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b66 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array69 = new java.lang.Boolean[] { false, false };
    boolean b70 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b66, b_array69);
    java.util.Iterator<java.lang.Boolean> iterator_b71 = priorityqueue_b66.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b72 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b66);
    java.lang.Boolean b73 = priorityqueue_b72.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b74 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array77 = new java.lang.Boolean[] { false, false };
    boolean b78 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b74, b_array77);
    priorityqueue_b74.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b80 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array86 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array87 = priorityqueue_b80.toArray(str_array86);
    java.lang.String[] str_array88 = priorityqueue_b74.toArray(str_array87);
    boolean b89 = priorityqueue_b72.contains((java.lang.Object)priorityqueue_b74);
    java.lang.String[] str_array95 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array96 = priorityqueue_b74.toArray(str_array95);
    java.lang.String[] str_array97 = priorityqueue_b50.toArray(str_array95);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array98 = priorityqueue_b8.toArray(str_array95);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b49 + "' != '" + false+ "'", b49.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b73 + "' != '" + false+ "'", b73.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Boolean b2 = priorityqueue_b1.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    priorityqueue_b1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj1);
    java.lang.Object[] obj_array3 = priorityqueue_b2.toArray();
    boolean b5 = priorityqueue_b2.add((java.lang.Boolean)true);
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((-1), comparator_obj1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = treeset_b0.removeIf(predicate_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.lang.Boolean b9 = priorityqueue_b6.peek();
    java.util.function.Predicate<java.lang.Object> predicate_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = priorityqueue_b6.removeIf(predicate_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b9 + "' != '" + false+ "'", b9.equals(false));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array5 = new java.lang.Boolean[] { false, false };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b2, b_array5);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b2.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b2.spliterator();
    priorityqueue_b2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b3 = priorityqueue_b1.remove((java.lang.Object)10);
    priorityqueue_b1.clear();
    java.lang.Boolean b5 = priorityqueue_b1.peek();
    int i6 = priorityqueue_b1.size();
    int i7 = priorityqueue_b1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    java.util.function.Predicate<java.lang.Object> predicate_obj17 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = priorityqueue_b14.removeIf(predicate_obj17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b2);
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)arraylist_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array16 = new java.lang.Boolean[] { false, false };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b13, b_array16);
    java.util.Iterator<java.lang.Boolean> iterator_b18 = priorityqueue_b13.iterator();
    boolean b20 = priorityqueue_b13.add((java.lang.Boolean)false);
    priorityqueue_b13.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array25 = new java.lang.Boolean[] { false, false };
    boolean b26 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b22, b_array25);
    java.util.Iterator<java.lang.Boolean> iterator_b27 = priorityqueue_b22.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b22);
    java.lang.Boolean b29 = priorityqueue_b28.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array33 = new java.lang.Boolean[] { false, false };
    boolean b34 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b30, b_array33);
    priorityqueue_b30.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b36 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array43 = priorityqueue_b36.toArray(str_array42);
    java.lang.String[] str_array44 = priorityqueue_b30.toArray(str_array43);
    boolean b45 = priorityqueue_b28.contains((java.lang.Object)priorityqueue_b30);
    java.lang.String[] str_array51 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array52 = priorityqueue_b30.toArray(str_array51);
    java.lang.String[] str_array53 = priorityqueue_b13.toArray(str_array51);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array54 = priorityqueue_b5.toArray(str_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b29 + "' != '" + false+ "'", b29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10, comparator_obj1);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b0.comparator();
    java.util.Comparator<java.lang.Boolean> comparator_b12 = priorityqueue_b0.comparator();
    java.util.Comparator<java.lang.Object> comparator_obj14 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)1, comparator_obj14);
    java.util.ArrayList<java.lang.Boolean> arraylist_b16 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array18 = new java.lang.Boolean[] { true };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b16, b_array18);
    java.util.stream.Stream<java.lang.Boolean> stream_b20 = arraylist_b16.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b21 = arraylist_b16.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b16);
    java.lang.Boolean b23 = priorityqueue_b22.peek();
    java.lang.Boolean b24 = priorityqueue_b22.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array28 = new java.lang.Boolean[] { false, false };
    boolean b29 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b25, b_array28);
    priorityqueue_b25.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b31 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array38 = priorityqueue_b31.toArray(str_array37);
    java.lang.String[] str_array39 = priorityqueue_b25.toArray(str_array38);
    boolean b40 = priorityqueue_b22.contains((java.lang.Object)str_array38);
    java.lang.String[] str_array41 = priorityqueue_b15.toArray(str_array38);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array42 = priorityqueue_b0.toArray(str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + true+ "'", b23.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b24 + "' != '" + true+ "'", b24.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    java.util.function.Predicate<java.lang.Object> predicate_obj26 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b27 = priorityqueue_b8.removeIf(predicate_obj26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { false };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array9);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b7.iterator();
    priorityqueue_b7.clear();
    java.lang.Boolean b13 = priorityqueue_b7.poll();
    java.lang.Boolean b14 = priorityqueue_b7.peek();
    boolean b15 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b7);
    java.util.TreeSet<java.lang.Boolean> treeset_b16 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array18 = new java.lang.Boolean[] { true };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b16, b_array18);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b16);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b16);
    boolean b22 = priorityqueue_b7.remove((java.lang.Object)priorityqueue_b21);
    java.util.Spliterator<java.lang.Boolean> spliterator_b23 = priorityqueue_b7.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b23);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.Iterator<java.lang.Boolean> iterator_b6 = priorityqueue_b5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b6);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    boolean b15 = priorityqueue_b12.offer((java.lang.Boolean)false);
    java.lang.Boolean b16 = priorityqueue_b12.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b16 + "' != '" + false+ "'", b16.equals(false));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array14 = new java.lang.Boolean[] { true, false };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b11, b_array14);
    int i16 = priorityqueue_b11.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b11);
    priorityqueue_b17.clear();
    java.util.Comparator<java.lang.Boolean> comparator_b19 = priorityqueue_b17.comparator();
    boolean b20 = priorityqueue_b9.contains((java.lang.Object)comparator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b0.parallelStream();
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b8 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.lang.Boolean b9 = priorityqueue_b6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b9 + "' != '" + false+ "'", b9.equals(false));

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    java.util.Spliterator<java.lang.Boolean> spliterator_b10 = priorityqueue_b6.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b10);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    java.util.Collection<java.lang.Boolean> collection_b0 = null;
    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(collection_b0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    boolean b7 = priorityqueue_b5.add((java.lang.Boolean)false);
    java.lang.Boolean b8 = priorityqueue_b5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + false+ "'", b8.equals(false));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    boolean b6 = priorityqueue_b4.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b9.forEach(consumer_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj1);
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b2.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    priorityqueue_b4.clear();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b4.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.lang.Object[] obj_array15 = priorityqueue_b14.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b16 = priorityqueue_b14.stream();
    java.lang.Object[] obj_array17 = priorityqueue_b14.toArray();
    boolean b19 = priorityqueue_b14.offer((java.lang.Boolean)false);
    java.util.function.Consumer<java.lang.Object> consumer_obj20 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b14.forEach(consumer_obj20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    java.lang.Object[] obj_array18 = priorityqueue_b17.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1, comparator_obj1);
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    java.lang.Object[] obj_array17 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    boolean b20 = priorityqueue_b18.offer((java.lang.Boolean)true);
    java.lang.String[] str_array24 = new java.lang.String[] { "", "", "hi!" };
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array25 = priorityqueue_b18.toArray(str_array24);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b12 = priorityqueue_b10.offer((java.lang.Boolean)true);
    int i13 = priorityqueue_b10.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    boolean b5 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b6.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b10 = priorityqueue_b6.spliterator();
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)' ');
    java.util.Spliterator<java.lang.Boolean> spliterator_b2 = priorityqueue_b1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b2);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b9.iterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b9.forEach(consumer_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    java.util.stream.Stream<java.lang.Boolean> stream_b17 = priorityqueue_b14.stream();
    java.util.Comparator<java.lang.Boolean> comparator_b18 = priorityqueue_b14.comparator();
    java.util.function.Consumer<java.lang.Object> consumer_obj19 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b14.forEach(consumer_obj19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b18);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b12 = priorityqueue_b10.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b8.iterator();
    boolean b15 = priorityqueue_b8.add((java.lang.Boolean)false);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array20 = new java.lang.Boolean[] { false, false };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b17, b_array20);
    java.util.Iterator<java.lang.Boolean> iterator_b22 = priorityqueue_b17.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b17);
    java.lang.Boolean b24 = priorityqueue_b23.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array28 = new java.lang.Boolean[] { false, false };
    boolean b29 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b25, b_array28);
    priorityqueue_b25.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b31 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array38 = priorityqueue_b31.toArray(str_array37);
    java.lang.String[] str_array39 = priorityqueue_b25.toArray(str_array38);
    boolean b40 = priorityqueue_b23.contains((java.lang.Object)priorityqueue_b25);
    java.lang.String[] str_array46 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array47 = priorityqueue_b25.toArray(str_array46);
    java.lang.String[] str_array48 = priorityqueue_b8.toArray(str_array46);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array49 = priorityqueue_b0.toArray(str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b24 + "' != '" + false+ "'", b24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array5 = new java.lang.Boolean[] { false, false };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b2, b_array5);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b2.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b2);
    java.util.function.Predicate<java.lang.Object> predicate_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = priorityqueue_b2.removeIf(predicate_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b1);
    boolean b4 = priorityqueue_b2.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b3 = priorityqueue_b1.remove((java.lang.Object)10);
    priorityqueue_b1.clear();
    java.lang.Boolean b5 = priorityqueue_b1.peek();
    java.util.function.Consumer<java.lang.Object> consumer_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b1.forEach(consumer_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b5);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = priorityqueue_b0.removeIf(predicate_obj13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array16 = new java.lang.Boolean[] { false };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b14, b_array16);
    java.util.Iterator<java.lang.Boolean> iterator_b18 = priorityqueue_b14.iterator();
    priorityqueue_b14.clear();
    java.lang.Boolean b20 = priorityqueue_b14.poll();
    boolean b22 = priorityqueue_b14.contains((java.lang.Object)100.0d);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array26 = new java.lang.Boolean[] { false, false };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b23, b_array26);
    priorityqueue_b23.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array36 = priorityqueue_b29.toArray(str_array35);
    java.lang.String[] str_array37 = priorityqueue_b23.toArray(str_array36);
    java.lang.String[] str_array38 = priorityqueue_b14.toArray(str_array37);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array39 = priorityqueue_b5.toArray(str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(2, comparator_obj1);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    boolean b11 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.lang.Boolean b12 = priorityqueue_b6.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b13 = priorityqueue_b6.spliterator();
    boolean b15 = priorityqueue_b6.add((java.lang.Boolean)false);
    java.lang.Boolean b16 = priorityqueue_b6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b16 + "' != '" + false+ "'", b16.equals(false));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    java.lang.Object[] obj_array3 = priorityqueue_b2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)' ');
    boolean b3 = priorityqueue_b1.add((java.lang.Boolean)false);
    priorityqueue_b1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    int i5 = priorityqueue_b2.size();
    int i6 = priorityqueue_b2.size();
    java.lang.Boolean b7 = priorityqueue_b2.poll();
    java.lang.Boolean b8 = priorityqueue_b2.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b8);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)1);
    java.lang.Boolean b2 = priorityqueue_b1.peek();
    java.util.ArrayList<java.lang.Boolean> arraylist_b3 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array5 = new java.lang.Boolean[] { true };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b3, b_array5);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = arraylist_b3.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b3);
    java.util.TreeSet<java.lang.Boolean> treeset_b9 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { true, true };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b9, b_array12);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b9);
    boolean b15 = priorityqueue_b8.remove((java.lang.Object)treeset_b9);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b8.iterator();
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array21 = new java.lang.Boolean[] { false, false };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b18, b_array21);
    java.util.Iterator<java.lang.Boolean> iterator_b23 = priorityqueue_b18.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b18);
    java.lang.Boolean b25 = priorityqueue_b24.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    priorityqueue_b26.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array39 = priorityqueue_b32.toArray(str_array38);
    java.lang.String[] str_array40 = priorityqueue_b26.toArray(str_array39);
    boolean b41 = priorityqueue_b24.contains((java.lang.Object)priorityqueue_b26);
    java.lang.String[] str_array47 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array48 = priorityqueue_b26.toArray(str_array47);
    java.lang.String[] str_array49 = priorityqueue_b8.toArray(str_array48);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b50 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array53 = new java.lang.Boolean[] { false, false };
    boolean b54 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b50, b_array53);
    java.util.Iterator<java.lang.Boolean> iterator_b55 = priorityqueue_b50.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b56 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b50);
    java.util.Spliterator<java.lang.Boolean> spliterator_b57 = priorityqueue_b50.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b59 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b60 = priorityqueue_b50.remove((java.lang.Object)priorityqueue_b59);
    java.lang.Boolean b61 = priorityqueue_b59.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b62 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array65 = new java.lang.Boolean[] { false, false };
    boolean b66 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b62, b_array65);
    java.util.Iterator<java.lang.Boolean> iterator_b67 = priorityqueue_b62.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b68 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b62);
    java.lang.Boolean b69 = priorityqueue_b68.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b70 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array73 = new java.lang.Boolean[] { false, false };
    boolean b74 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b70, b_array73);
    priorityqueue_b70.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b76 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array82 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array83 = priorityqueue_b76.toArray(str_array82);
    java.lang.String[] str_array84 = priorityqueue_b70.toArray(str_array83);
    boolean b85 = priorityqueue_b68.contains((java.lang.Object)priorityqueue_b70);
    java.lang.String[] str_array91 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array92 = priorityqueue_b70.toArray(str_array91);
    java.lang.String[] str_array93 = priorityqueue_b59.toArray(str_array91);
    java.lang.String[] str_array94 = priorityqueue_b8.toArray(str_array91);
    java.lang.String[] str_array95 = priorityqueue_b1.toArray(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b25 + "' != '" + false+ "'", b25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b69 + "' != '" + false+ "'", b69.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    java.util.Comparator<java.lang.Object> comparator_obj18 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b19 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj18);
    priorityqueue_b19.clear();
    java.util.Spliterator<java.lang.Boolean> spliterator_b21 = priorityqueue_b19.spliterator();
    boolean b22 = priorityqueue_b0.remove((java.lang.Object)spliterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Boolean> comparator_b14 = priorityqueue_b6.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b14);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b10.forEach(consumer_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array30 = priorityqueue_b8.toArray(str_array29);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b31 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array38 = priorityqueue_b31.toArray(str_array37);
    java.lang.String[] str_array39 = priorityqueue_b8.toArray(str_array38);
    boolean b41 = priorityqueue_b8.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b43 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b45 = priorityqueue_b43.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b46 = priorityqueue_b43.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b47 = priorityqueue_b43.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b48 = priorityqueue_b43.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b49 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array52 = new java.lang.Boolean[] { true, false };
    boolean b53 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b49, b_array52);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b54 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b49);
    boolean b55 = priorityqueue_b43.contains((java.lang.Object)priorityqueue_b54);
    java.lang.Object[] obj_array56 = priorityqueue_b43.toArray();
    boolean b57 = priorityqueue_b8.remove((java.lang.Object)obj_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    int i5 = priorityqueue_b2.size();
    priorityqueue_b2.clear();
    java.util.function.Consumer<java.lang.Object> consumer_obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b2.forEach(consumer_obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.util.Comparator<java.lang.Boolean> comparator_b10 = priorityqueue_b8.comparator();
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b8.parallelStream();
    java.util.Comparator<java.lang.Boolean> comparator_b12 = priorityqueue_b8.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b12);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj1);
    java.util.Comparator<java.lang.Object> comparator_obj4 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj4);
    boolean b7 = priorityqueue_b5.offer((java.lang.Boolean)true);
    int i8 = priorityqueue_b5.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b12 = priorityqueue_b10.contains((java.lang.Object)"");
    boolean b14 = priorityqueue_b10.remove((java.lang.Object)(byte)10);
    boolean b15 = priorityqueue_b5.remove((java.lang.Object)priorityqueue_b10);
    boolean b16 = priorityqueue_b2.contains((java.lang.Object)priorityqueue_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.util.function.Predicate<java.lang.Object> predicate_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = priorityqueue_b8.removeIf(predicate_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.function.Consumer<java.lang.Object> consumer_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4', comparator_obj1);
    int i3 = priorityqueue_b2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)1, comparator_obj1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    int i9 = priorityqueue_b8.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.lang.Boolean b11 = priorityqueue_b8.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + false+ "'", b11.equals(false));

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.lang.Boolean b9 = priorityqueue_b0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b9);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.lang.Object[] obj_array13 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100, comparator_obj1);
    int i3 = priorityqueue_b2.size();
    java.lang.String[] str_array4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array5 = priorityqueue_b2.toArray(str_array4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    boolean b5 = priorityqueue_b1.remove((java.lang.Object)(byte)10);
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b1.comparator();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b1.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    java.util.Comparator<java.lang.Boolean> comparator_b14 = priorityqueue_b12.comparator();
    java.util.function.Predicate<java.lang.Object> predicate_obj15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = priorityqueue_b12.removeIf(predicate_obj15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b14);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b6.spliterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b13 = priorityqueue_b6.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b13);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Spliterator<java.lang.Boolean> spliterator_b19 = priorityqueue_b18.spliterator();
    boolean b20 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b18);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array24 = new java.lang.Boolean[] { false, false };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b21, b_array24);
    java.util.Iterator<java.lang.Boolean> iterator_b26 = priorityqueue_b21.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b27 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b21);
    java.lang.Boolean b28 = priorityqueue_b27.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array32 = new java.lang.Boolean[] { false, false };
    boolean b33 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b29, b_array32);
    priorityqueue_b29.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b35 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array42 = priorityqueue_b35.toArray(str_array41);
    java.lang.String[] str_array43 = priorityqueue_b29.toArray(str_array42);
    boolean b44 = priorityqueue_b27.contains((java.lang.Object)priorityqueue_b29);
    java.lang.String[] str_array50 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array51 = priorityqueue_b29.toArray(str_array50);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b52 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array59 = priorityqueue_b52.toArray(str_array58);
    java.lang.String[] str_array60 = priorityqueue_b29.toArray(str_array59);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array61 = priorityqueue_b6.toArray(str_array60);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b28 + "' != '" + false+ "'", b28.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b9);
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b9.stream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b9.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = priorityqueue_b8.removeIf(predicate_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    java.lang.Boolean b7 = priorityqueue_b0.peek();
    java.lang.Object[] obj_array8 = priorityqueue_b0.toArray();
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10, comparator_obj1);
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b2.spliterator();
    java.lang.String[] str_array4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array5 = priorityqueue_b2.toArray(str_array4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b0.comparator();
    java.util.Comparator<java.lang.Boolean> comparator_b12 = priorityqueue_b0.comparator();
    boolean b14 = priorityqueue_b0.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = arraylist_b0.removeIf(predicate_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b19 = priorityqueue_b9.remove((java.lang.Object)priorityqueue_b18);
    java.lang.Boolean b20 = priorityqueue_b18.peek();
    java.lang.Boolean b21 = priorityqueue_b18.peek();
    java.util.Iterator<java.lang.Boolean> iterator_b22 = priorityqueue_b18.iterator();
    boolean b23 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b18);
    java.lang.Object[] obj_array24 = priorityqueue_b18.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.TreeSet<java.lang.Boolean> treeset_b4 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b4, b_array6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b4);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Object[] obj_array11 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b1.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.lang.Boolean b12 = priorityqueue_b0.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.lang.Boolean b5 = priorityqueue_b4.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b5 + "' != '" + true+ "'", b5.equals(true));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b7.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b17 = priorityqueue_b7.remove((java.lang.Object)priorityqueue_b16);
    java.lang.Boolean b18 = priorityqueue_b16.peek();
    java.lang.Boolean b19 = priorityqueue_b16.peek();
    boolean b21 = priorityqueue_b16.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b25 = priorityqueue_b23.remove((java.lang.Object)10);
    priorityqueue_b23.clear();
    java.lang.Boolean b27 = priorityqueue_b23.peek();
    int i28 = priorityqueue_b23.size();
    boolean b29 = priorityqueue_b16.remove((java.lang.Object)priorityqueue_b23);
    java.lang.Object obj30 = null;
    boolean b31 = priorityqueue_b23.remove(obj30);
    boolean b32 = priorityqueue_b0.contains((java.lang.Object)b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b6.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b9 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { true, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b9, b_array12);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b9);
    boolean b15 = priorityqueue_b8.remove((java.lang.Object)treeset_b9);
    java.util.stream.Stream<java.lang.Boolean> stream_b16 = priorityqueue_b8.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b16);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    boolean b12 = priorityqueue_b6.offer((java.lang.Boolean)true);
    priorityqueue_b6.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.lang.Boolean b6 = priorityqueue_b5.poll();
    boolean b8 = priorityqueue_b5.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b6 + "' != '" + false+ "'", b6.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.poll();
    boolean b9 = priorityqueue_b6.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b0.comparator();
    java.util.Comparator<java.lang.Boolean> comparator_b12 = priorityqueue_b0.comparator();
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b0.parallelStream();
    java.util.ArrayList<java.lang.Boolean> arraylist_b14 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array16 = new java.lang.Boolean[] { true };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b14, b_array16);
    java.util.stream.Stream<java.lang.Boolean> stream_b18 = arraylist_b14.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b19 = arraylist_b14.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b14);
    java.lang.Boolean b21 = priorityqueue_b20.peek();
    java.lang.Boolean b22 = priorityqueue_b20.peek();
    boolean b23 = priorityqueue_b0.remove((java.lang.Object)b22);
    int i24 = priorityqueue_b0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b21 + "' != '" + true+ "'", b21.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b22 + "' != '" + true+ "'", b22.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Spliterator<java.lang.Boolean> spliterator_b19 = priorityqueue_b18.spliterator();
    boolean b20 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b18);
    priorityqueue_b18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array13 = new java.lang.Boolean[] { false, false };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b10, b_array13);
    java.util.Iterator<java.lang.Boolean> iterator_b15 = priorityqueue_b10.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b10);
    boolean b17 = priorityqueue_b9.remove((java.lang.Object)priorityqueue_b10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b10);
    boolean b19 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b18);
    priorityqueue_b18.clear();
    java.util.function.Predicate<java.lang.Object> predicate_obj21 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = priorityqueue_b18.removeIf(predicate_obj21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b12 = priorityqueue_b0.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b13.spliterator();
    java.lang.Boolean b15 = priorityqueue_b13.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b15 + "' != '" + false+ "'", b15.equals(false));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b10.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b10);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b12.iterator();
    boolean b15 = priorityqueue_b12.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b4 = priorityqueue_b1.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b4);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    java.lang.Object[] obj_array17 = priorityqueue_b6.toArray();
    java.lang.Boolean b18 = priorityqueue_b6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b18 + "' != '" + false+ "'", b18.equals(false));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b3.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = priorityqueue_b3.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    boolean b11 = priorityqueue_b3.contains((java.lang.Object)arraylist_b6);
    boolean b13 = priorityqueue_b3.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj15 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj15);
    java.lang.Object[] obj_array17 = priorityqueue_b16.toArray();
    boolean b18 = priorityqueue_b3.contains((java.lang.Object)obj_array17);
    boolean b19 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b3);
    java.util.function.Predicate<java.lang.Object> predicate_obj20 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = priorityqueue_b1.removeIf(predicate_obj20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    boolean b10 = priorityqueue_b0.add((java.lang.Boolean)true);
    java.lang.Boolean b11 = priorityqueue_b0.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + false+ "'", b11.equals(false));

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    boolean b11 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.lang.Boolean b12 = priorityqueue_b6.peek();
    priorityqueue_b6.clear();
    java.lang.Boolean b14 = priorityqueue_b6.peek();
    java.lang.Boolean b15 = priorityqueue_b6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b15);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array30 = priorityqueue_b8.toArray(str_array29);
    java.util.Comparator<java.lang.Boolean> comparator_b31 = priorityqueue_b8.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b31);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { false };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b6, b_array8);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    priorityqueue_b6.clear();
    java.lang.Boolean b12 = priorityqueue_b6.poll();
    boolean b13 = priorityqueue_b5.remove((java.lang.Object)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array16 = new java.lang.Boolean[] { false };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b14, b_array16);
    java.util.Iterator<java.lang.Boolean> iterator_b18 = priorityqueue_b14.iterator();
    priorityqueue_b14.clear();
    boolean b21 = priorityqueue_b14.contains((java.lang.Object)1L);
    java.util.Comparator<java.lang.Boolean> comparator_b22 = priorityqueue_b14.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array26 = new java.lang.Boolean[] { false, false };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b23, b_array26);
    java.util.Iterator<java.lang.Boolean> iterator_b28 = priorityqueue_b23.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b23);
    boolean b31 = priorityqueue_b29.contains((java.lang.Object)(short)-1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b29);
    java.util.Iterator<java.lang.Boolean> iterator_b33 = priorityqueue_b32.iterator();
    boolean b34 = priorityqueue_b14.remove((java.lang.Object)iterator_b33);
    java.lang.Boolean b35 = priorityqueue_b14.poll();
    boolean b36 = priorityqueue_b6.contains((java.lang.Object)b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Boolean b11 = priorityqueue_b6.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + true+ "'", b11.equals(true));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    java.util.Iterator<java.lang.Boolean> iterator_b31 = priorityqueue_b26.iterator();
    boolean b33 = priorityqueue_b26.add((java.lang.Boolean)false);
    priorityqueue_b26.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b26.iterator();
    java.lang.Boolean b36 = priorityqueue_b26.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b37 = priorityqueue_b26.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj39 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj39);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b40);
    boolean b42 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b40);
    boolean b43 = priorityqueue_b8.remove((java.lang.Object)b42);
    priorityqueue_b8.clear();
    boolean b46 = priorityqueue_b8.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    priorityqueue_b5.clear();
    java.util.Comparator<java.lang.Boolean> comparator_b15 = priorityqueue_b5.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b15);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.util.function.Consumer<java.lang.Object> consumer_obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + false+ "'", b11.equals(false));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b8 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b6.stream();
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    int i12 = priorityqueue_b6.size();
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b6.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array30 = priorityqueue_b8.toArray(str_array29);
    int i31 = priorityqueue_b8.size();
    int i32 = priorityqueue_b8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b12 = priorityqueue_b10.offer((java.lang.Boolean)true);
    java.lang.Boolean b13 = priorityqueue_b10.poll();
    priorityqueue_b10.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b13 + "' != '" + false+ "'", b13.equals(false));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b0.comparator();
    boolean b13 = priorityqueue_b0.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b4);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { false, false };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b6, b_array9);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.Spliterator<java.lang.Boolean> spliterator_b13 = priorityqueue_b6.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    java.lang.Boolean b17 = priorityqueue_b15.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array21 = new java.lang.Boolean[] { false, false };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b18, b_array21);
    java.util.Iterator<java.lang.Boolean> iterator_b23 = priorityqueue_b18.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b18);
    java.lang.Boolean b25 = priorityqueue_b24.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    priorityqueue_b26.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array39 = priorityqueue_b32.toArray(str_array38);
    java.lang.String[] str_array40 = priorityqueue_b26.toArray(str_array39);
    boolean b41 = priorityqueue_b24.contains((java.lang.Object)priorityqueue_b26);
    java.lang.String[] str_array47 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array48 = priorityqueue_b26.toArray(str_array47);
    java.lang.String[] str_array49 = priorityqueue_b15.toArray(str_array47);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array50 = priorityqueue_b5.toArray(str_array49);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b25 + "' != '" + false+ "'", b25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b15);
    java.util.function.Predicate<java.lang.Object> predicate_obj18 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = priorityqueue_b17.removeIf(predicate_obj18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    int i10 = priorityqueue_b6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.stream.Stream<java.lang.Boolean> stream_b24 = priorityqueue_b8.parallelStream();
    boolean b26 = priorityqueue_b8.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.Boolean b24 = priorityqueue_b8.peek();
    java.lang.Boolean b25 = priorityqueue_b8.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b25);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    java.util.Iterator<java.lang.Boolean> iterator_b31 = priorityqueue_b26.iterator();
    boolean b33 = priorityqueue_b26.add((java.lang.Boolean)false);
    priorityqueue_b26.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b26.iterator();
    java.lang.Boolean b36 = priorityqueue_b26.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b37 = priorityqueue_b26.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj39 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj39);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b40);
    boolean b42 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b40);
    boolean b43 = priorityqueue_b8.remove((java.lang.Object)b42);
    int i44 = priorityqueue_b8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    boolean b11 = priorityqueue_b0.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b10.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b10);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b12.iterator();
    boolean b15 = priorityqueue_b12.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b12);
    priorityqueue_b16.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    boolean b7 = priorityqueue_b5.add((java.lang.Boolean)true);
    boolean b9 = priorityqueue_b5.contains((java.lang.Object)10);
    java.lang.Object obj10 = null;
    boolean b11 = priorityqueue_b5.contains(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Object> comparator_obj9 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100, comparator_obj9);
    int i11 = priorityqueue_b10.size();
    boolean b12 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Object[] obj_array15 = priorityqueue_b14.toArray();
    boolean b16 = priorityqueue_b10.remove((java.lang.Object)priorityqueue_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    priorityqueue_b9.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array22 = priorityqueue_b15.toArray(str_array21);
    java.lang.String[] str_array23 = priorityqueue_b9.toArray(str_array22);
    boolean b24 = priorityqueue_b6.contains((java.lang.Object)str_array22);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.util.stream.Stream<java.lang.Boolean> stream_b26 = priorityqueue_b6.stream();
    boolean b28 = priorityqueue_b6.add((java.lang.Boolean)false);
    java.lang.Object[] obj_array29 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b12 = priorityqueue_b11.peek();
    java.util.function.Predicate<java.lang.Object> predicate_obj13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = priorityqueue_b11.removeIf(predicate_obj13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = priorityqueue_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b9.peek();
    java.lang.Boolean b12 = priorityqueue_b9.peek();
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b9.stream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    boolean b17 = priorityqueue_b9.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(1);
    boolean b3 = priorityqueue_b1.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b1.parallelStream();
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    priorityqueue_b0.clear();
    java.util.Spliterator<java.lang.Boolean> spliterator_b6 = priorityqueue_b0.spliterator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.util.Comparator<java.lang.Boolean> comparator_b10 = priorityqueue_b8.comparator();
    boolean b12 = priorityqueue_b8.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    boolean b7 = priorityqueue_b5.offer((java.lang.Boolean)false);
    java.util.Iterator<java.lang.Boolean> iterator_b8 = priorityqueue_b5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b8);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    priorityqueue_b5.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array18 = new java.lang.Boolean[] { false, false };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b15, b_array18);
    java.util.Iterator<java.lang.Boolean> iterator_b20 = priorityqueue_b15.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b15);
    java.lang.Boolean b22 = priorityqueue_b21.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array26 = new java.lang.Boolean[] { false, false };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b23, b_array26);
    priorityqueue_b23.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array36 = priorityqueue_b29.toArray(str_array35);
    java.lang.String[] str_array37 = priorityqueue_b23.toArray(str_array36);
    boolean b38 = priorityqueue_b21.contains((java.lang.Object)priorityqueue_b23);
    java.lang.String[] str_array44 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array45 = priorityqueue_b23.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b5.toArray(str_array45);
    java.util.function.Predicate<java.lang.Object> predicate_obj47 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b48 = priorityqueue_b5.removeIf(predicate_obj47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b22 + "' != '" + false+ "'", b22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.lang.Object[] obj_array15 = priorityqueue_b14.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b16 = priorityqueue_b14.stream();
    java.lang.Object[] obj_array17 = priorityqueue_b14.toArray();
    int i18 = priorityqueue_b14.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 3);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b10.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b10);
    java.util.function.Predicate<java.lang.Object> predicate_obj13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = priorityqueue_b10.removeIf(predicate_obj13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    java.util.Iterator<java.lang.Boolean> iterator_b31 = priorityqueue_b26.iterator();
    boolean b33 = priorityqueue_b26.add((java.lang.Boolean)false);
    priorityqueue_b26.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b26.iterator();
    java.lang.Boolean b36 = priorityqueue_b26.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b37 = priorityqueue_b26.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj39 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj39);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b40);
    boolean b42 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b40);
    boolean b43 = priorityqueue_b8.remove((java.lang.Object)b42);
    java.lang.Object[] obj_array44 = priorityqueue_b8.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    boolean b9 = priorityqueue_b0.offer((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj11 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj11);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "hi!" };
    java.lang.String[] str_array16 = priorityqueue_b12.toArray(str_array15);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array17 = priorityqueue_b0.toArray(str_array15);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.util.Comparator<java.lang.Object> comparator_obj5 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj5);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    priorityqueue_b7.clear();
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b3.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = priorityqueue_b3.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    boolean b11 = priorityqueue_b3.contains((java.lang.Object)arraylist_b6);
    boolean b13 = priorityqueue_b3.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj15 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj15);
    java.lang.Object[] obj_array17 = priorityqueue_b16.toArray();
    boolean b18 = priorityqueue_b3.contains((java.lang.Object)obj_array17);
    boolean b19 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b3);
    boolean b21 = priorityqueue_b1.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    boolean b6 = priorityqueue_b0.offer((java.lang.Boolean)false);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b0.iterator();
    java.lang.Object[] obj_array8 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b12);
    java.util.function.Consumer<java.lang.Object> consumer_obj14 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b12.forEach(consumer_obj14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b0.iterator();
    boolean b12 = priorityqueue_b0.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b5);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b5.parallelStream();
    boolean b9 = priorityqueue_b5.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    boolean b8 = priorityqueue_b5.offer((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array11);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b9.iterator();
    priorityqueue_b9.clear();
    java.lang.Boolean b15 = priorityqueue_b9.poll();
    boolean b17 = priorityqueue_b9.contains((java.lang.Object)100.0d);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array21 = new java.lang.Boolean[] { false, false };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b18, b_array21);
    priorityqueue_b18.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array31 = priorityqueue_b24.toArray(str_array30);
    java.lang.String[] str_array32 = priorityqueue_b18.toArray(str_array31);
    java.lang.String[] str_array33 = priorityqueue_b9.toArray(str_array32);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array34 = priorityqueue_b5.toArray(str_array32);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj1);
    java.lang.Object[] obj_array3 = priorityqueue_b2.toArray();
    java.util.function.Consumer<java.lang.Object> consumer_obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b2.forEach(consumer_obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array11);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b9.iterator();
    priorityqueue_b9.clear();
    java.lang.Boolean b15 = priorityqueue_b9.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array19 = new java.lang.Boolean[] { false, false };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array19);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b16.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.util.Spliterator<java.lang.Boolean> spliterator_b23 = priorityqueue_b16.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b26 = priorityqueue_b16.remove((java.lang.Object)priorityqueue_b25);
    java.lang.Boolean b27 = priorityqueue_b25.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array31 = new java.lang.Boolean[] { false, false };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b28, b_array31);
    java.util.Iterator<java.lang.Boolean> iterator_b33 = priorityqueue_b28.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b34 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b28);
    java.lang.Boolean b35 = priorityqueue_b34.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b36 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array39 = new java.lang.Boolean[] { false, false };
    boolean b40 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b36, b_array39);
    priorityqueue_b36.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b42 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array49 = priorityqueue_b42.toArray(str_array48);
    java.lang.String[] str_array50 = priorityqueue_b36.toArray(str_array49);
    boolean b51 = priorityqueue_b34.contains((java.lang.Object)priorityqueue_b36);
    java.lang.String[] str_array57 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array58 = priorityqueue_b36.toArray(str_array57);
    java.lang.String[] str_array59 = priorityqueue_b25.toArray(str_array57);
    java.lang.String[] str_array60 = priorityqueue_b9.toArray(str_array59);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array61 = priorityqueue_b0.toArray(str_array60);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b35 + "' != '" + false+ "'", b35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.poll();
    java.util.function.Predicate<java.lang.Object> predicate_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = priorityqueue_b6.removeIf(predicate_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100.0d);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    priorityqueue_b9.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array22 = priorityqueue_b15.toArray(str_array21);
    java.lang.String[] str_array23 = priorityqueue_b9.toArray(str_array22);
    java.lang.String[] str_array24 = priorityqueue_b0.toArray(str_array23);
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b0.comparator();
    java.util.Comparator<java.lang.Boolean> comparator_b26 = priorityqueue_b0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b26);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)true);
    java.util.function.Predicate<java.lang.Object> predicate_obj14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = priorityqueue_b6.removeIf(predicate_obj14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array13 = new java.lang.Boolean[] { false, false };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b10, b_array13);
    java.util.Iterator<java.lang.Boolean> iterator_b15 = priorityqueue_b10.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b10);
    boolean b18 = priorityqueue_b16.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b19 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array21 = new java.lang.Boolean[] { true };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b19, b_array21);
    java.util.stream.Stream<java.lang.Boolean> stream_b23 = arraylist_b19.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = arraylist_b19.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b19);
    boolean b26 = priorityqueue_b16.remove((java.lang.Object)priorityqueue_b25);
    java.lang.Object[] obj_array27 = priorityqueue_b16.toArray();
    boolean b28 = priorityqueue_b8.remove((java.lang.Object)priorityqueue_b16);
    int i29 = priorityqueue_b8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 3);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Boolean b9 = priorityqueue_b6.poll();
    int i10 = priorityqueue_b6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b9 + "' != '" + true+ "'", b9.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b12 = priorityqueue_b0.offer((java.lang.Boolean)false);
    java.util.Spliterator<java.lang.Boolean> spliterator_b13 = priorityqueue_b0.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b13);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    int i5 = priorityqueue_b2.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b9 = priorityqueue_b7.contains((java.lang.Object)"");
    boolean b11 = priorityqueue_b7.remove((java.lang.Object)(byte)10);
    boolean b12 = priorityqueue_b2.remove((java.lang.Object)priorityqueue_b7);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b7.stream();
    priorityqueue_b7.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.util.stream.Stream<java.lang.Boolean> stream_b1 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b1);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Object> comparator_obj9 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100, comparator_obj9);
    int i11 = priorityqueue_b10.size();
    boolean b12 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Boolean b2 = priorityqueue_b1.poll();
    int i3 = priorityqueue_b1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    java.lang.Boolean b9 = priorityqueue_b0.poll();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    priorityqueue_b5.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array18 = new java.lang.Boolean[] { false, false };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b15, b_array18);
    java.util.Iterator<java.lang.Boolean> iterator_b20 = priorityqueue_b15.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b15);
    java.lang.Boolean b22 = priorityqueue_b21.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array26 = new java.lang.Boolean[] { false, false };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b23, b_array26);
    priorityqueue_b23.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array36 = priorityqueue_b29.toArray(str_array35);
    java.lang.String[] str_array37 = priorityqueue_b23.toArray(str_array36);
    boolean b38 = priorityqueue_b21.contains((java.lang.Object)priorityqueue_b23);
    java.lang.String[] str_array44 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array45 = priorityqueue_b23.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b5.toArray(str_array45);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b47 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array50 = new java.lang.Boolean[] { false, false };
    boolean b51 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b47, b_array50);
    java.util.Iterator<java.lang.Boolean> iterator_b52 = priorityqueue_b47.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b53 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b47);
    java.util.Spliterator<java.lang.Boolean> spliterator_b54 = priorityqueue_b47.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b56 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b57 = priorityqueue_b47.remove((java.lang.Object)priorityqueue_b56);
    java.lang.Boolean b58 = priorityqueue_b56.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b59 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array62 = new java.lang.Boolean[] { false, false };
    boolean b63 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b59, b_array62);
    java.util.Iterator<java.lang.Boolean> iterator_b64 = priorityqueue_b59.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b65 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b59);
    java.lang.Boolean b66 = priorityqueue_b65.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b67 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array70 = new java.lang.Boolean[] { false, false };
    boolean b71 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b67, b_array70);
    priorityqueue_b67.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b73 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array80 = priorityqueue_b73.toArray(str_array79);
    java.lang.String[] str_array81 = priorityqueue_b67.toArray(str_array80);
    boolean b82 = priorityqueue_b65.contains((java.lang.Object)priorityqueue_b67);
    java.lang.String[] str_array88 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array89 = priorityqueue_b67.toArray(str_array88);
    java.lang.String[] str_array90 = priorityqueue_b56.toArray(str_array88);
    java.lang.String[] str_array91 = priorityqueue_b5.toArray(str_array88);
    java.util.Comparator<java.lang.Boolean> comparator_b92 = priorityqueue_b5.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b22 + "' != '" + false+ "'", b22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b66 + "' != '" + false+ "'", b66.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b92);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    priorityqueue_b0.clear();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b8.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b8.spliterator();
    boolean b12 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b8);
    java.lang.Object[] obj_array13 = priorityqueue_b8.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    priorityqueue_b0.clear();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    java.util.Comparator<java.lang.Boolean> comparator_b14 = priorityqueue_b12.comparator();
    java.lang.Object[] obj_array15 = priorityqueue_b12.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.lang.Boolean b10 = priorityqueue_b9.poll();
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b9.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b10 + "' != '" + false+ "'", b10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { false };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b6, b_array8);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    priorityqueue_b6.clear();
    java.lang.Boolean b12 = priorityqueue_b6.poll();
    boolean b13 = priorityqueue_b5.remove((java.lang.Object)priorityqueue_b6);
    java.util.Comparator<java.lang.Boolean> comparator_b14 = priorityqueue_b5.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b14);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    priorityqueue_b5.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array18 = new java.lang.Boolean[] { false, false };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b15, b_array18);
    java.util.Iterator<java.lang.Boolean> iterator_b20 = priorityqueue_b15.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b15);
    java.lang.Boolean b22 = priorityqueue_b21.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array26 = new java.lang.Boolean[] { false, false };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b23, b_array26);
    priorityqueue_b23.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array36 = priorityqueue_b29.toArray(str_array35);
    java.lang.String[] str_array37 = priorityqueue_b23.toArray(str_array36);
    boolean b38 = priorityqueue_b21.contains((java.lang.Object)priorityqueue_b23);
    java.lang.String[] str_array44 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array45 = priorityqueue_b23.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b5.toArray(str_array45);
    java.lang.Object[] obj_array47 = priorityqueue_b5.toArray();
    java.util.Spliterator<java.lang.Boolean> spliterator_b48 = priorityqueue_b5.spliterator();
    java.lang.Boolean b49 = priorityqueue_b5.peek();
    boolean b51 = priorityqueue_b5.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b22 + "' != '" + false+ "'", b22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b13 = priorityqueue_b11.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    priorityqueue_b5.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    priorityqueue_b5.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.lang.Object[] obj_array24 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.peek();
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b0.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { false };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array9);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b7.iterator();
    priorityqueue_b7.clear();
    java.lang.Boolean b13 = priorityqueue_b7.poll();
    java.lang.Boolean b14 = priorityqueue_b7.peek();
    boolean b15 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b7);
    java.util.stream.Stream<java.lang.Boolean> stream_b16 = priorityqueue_b7.stream();
    boolean b18 = priorityqueue_b7.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Object[] obj_array9 = priorityqueue_b8.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    boolean b7 = priorityqueue_b5.add((java.lang.Boolean)true);
    java.util.Comparator<java.lang.Object> comparator_obj9 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj9);
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "hi!" };
    java.lang.String[] str_array14 = priorityqueue_b10.toArray(str_array13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array15 = priorityqueue_b5.toArray(str_array13);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "hi!" };
    java.lang.String[] str_array6 = priorityqueue_b2.toArray(str_array5);
    java.lang.Object[] obj_array7 = priorityqueue_b2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b12 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b12);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b9 = priorityqueue_b8.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b9 + "' != '" + false+ "'", b9.equals(false));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b14 = priorityqueue_b0.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b14);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b15 = priorityqueue_b6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b15);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    boolean b5 = priorityqueue_b1.remove((java.lang.Object)(byte)10);
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b1.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    priorityqueue_b7.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array20 = priorityqueue_b13.toArray(str_array19);
    java.lang.String[] str_array21 = priorityqueue_b7.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b1.toArray(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    boolean b8 = priorityqueue_b5.offer((java.lang.Boolean)false);
    java.lang.Boolean b9 = priorityqueue_b5.peek();
    java.util.function.Consumer<java.lang.Object> consumer_obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b5.forEach(consumer_obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b9 + "' != '" + false+ "'", b9.equals(false));

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Boolean b2 = priorityqueue_b1.peek();
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b1.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array5 = new java.lang.Boolean[] { false, false };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b2, b_array5);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b2.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b2);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = priorityqueue_b1.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Comparator<java.lang.Boolean> comparator_b7 = priorityqueue_b0.comparator();
    java.lang.Object[] obj_array8 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.lang.Boolean b13 = priorityqueue_b5.poll();
    boolean b15 = priorityqueue_b5.offer((java.lang.Boolean)false);
    int i16 = priorityqueue_b5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b13 + "' != '" + true+ "'", b13.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'4');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array5 = new java.lang.Boolean[] { false, false };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b2, b_array5);
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b2.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    boolean b12 = priorityqueue_b10.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array16 = new java.lang.Boolean[] { false, false };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b13, b_array16);
    java.util.Iterator<java.lang.Boolean> iterator_b18 = priorityqueue_b13.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b19 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b13);
    java.lang.Boolean b20 = priorityqueue_b19.peek();
    int i21 = priorityqueue_b19.size();
    java.util.Comparator<java.lang.Boolean> comparator_b22 = priorityqueue_b19.comparator();
    java.lang.Object[] obj_array23 = priorityqueue_b19.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b24 = priorityqueue_b19.iterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b25 = priorityqueue_b19.stream();
    boolean b26 = priorityqueue_b10.contains((java.lang.Object)priorityqueue_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b20 + "' != '" + false+ "'", b20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    int i11 = priorityqueue_b10.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b3.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = priorityqueue_b3.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    boolean b11 = priorityqueue_b3.contains((java.lang.Object)arraylist_b6);
    boolean b13 = priorityqueue_b3.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj15 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj15);
    java.lang.Object[] obj_array17 = priorityqueue_b16.toArray();
    boolean b18 = priorityqueue_b3.contains((java.lang.Object)obj_array17);
    boolean b19 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Iterator<java.lang.Boolean> iterator_b22 = priorityqueue_b21.iterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b23 = priorityqueue_b21.parallelStream();
    boolean b24 = priorityqueue_b1.contains((java.lang.Object)stream_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    boolean b5 = priorityqueue_b1.remove((java.lang.Object)(byte)10);
    boolean b7 = priorityqueue_b1.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = arraylist_b0.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Boolean b11 = priorityqueue_b6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + true+ "'", b11.equals(true));

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b8 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b6.stream();
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = priorityqueue_b6.removeIf(predicate_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Boolean b2 = priorityqueue_b1.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.lang.Boolean b4 = priorityqueue_b1.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b4);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100.0d);
    boolean b10 = priorityqueue_b0.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    priorityqueue_b9.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array22 = priorityqueue_b15.toArray(str_array21);
    java.lang.String[] str_array23 = priorityqueue_b9.toArray(str_array22);
    boolean b24 = priorityqueue_b6.contains((java.lang.Object)str_array22);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    boolean b27 = priorityqueue_b25.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Object> comparator_obj9 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100, comparator_obj9);
    int i11 = priorityqueue_b10.size();
    boolean b12 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b10);
    boolean b14 = priorityqueue_b0.offer((java.lang.Boolean)false);
    boolean b16 = priorityqueue_b0.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b9);
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b9.stream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array14 = new java.lang.Boolean[] { false };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b12, b_array14);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b12.iterator();
    java.lang.Object[] obj_array17 = priorityqueue_b12.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b18 = priorityqueue_b12.stream();
    boolean b19 = priorityqueue_b9.contains((java.lang.Object)stream_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.ArrayList<java.lang.Boolean> arraylist_b4 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b4, b_array6);
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = arraylist_b4.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b4);
    java.util.TreeSet<java.lang.Boolean> treeset_b10 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array13 = new java.lang.Boolean[] { true, true };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b10, b_array13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b10);
    boolean b16 = priorityqueue_b9.remove((java.lang.Object)treeset_b10);
    java.util.Iterator<java.lang.Boolean> iterator_b17 = priorityqueue_b9.iterator();
    priorityqueue_b9.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b19 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array22 = new java.lang.Boolean[] { false, false };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b19, b_array22);
    java.util.Iterator<java.lang.Boolean> iterator_b24 = priorityqueue_b19.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b19);
    java.lang.Boolean b26 = priorityqueue_b25.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b27 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array30 = new java.lang.Boolean[] { false, false };
    boolean b31 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b27, b_array30);
    priorityqueue_b27.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b33 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array40 = priorityqueue_b33.toArray(str_array39);
    java.lang.String[] str_array41 = priorityqueue_b27.toArray(str_array40);
    boolean b42 = priorityqueue_b25.contains((java.lang.Object)priorityqueue_b27);
    java.lang.String[] str_array48 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array49 = priorityqueue_b27.toArray(str_array48);
    java.lang.String[] str_array50 = priorityqueue_b9.toArray(str_array49);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b51 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array54 = new java.lang.Boolean[] { false, false };
    boolean b55 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b51, b_array54);
    java.util.Iterator<java.lang.Boolean> iterator_b56 = priorityqueue_b51.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b57 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b51);
    java.util.Spliterator<java.lang.Boolean> spliterator_b58 = priorityqueue_b51.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b60 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b61 = priorityqueue_b51.remove((java.lang.Object)priorityqueue_b60);
    java.lang.Boolean b62 = priorityqueue_b60.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b63 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array66 = new java.lang.Boolean[] { false, false };
    boolean b67 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b63, b_array66);
    java.util.Iterator<java.lang.Boolean> iterator_b68 = priorityqueue_b63.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b69 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b63);
    java.lang.Boolean b70 = priorityqueue_b69.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b71 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array74 = new java.lang.Boolean[] { false, false };
    boolean b75 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b71, b_array74);
    priorityqueue_b71.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b77 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array83 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array84 = priorityqueue_b77.toArray(str_array83);
    java.lang.String[] str_array85 = priorityqueue_b71.toArray(str_array84);
    boolean b86 = priorityqueue_b69.contains((java.lang.Object)priorityqueue_b71);
    java.lang.String[] str_array92 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array93 = priorityqueue_b71.toArray(str_array92);
    java.lang.String[] str_array94 = priorityqueue_b60.toArray(str_array92);
    java.lang.String[] str_array95 = priorityqueue_b9.toArray(str_array92);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array96 = priorityqueue_b0.toArray(str_array92);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b26 + "' != '" + false+ "'", b26.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b70 + "' != '" + false+ "'", b70.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b3 = priorityqueue_b1.remove((java.lang.Object)10);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b1.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b4 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b4, b_array6);
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = arraylist_b4.parallelStream();
    boolean b9 = priorityqueue_b1.contains((java.lang.Object)arraylist_b4);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Spliterator<java.lang.Boolean> spliterator_b19 = priorityqueue_b18.spliterator();
    boolean b20 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b18);
    java.lang.Boolean b21 = priorityqueue_b18.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b18);
    int i23 = priorityqueue_b18.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.lang.Boolean b4 = priorityqueue_b1.poll();
    java.lang.Object[] obj_array5 = priorityqueue_b1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    boolean b15 = priorityqueue_b12.offer((java.lang.Boolean)false);
    boolean b17 = priorityqueue_b12.offer((java.lang.Boolean)true);
    java.util.Iterator<java.lang.Boolean> iterator_b18 = priorityqueue_b12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b18);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.function.Consumer<java.lang.Object> consumer_obj16 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b6.forEach(consumer_obj16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    java.lang.Object[] obj_array17 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.Spliterator<java.lang.Boolean> spliterator_b19 = priorityqueue_b18.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b20 = priorityqueue_b18.parallelStream();
    java.util.stream.Stream<java.lang.Boolean> stream_b21 = priorityqueue_b18.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b21);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj1);
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b2.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    priorityqueue_b4.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b6 = priorityqueue_b4.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b6);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b19 = priorityqueue_b17.remove((java.lang.Object)10);
    boolean b20 = priorityqueue_b6.remove((java.lang.Object)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    java.lang.Object obj8 = null;
    boolean b9 = priorityqueue_b0.contains(obj8);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    priorityqueue_b8.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b10.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + false+ "'", b11.equals(false));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    java.util.Iterator<java.lang.Boolean> iterator_b29 = priorityqueue_b24.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b24);
    java.lang.Boolean b31 = priorityqueue_b30.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array35 = new java.lang.Boolean[] { false, false };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b32, b_array35);
    priorityqueue_b32.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array45 = priorityqueue_b38.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b32.toArray(str_array45);
    boolean b47 = priorityqueue_b30.contains((java.lang.Object)priorityqueue_b32);
    java.lang.String[] str_array53 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array54 = priorityqueue_b32.toArray(str_array53);
    java.lang.String[] str_array55 = priorityqueue_b8.toArray(str_array53);
    java.lang.Boolean b56 = priorityqueue_b8.poll();
    java.util.function.Predicate<java.lang.Object> predicate_obj57 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b58 = priorityqueue_b8.removeIf(predicate_obj57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b31 + "' != '" + false+ "'", b31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b56);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Object> comparator_obj9 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100, comparator_obj9);
    int i11 = priorityqueue_b10.size();
    boolean b12 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b10);
    java.lang.Boolean b13 = priorityqueue_b10.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b13);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    boolean b6 = priorityqueue_b2.add((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array14 = priorityqueue_b7.toArray(str_array13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array15 = priorityqueue_b2.toArray(str_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.lang.Boolean b7 = priorityqueue_b6.poll();
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b6.stream();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b6.iterator();
    java.lang.Object obj10 = null;
    boolean b11 = priorityqueue_b6.contains(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b12 = priorityqueue_b0.offer((java.lang.Boolean)false);
    boolean b14 = priorityqueue_b0.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    boolean b16 = priorityqueue_b9.add((java.lang.Boolean)true);
    java.util.Spliterator<java.lang.Boolean> spliterator_b17 = priorityqueue_b9.spliterator();
    boolean b18 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b9);
    java.util.ArrayList<java.lang.Boolean> arraylist_b19 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array21 = new java.lang.Boolean[] { true };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b19, b_array21);
    java.util.stream.Stream<java.lang.Boolean> stream_b23 = arraylist_b19.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = arraylist_b19.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b19);
    java.lang.Boolean b26 = priorityqueue_b25.peek();
    java.lang.Boolean b27 = priorityqueue_b25.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array31 = new java.lang.Boolean[] { false, false };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b28, b_array31);
    java.util.Iterator<java.lang.Boolean> iterator_b33 = priorityqueue_b28.iterator();
    boolean b35 = priorityqueue_b28.add((java.lang.Boolean)true);
    java.util.Spliterator<java.lang.Boolean> spliterator_b36 = priorityqueue_b28.spliterator();
    boolean b37 = priorityqueue_b25.contains((java.lang.Object)priorityqueue_b28);
    boolean b38 = priorityqueue_b6.remove((java.lang.Object)b37);
    java.util.stream.Stream<java.lang.Boolean> stream_b39 = priorityqueue_b6.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b26 + "' != '" + true+ "'", b26.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b27 + "' != '" + true+ "'", b27.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b39);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Iterator<java.lang.Boolean> iterator_b2 = priorityqueue_b1.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b1.comparator();
    java.util.Comparator<java.lang.Boolean> comparator_b4 = priorityqueue_b1.comparator();
    boolean b6 = priorityqueue_b1.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.lang.Object[] obj_array7 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = treeset_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    int i10 = priorityqueue_b6.size();
    java.util.function.Predicate<java.lang.Object> predicate_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = priorityqueue_b6.removeIf(predicate_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b7.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b7);
    java.lang.Boolean b14 = priorityqueue_b13.peek();
    int i15 = priorityqueue_b13.size();
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b13.spliterator();
    boolean b17 = priorityqueue_b5.contains((java.lang.Object)priorityqueue_b13);
    java.util.stream.Stream<java.lang.Boolean> stream_b18 = priorityqueue_b13.parallelStream();
    java.util.function.Predicate<java.lang.Object> predicate_obj19 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = priorityqueue_b13.removeIf(predicate_obj19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b14 + "' != '" + false+ "'", b14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b18);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.Iterator<java.lang.Boolean> iterator_b6 = priorityqueue_b5.iterator();
    java.lang.Object[] obj_array7 = priorityqueue_b5.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b5);
    java.lang.Object[] obj_array9 = priorityqueue_b8.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    boolean b9 = priorityqueue_b0.offer((java.lang.Boolean)true);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = priorityqueue_b0.stream();
    java.lang.Object[] obj_array11 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b2);
    priorityqueue_b3.clear();
    java.util.function.Consumer<java.lang.Object> consumer_obj5 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b3.forEach(consumer_obj5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Spliterator<java.lang.Boolean> spliterator_b2 = priorityqueue_b1.spliterator();
    priorityqueue_b1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b2);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    priorityqueue_b9.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array22 = priorityqueue_b15.toArray(str_array21);
    java.lang.String[] str_array23 = priorityqueue_b9.toArray(str_array22);
    boolean b24 = priorityqueue_b6.contains((java.lang.Object)str_array22);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    java.util.stream.Stream<java.lang.Boolean> stream_b26 = priorityqueue_b6.stream();
    boolean b28 = priorityqueue_b6.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Boolean> comparator_b29 = priorityqueue_b6.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b29);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    boolean b8 = priorityqueue_b6.add((java.lang.Boolean)false);
    java.util.function.Consumer<java.lang.Object> consumer_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b6.forEach(consumer_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b9.peek();
    java.lang.Boolean b12 = priorityqueue_b9.peek();
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b9.stream();
    int i14 = priorityqueue_b9.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b8.iterator();
    priorityqueue_b8.clear();
    boolean b15 = priorityqueue_b8.contains((java.lang.Object)1L);
    boolean b16 = priorityqueue_b0.remove((java.lang.Object)b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array20 = new java.lang.Boolean[] { false, false };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b17, b_array20);
    java.util.Iterator<java.lang.Boolean> iterator_b22 = priorityqueue_b17.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b17);
    java.lang.Boolean b24 = priorityqueue_b23.peek();
    int i25 = priorityqueue_b23.size();
    java.util.Comparator<java.lang.Boolean> comparator_b26 = priorityqueue_b23.comparator();
    java.lang.Object[] obj_array27 = priorityqueue_b23.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b28 = priorityqueue_b23.iterator();
    boolean b30 = priorityqueue_b23.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b31 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b23);
    java.lang.Object[] obj_array32 = priorityqueue_b31.toArray();
    boolean b33 = priorityqueue_b0.remove((java.lang.Object)obj_array32);
    java.util.Spliterator<java.lang.Boolean> spliterator_b34 = priorityqueue_b0.spliterator();
    priorityqueue_b0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b24 + "' != '" + false+ "'", b24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b34);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    int i12 = priorityqueue_b0.size();
    boolean b14 = priorityqueue_b0.offer((java.lang.Boolean)false);
    java.util.Spliterator<java.lang.Boolean> spliterator_b15 = priorityqueue_b0.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b15);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b9.peek();
    java.lang.Boolean b12 = priorityqueue_b9.peek();
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b9.stream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    int i16 = priorityqueue_b9.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(1, comparator_obj1);
    java.util.Iterator<java.lang.Boolean> iterator_b3 = priorityqueue_b2.iterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b2.forEach(consumer_obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b3);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj1);
    java.util.Comparator<java.lang.Object> comparator_obj4 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj4);
    priorityqueue_b5.clear();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b5.stream();
    boolean b8 = priorityqueue_b2.contains((java.lang.Object)stream_b7);
    java.lang.Boolean b9 = priorityqueue_b2.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b9);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    priorityqueue_b6.clear();
    boolean b9 = priorityqueue_b6.offer((java.lang.Boolean)true);
    int i10 = priorityqueue_b6.size();
    java.util.function.Predicate<java.lang.Object> predicate_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = priorityqueue_b6.removeIf(predicate_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(3);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b3 = priorityqueue_b1.remove((java.lang.Object)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array7 = new java.lang.Boolean[] { false, false };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b4, b_array7);
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b4.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b4);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b4.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b14 = priorityqueue_b4.remove((java.lang.Object)priorityqueue_b13);
    java.lang.Boolean b15 = priorityqueue_b13.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array19 = new java.lang.Boolean[] { false, false };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array19);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b16.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.lang.Boolean b23 = priorityqueue_b22.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    priorityqueue_b24.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array37 = priorityqueue_b30.toArray(str_array36);
    java.lang.String[] str_array38 = priorityqueue_b24.toArray(str_array37);
    boolean b39 = priorityqueue_b22.contains((java.lang.Object)priorityqueue_b24);
    java.lang.String[] str_array45 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array46 = priorityqueue_b24.toArray(str_array45);
    java.lang.String[] str_array47 = priorityqueue_b13.toArray(str_array45);
    java.lang.String[] str_array48 = priorityqueue_b1.toArray(str_array45);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b49 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array56 = priorityqueue_b49.toArray(str_array55);
    boolean b58 = priorityqueue_b49.remove((java.lang.Object)true);
    java.lang.Object[] obj_array59 = priorityqueue_b49.toArray();
    java.lang.Boolean b60 = priorityqueue_b49.peek();
    boolean b61 = priorityqueue_b1.remove((java.lang.Object)b60);
    java.util.function.Predicate<java.lang.Object> predicate_obj62 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b63 = priorityqueue_b1.removeIf(predicate_obj62);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + false+ "'", b23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b9.peek();
    java.lang.Boolean b12 = priorityqueue_b9.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b13 = priorityqueue_b9.spliterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b9.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b15 = priorityqueue_b9.comparator();
    java.util.function.Consumer<java.lang.Object> consumer_obj16 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b9.forEach(consumer_obj16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b15);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b6.iterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b17 = priorityqueue_b6.parallelStream();
    java.util.ArrayList<java.lang.Boolean> arraylist_b18 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array20 = new java.lang.Boolean[] { true };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b18, b_array20);
    java.util.stream.Stream<java.lang.Boolean> stream_b22 = arraylist_b18.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b23 = arraylist_b18.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b18);
    java.lang.Boolean b25 = priorityqueue_b24.peek();
    java.lang.Boolean b26 = priorityqueue_b24.peek();
    java.lang.Object[] obj_array27 = priorityqueue_b24.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b24);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b29 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array32 = new java.lang.Boolean[] { false, false };
    boolean b33 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b29, b_array32);
    java.util.Iterator<java.lang.Boolean> iterator_b34 = priorityqueue_b29.iterator();
    boolean b36 = priorityqueue_b29.add((java.lang.Boolean)false);
    priorityqueue_b29.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array41 = new java.lang.Boolean[] { false, false };
    boolean b42 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b38, b_array41);
    java.util.Iterator<java.lang.Boolean> iterator_b43 = priorityqueue_b38.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b44 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b38);
    java.lang.Boolean b45 = priorityqueue_b44.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b46 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array49 = new java.lang.Boolean[] { false, false };
    boolean b50 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b46, b_array49);
    priorityqueue_b46.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b52 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array59 = priorityqueue_b52.toArray(str_array58);
    java.lang.String[] str_array60 = priorityqueue_b46.toArray(str_array59);
    boolean b61 = priorityqueue_b44.contains((java.lang.Object)priorityqueue_b46);
    java.lang.String[] str_array67 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array68 = priorityqueue_b46.toArray(str_array67);
    java.lang.String[] str_array69 = priorityqueue_b29.toArray(str_array67);
    boolean b70 = priorityqueue_b28.remove((java.lang.Object)str_array67);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array71 = priorityqueue_b6.toArray(str_array67);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b25 + "' != '" + true+ "'", b25.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b26 + "' != '" + true+ "'", b26.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b45 + "' != '" + false+ "'", b45.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b6.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100);
    boolean b3 = priorityqueue_b1.add((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array7 = new java.lang.Boolean[] { false, false };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b4, b_array7);
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b4.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b4);
    java.lang.Boolean b11 = priorityqueue_b10.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array15 = new java.lang.Boolean[] { false, false };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b12, b_array15);
    priorityqueue_b12.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array25 = priorityqueue_b18.toArray(str_array24);
    java.lang.String[] str_array26 = priorityqueue_b12.toArray(str_array25);
    boolean b27 = priorityqueue_b10.contains((java.lang.Object)priorityqueue_b12);
    java.lang.String[] str_array33 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array34 = priorityqueue_b12.toArray(str_array33);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b35 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array42 = priorityqueue_b35.toArray(str_array41);
    java.lang.String[] str_array43 = priorityqueue_b12.toArray(str_array42);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array44 = priorityqueue_b1.toArray(str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + false+ "'", b11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b6.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b3.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = priorityqueue_b3.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    boolean b11 = priorityqueue_b3.contains((java.lang.Object)arraylist_b6);
    boolean b13 = priorityqueue_b3.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj15 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj15);
    java.lang.Object[] obj_array17 = priorityqueue_b16.toArray();
    boolean b18 = priorityqueue_b3.contains((java.lang.Object)obj_array17);
    boolean b19 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b1);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b20.iterator();
    priorityqueue_b20.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    java.util.Iterator<java.lang.Boolean> iterator_b29 = priorityqueue_b24.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b24);
    java.lang.Boolean b31 = priorityqueue_b30.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array35 = new java.lang.Boolean[] { false, false };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b32, b_array35);
    priorityqueue_b32.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b38 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array45 = priorityqueue_b38.toArray(str_array44);
    java.lang.String[] str_array46 = priorityqueue_b32.toArray(str_array45);
    boolean b47 = priorityqueue_b30.contains((java.lang.Object)priorityqueue_b32);
    java.lang.String[] str_array53 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array54 = priorityqueue_b32.toArray(str_array53);
    java.lang.String[] str_array55 = priorityqueue_b8.toArray(str_array53);
    java.lang.Boolean b56 = priorityqueue_b8.poll();
    java.lang.Object[] obj_array57 = priorityqueue_b8.toArray();
    java.util.Spliterator<java.lang.Boolean> spliterator_b58 = priorityqueue_b8.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b31 + "' != '" + false+ "'", b31.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b58);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b11 = priorityqueue_b10.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + false+ "'", b11.equals(false));

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    java.util.Iterator<java.lang.Boolean> iterator_b31 = priorityqueue_b26.iterator();
    boolean b33 = priorityqueue_b26.add((java.lang.Boolean)false);
    priorityqueue_b26.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b26.iterator();
    java.lang.Boolean b36 = priorityqueue_b26.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b37 = priorityqueue_b26.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj39 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj39);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b40);
    boolean b42 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b40);
    boolean b43 = priorityqueue_b8.remove((java.lang.Object)b42);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b45 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b12 = priorityqueue_b6.stream();
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.util.function.Predicate<java.lang.Object> predicate_obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = priorityqueue_b0.removeIf(predicate_obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Iterator<java.lang.Boolean> iterator_b2 = priorityqueue_b1.iterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b3 = priorityqueue_b1.stream();
    priorityqueue_b1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b3);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b12 = priorityqueue_b10.offer((java.lang.Boolean)true);
    java.lang.Boolean b13 = priorityqueue_b10.poll();
    java.lang.Object[] obj_array14 = priorityqueue_b10.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b13 + "' != '" + false+ "'", b13.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b5);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b5.parallelStream();
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b5.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b9.peek();
    java.lang.Boolean b12 = priorityqueue_b9.peek();
    boolean b14 = priorityqueue_b9.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b18 = priorityqueue_b16.remove((java.lang.Object)10);
    priorityqueue_b16.clear();
    java.lang.Boolean b20 = priorityqueue_b16.peek();
    int i21 = priorityqueue_b16.size();
    boolean b22 = priorityqueue_b9.remove((java.lang.Object)priorityqueue_b16);
    java.util.function.Consumer<java.lang.Object> consumer_obj23 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b16.forEach(consumer_obj23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.parallelStream();
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b0.stream();
    java.lang.Boolean b9 = priorityqueue_b0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b9);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.lang.Boolean b10 = priorityqueue_b8.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b10 + "' != '" + false+ "'", b10.equals(false));

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.util.Iterator<java.lang.Boolean> iterator_b7 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b15 = priorityqueue_b0.remove((java.lang.Object)arraylist_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    priorityqueue_b0.clear();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b8.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b8.spliterator();
    boolean b12 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b8);
    java.util.function.Consumer<java.lang.Object> consumer_obj13 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b8.forEach(consumer_obj13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    java.lang.Object[] obj_array5 = priorityqueue_b0.toArray();
    priorityqueue_b0.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    java.util.Comparator<java.lang.Boolean> comparator_b17 = priorityqueue_b0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b17);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    boolean b16 = priorityqueue_b9.add((java.lang.Boolean)false);
    priorityqueue_b9.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b18 = priorityqueue_b9.iterator();
    java.lang.Boolean b19 = priorityqueue_b9.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b20 = priorityqueue_b9.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj22 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj22);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b23);
    boolean b25 = priorityqueue_b9.contains((java.lang.Object)priorityqueue_b23);
    boolean b26 = priorityqueue_b8.contains((java.lang.Object)priorityqueue_b9);
    java.util.stream.Stream<java.lang.Boolean> stream_b27 = priorityqueue_b9.stream();
    java.lang.Boolean b28 = priorityqueue_b9.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b28);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)10.0f);
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b10.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b3.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = priorityqueue_b3.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    boolean b11 = priorityqueue_b3.contains((java.lang.Object)arraylist_b6);
    boolean b13 = priorityqueue_b3.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj15 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj15);
    java.lang.Object[] obj_array17 = priorityqueue_b16.toArray();
    boolean b18 = priorityqueue_b3.contains((java.lang.Object)obj_array17);
    boolean b19 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b1);
    int i21 = priorityqueue_b20.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b3.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = priorityqueue_b3.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    boolean b11 = priorityqueue_b3.contains((java.lang.Object)arraylist_b6);
    boolean b13 = priorityqueue_b3.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj15 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj15);
    java.lang.Object[] obj_array17 = priorityqueue_b16.toArray();
    boolean b18 = priorityqueue_b3.contains((java.lang.Object)obj_array17);
    boolean b19 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b3);
    java.util.Iterator<java.lang.Boolean> iterator_b20 = priorityqueue_b1.iterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b21 = priorityqueue_b1.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b21);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(1);
    java.util.Comparator<java.lang.Boolean> comparator_b2 = priorityqueue_b1.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b2);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { false };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b7, b_array9);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b7.iterator();
    priorityqueue_b7.clear();
    java.lang.Boolean b13 = priorityqueue_b7.poll();
    java.lang.Boolean b14 = priorityqueue_b7.peek();
    boolean b15 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b7);
    java.util.stream.Stream<java.lang.Boolean> stream_b16 = priorityqueue_b7.stream();
    boolean b18 = priorityqueue_b7.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a');
    java.lang.Object[] obj_array2 = priorityqueue_b1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array2);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b3.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = priorityqueue_b3.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b6 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array8 = new java.lang.Boolean[] { true };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b6, b_array8);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = arraylist_b6.parallelStream();
    boolean b11 = priorityqueue_b3.contains((java.lang.Object)arraylist_b6);
    boolean b13 = priorityqueue_b3.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj15 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj15);
    java.lang.Object[] obj_array17 = priorityqueue_b16.toArray();
    boolean b18 = priorityqueue_b3.contains((java.lang.Object)obj_array17);
    boolean b19 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b3);
    priorityqueue_b3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    priorityqueue_b6.clear();
    int i8 = priorityqueue_b6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Spliterator<java.lang.Boolean> spliterator_b9 = priorityqueue_b6.spliterator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100.0d);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b0.stream();
    java.util.TreeSet<java.lang.Boolean> treeset_b10 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array13 = new java.lang.Boolean[] { true, true };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b10, b_array13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b10);
    boolean b18 = priorityqueue_b0.contains((java.lang.Object)treeset_b10);
    java.util.Comparator<java.lang.Boolean> comparator_b19 = priorityqueue_b0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b19);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.parallelStream();
    java.util.Iterator<java.lang.Boolean> iterator_b8 = priorityqueue_b0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b8);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b0.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    java.util.function.Consumer<java.lang.Object> consumer_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b4 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b4, b_array6);
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = arraylist_b4.parallelStream();
    boolean b9 = priorityqueue_b1.contains((java.lang.Object)arraylist_b4);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    boolean b16 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.lang.Object[] obj_array17 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.lang.Object[] obj_array11 = priorityqueue_b6.toArray();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b6.spliterator();
    priorityqueue_b6.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b12 = priorityqueue_b11.peek();
    java.util.Comparator<java.lang.Boolean> comparator_b13 = priorityqueue_b11.comparator();
    int i14 = priorityqueue_b11.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b14);
    boolean b16 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b14);
    java.util.stream.Stream<java.lang.Boolean> stream_b17 = priorityqueue_b14.stream();
    java.util.Comparator<java.lang.Boolean> comparator_b18 = priorityqueue_b14.comparator();
    java.util.Iterator<java.lang.Boolean> iterator_b19 = priorityqueue_b14.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b19);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    boolean b15 = priorityqueue_b12.offer((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array18 = new java.lang.Boolean[] { false };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array18);
    java.util.Iterator<java.lang.Boolean> iterator_b20 = priorityqueue_b16.iterator();
    priorityqueue_b16.clear();
    boolean b23 = priorityqueue_b16.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.util.TreeSet<java.lang.Boolean> treeset_b25 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array28 = new java.lang.Boolean[] { true, false };
    boolean b29 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b25, b_array28);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b25);
    boolean b31 = priorityqueue_b24.remove((java.lang.Object)treeset_b25);
    boolean b32 = priorityqueue_b12.remove((java.lang.Object)b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    java.lang.Object[] obj_array6 = priorityqueue_b0.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b8 = priorityqueue_b0.spliterator();
    priorityqueue_b0.clear();
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    java.util.Iterator<java.lang.Boolean> iterator_b14 = priorityqueue_b9.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b19 = priorityqueue_b9.remove((java.lang.Object)priorityqueue_b18);
    java.lang.Boolean b20 = priorityqueue_b18.peek();
    java.lang.Boolean b21 = priorityqueue_b18.peek();
    java.util.Iterator<java.lang.Boolean> iterator_b22 = priorityqueue_b18.iterator();
    boolean b23 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b18);
    java.util.stream.Stream<java.lang.Boolean> stream_b24 = priorityqueue_b0.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b24);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    boolean b11 = priorityqueue_b6.offer((java.lang.Boolean)false);
    java.lang.Boolean b12 = priorityqueue_b6.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b13 = priorityqueue_b6.spliterator();
    boolean b15 = priorityqueue_b6.add((java.lang.Boolean)false);
    java.util.Spliterator<java.lang.Boolean> spliterator_b16 = priorityqueue_b6.spliterator();
    java.lang.Boolean b17 = priorityqueue_b6.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b17 + "' != '" + false+ "'", b17.equals(false));

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b1);
    java.util.Iterator<java.lang.Boolean> iterator_b15 = priorityqueue_b1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b15);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b6.parallelStream();
    java.lang.Object[] obj_array12 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj1);
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b2.spliterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b2.forEach(consumer_obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    boolean b11 = priorityqueue_b6.offer((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array15 = new java.lang.Boolean[] { false, false };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b12, b_array15);
    java.util.Iterator<java.lang.Boolean> iterator_b17 = priorityqueue_b12.iterator();
    boolean b19 = priorityqueue_b12.add((java.lang.Boolean)true);
    java.util.Spliterator<java.lang.Boolean> spliterator_b20 = priorityqueue_b12.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array24 = new java.lang.Boolean[] { false, false };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b21, b_array24);
    java.util.Iterator<java.lang.Boolean> iterator_b26 = priorityqueue_b21.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b27 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b21);
    java.util.Comparator<java.lang.Boolean> comparator_b28 = priorityqueue_b21.comparator();
    boolean b29 = priorityqueue_b12.contains((java.lang.Object)priorityqueue_b21);
    java.util.stream.Stream<java.lang.Boolean> stream_b30 = priorityqueue_b21.stream();
    boolean b31 = priorityqueue_b6.contains((java.lang.Object)stream_b30);
    java.util.Comparator<java.lang.Boolean> comparator_b32 = priorityqueue_b6.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b32);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array31 = priorityqueue_b24.toArray(str_array30);
    boolean b33 = priorityqueue_b24.remove((java.lang.Object)true);
    java.util.Iterator<java.lang.Boolean> iterator_b34 = priorityqueue_b24.iterator();
    boolean b35 = priorityqueue_b8.remove((java.lang.Object)iterator_b34);
    boolean b37 = priorityqueue_b8.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b0.iterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b13 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array15 = new java.lang.Boolean[] { true };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b13, b_array15);
    java.util.stream.Stream<java.lang.Boolean> stream_b17 = arraylist_b13.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b13);
    java.util.TreeSet<java.lang.Boolean> treeset_b19 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array22 = new java.lang.Boolean[] { true, true };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b19, b_array22);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b19);
    boolean b25 = priorityqueue_b18.remove((java.lang.Object)treeset_b19);
    java.util.Iterator<java.lang.Boolean> iterator_b26 = priorityqueue_b18.iterator();
    priorityqueue_b18.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array31 = new java.lang.Boolean[] { false, false };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b28, b_array31);
    java.util.Iterator<java.lang.Boolean> iterator_b33 = priorityqueue_b28.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b34 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b28);
    java.lang.Boolean b35 = priorityqueue_b34.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b36 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array39 = new java.lang.Boolean[] { false, false };
    boolean b40 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b36, b_array39);
    priorityqueue_b36.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b42 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array49 = priorityqueue_b42.toArray(str_array48);
    java.lang.String[] str_array50 = priorityqueue_b36.toArray(str_array49);
    boolean b51 = priorityqueue_b34.contains((java.lang.Object)priorityqueue_b36);
    java.lang.String[] str_array57 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array58 = priorityqueue_b36.toArray(str_array57);
    java.lang.String[] str_array59 = priorityqueue_b18.toArray(str_array58);
    java.lang.String[] str_array60 = priorityqueue_b0.toArray(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b35 + "' != '" + false+ "'", b35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b6 = arraylist_b0.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b6);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = treeset_b0.stream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b6 = treeset_b0.spliterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    treeset_b0.forEach(consumer_obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b6);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100);
    java.util.Spliterator<java.lang.Boolean> spliterator_b2 = priorityqueue_b1.spliterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj3 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b4 = priorityqueue_b1.removeIf(predicate_obj3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b2);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(1, comparator_obj1);
    boolean b4 = priorityqueue_b2.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Comparator<java.lang.Boolean> comparator_b7 = priorityqueue_b0.comparator();
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array10);
    java.util.Iterator<java.lang.Boolean> iterator_b12 = priorityqueue_b8.iterator();
    priorityqueue_b8.clear();
    boolean b15 = priorityqueue_b8.contains((java.lang.Object)1L);
    boolean b16 = priorityqueue_b0.remove((java.lang.Object)b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Iterator<java.lang.Boolean> iterator_b18 = priorityqueue_b17.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b18);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b8 = priorityqueue_b0.spliterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = priorityqueue_b0.removeIf(predicate_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b8);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    int i8 = priorityqueue_b0.size();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array14 = new java.lang.Boolean[] { false, false };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b11, b_array14);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b11.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b17 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b11);
    boolean b19 = priorityqueue_b17.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b20 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array22 = new java.lang.Boolean[] { true };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b20, b_array22);
    java.util.stream.Stream<java.lang.Boolean> stream_b24 = arraylist_b20.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b25 = arraylist_b20.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b20);
    boolean b27 = priorityqueue_b17.remove((java.lang.Object)priorityqueue_b26);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b26);
    boolean b29 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b26);
    java.util.Comparator<java.lang.Object> comparator_obj31 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj31);
    priorityqueue_b32.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b34 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array37 = new java.lang.Boolean[] { false, false };
    boolean b38 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b34, b_array37);
    java.util.Iterator<java.lang.Boolean> iterator_b39 = priorityqueue_b34.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b34);
    java.util.Spliterator<java.lang.Boolean> spliterator_b41 = priorityqueue_b34.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b43 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b44 = priorityqueue_b34.remove((java.lang.Object)priorityqueue_b43);
    java.lang.Boolean b45 = priorityqueue_b43.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b46 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array49 = new java.lang.Boolean[] { false, false };
    boolean b50 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b46, b_array49);
    java.util.Iterator<java.lang.Boolean> iterator_b51 = priorityqueue_b46.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b52 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b46);
    java.lang.Boolean b53 = priorityqueue_b52.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b54 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array57 = new java.lang.Boolean[] { false, false };
    boolean b58 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b54, b_array57);
    priorityqueue_b54.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b60 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array67 = priorityqueue_b60.toArray(str_array66);
    java.lang.String[] str_array68 = priorityqueue_b54.toArray(str_array67);
    boolean b69 = priorityqueue_b52.contains((java.lang.Object)priorityqueue_b54);
    java.lang.String[] str_array75 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array76 = priorityqueue_b54.toArray(str_array75);
    java.lang.String[] str_array77 = priorityqueue_b43.toArray(str_array75);
    java.lang.String[] str_array78 = priorityqueue_b32.toArray(str_array77);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array79 = priorityqueue_b26.toArray(str_array77);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayStoreException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b53 + "' != '" + false+ "'", b53.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100.0d);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array12 = new java.lang.Boolean[] { false, false };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array12);
    priorityqueue_b9.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array22 = priorityqueue_b15.toArray(str_array21);
    java.lang.String[] str_array23 = priorityqueue_b9.toArray(str_array22);
    java.lang.String[] str_array24 = priorityqueue_b0.toArray(str_array23);
    java.lang.Boolean b25 = priorityqueue_b0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b25);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.TreeSet<java.lang.Boolean> treeset_b4 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b4, b_array6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b4);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b8);
    java.lang.Boolean b10 = priorityqueue_b0.peek();
    java.lang.Boolean b11 = priorityqueue_b0.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b10 + "' != '" + true+ "'", b10.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + true+ "'", b11.equals(true));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.Comparator<java.lang.Boolean> comparator_b5 = priorityqueue_b4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b5);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)true);
    java.lang.Object[] obj_array10 = priorityqueue_b0.toArray();
    boolean b12 = priorityqueue_b0.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b1);
    java.lang.Object obj3 = null;
    boolean b4 = priorityqueue_b1.contains(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Iterator<java.lang.Boolean> iterator_b2 = priorityqueue_b1.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b3 = priorityqueue_b1.comparator();
    boolean b5 = priorityqueue_b1.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    java.util.ArrayList<java.lang.Boolean> arraylist_b9 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { true };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b9, b_array11);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = arraylist_b9.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = arraylist_b9.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b9);
    boolean b16 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b15);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b18 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.Spliterator<java.lang.Boolean> spliterator_b19 = priorityqueue_b18.spliterator();
    boolean b20 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b18);
    java.lang.Boolean b21 = priorityqueue_b18.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b18);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b23 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b22);
    java.lang.Object[] obj_array24 = priorityqueue_b22.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj1);
    java.lang.Object[] obj_array3 = priorityqueue_b2.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = priorityqueue_b2.stream();
    boolean b6 = priorityqueue_b2.offer((java.lang.Boolean)false);
    java.lang.Boolean b7 = priorityqueue_b2.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Comparator<java.lang.Boolean> comparator_b11 = priorityqueue_b10.comparator();
    priorityqueue_b10.clear();
    java.lang.Boolean b13 = priorityqueue_b10.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b13);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)treeset_b0);
    java.util.function.Predicate<java.lang.Object> predicate_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = treeset_b0.removeIf(predicate_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(10);
    java.lang.Object[] obj_array2 = priorityqueue_b1.toArray();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.util.function.Consumer<java.lang.Object> consumer_obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b1.forEach(consumer_obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    java.util.TreeSet<java.lang.Boolean> treeset_b11 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array13 = new java.lang.Boolean[] { true };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b11, b_array13);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b11);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b11);
    boolean b18 = priorityqueue_b16.offer((java.lang.Boolean)false);
    boolean b20 = priorityqueue_b16.add((java.lang.Boolean)false);
    boolean b22 = priorityqueue_b16.add((java.lang.Boolean)true);
    boolean b23 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b3 = priorityqueue_b1.remove((java.lang.Object)10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array7 = new java.lang.Boolean[] { false, false };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b4, b_array7);
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b4.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b4);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b4.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b14 = priorityqueue_b4.remove((java.lang.Object)priorityqueue_b13);
    java.lang.Boolean b15 = priorityqueue_b13.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array19 = new java.lang.Boolean[] { false, false };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array19);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b16.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.lang.Boolean b23 = priorityqueue_b22.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    priorityqueue_b24.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array37 = priorityqueue_b30.toArray(str_array36);
    java.lang.String[] str_array38 = priorityqueue_b24.toArray(str_array37);
    boolean b39 = priorityqueue_b22.contains((java.lang.Object)priorityqueue_b24);
    java.lang.String[] str_array45 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array46 = priorityqueue_b24.toArray(str_array45);
    java.lang.String[] str_array47 = priorityqueue_b13.toArray(str_array45);
    java.lang.String[] str_array48 = priorityqueue_b1.toArray(str_array45);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b49 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array56 = priorityqueue_b49.toArray(str_array55);
    boolean b58 = priorityqueue_b49.remove((java.lang.Object)true);
    java.lang.Object[] obj_array59 = priorityqueue_b49.toArray();
    java.lang.Boolean b60 = priorityqueue_b49.peek();
    boolean b61 = priorityqueue_b1.remove((java.lang.Object)b60);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b62 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array65 = new java.lang.Boolean[] { false, false };
    boolean b66 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b62, b_array65);
    java.util.Iterator<java.lang.Boolean> iterator_b67 = priorityqueue_b62.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b68 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b62);
    java.util.stream.Stream<java.lang.Boolean> stream_b69 = priorityqueue_b62.stream();
    boolean b71 = priorityqueue_b62.offer((java.lang.Boolean)true);
    boolean b73 = priorityqueue_b62.offer((java.lang.Boolean)true);
    boolean b74 = priorityqueue_b1.remove((java.lang.Object)b73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + false+ "'", b23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b5.parallelStream();
    int i7 = priorityqueue_b5.size();
    priorityqueue_b5.clear();
    java.lang.Boolean b9 = priorityqueue_b5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b9);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b4 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b4, b_array6);
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = arraylist_b4.parallelStream();
    boolean b9 = priorityqueue_b1.contains((java.lang.Object)arraylist_b4);
    boolean b11 = priorityqueue_b1.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj13);
    java.lang.Object[] obj_array15 = priorityqueue_b14.toArray();
    boolean b16 = priorityqueue_b1.contains((java.lang.Object)obj_array15);
    java.lang.Boolean b17 = priorityqueue_b1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b17 + "' != '" + false+ "'", b17.equals(false));

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false, false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b8, b_array11);
    priorityqueue_b8.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array21 = priorityqueue_b14.toArray(str_array20);
    java.lang.String[] str_array22 = priorityqueue_b8.toArray(str_array21);
    boolean b23 = priorityqueue_b6.contains((java.lang.Object)priorityqueue_b8);
    java.util.Spliterator<java.lang.Boolean> spliterator_b24 = priorityqueue_b8.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b25 = priorityqueue_b8.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    java.util.Iterator<java.lang.Boolean> iterator_b31 = priorityqueue_b26.iterator();
    boolean b33 = priorityqueue_b26.add((java.lang.Boolean)false);
    priorityqueue_b26.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b26.iterator();
    java.lang.Boolean b36 = priorityqueue_b26.poll();
    java.util.Iterator<java.lang.Boolean> iterator_b37 = priorityqueue_b26.iterator();
    java.util.Comparator<java.lang.Object> comparator_obj39 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b40 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj39);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b40);
    boolean b42 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b40);
    boolean b43 = priorityqueue_b8.remove((java.lang.Object)b42);
    priorityqueue_b8.clear();
    priorityqueue_b8.clear();
    java.util.function.Predicate<java.lang.Object> predicate_obj46 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b47 = priorityqueue_b8.removeIf(predicate_obj46);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b8 = priorityqueue_b0.parallelStream();
    boolean b10 = priorityqueue_b0.offer((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    java.lang.Boolean b6 = priorityqueue_b0.poll();
    boolean b8 = priorityqueue_b0.contains((java.lang.Object)100.0d);
    java.util.stream.Stream<java.lang.Boolean> stream_b9 = priorityqueue_b0.parallelStream();
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = priorityqueue_b0.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.util.function.Consumer<java.lang.Object> consumer_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    treeset_b0.forEach(consumer_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b9.peek();
    java.lang.Boolean b12 = priorityqueue_b9.peek();
    boolean b14 = priorityqueue_b9.offer((java.lang.Boolean)true);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)1);
    boolean b18 = priorityqueue_b16.remove((java.lang.Object)10);
    priorityqueue_b16.clear();
    java.lang.Boolean b20 = priorityqueue_b16.peek();
    int i21 = priorityqueue_b16.size();
    boolean b22 = priorityqueue_b9.remove((java.lang.Object)priorityqueue_b16);
    java.lang.Boolean b23 = priorityqueue_b9.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    java.util.Iterator<java.lang.Boolean> iterator_b29 = priorityqueue_b24.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b24);
    java.util.stream.Stream<java.lang.Boolean> stream_b31 = priorityqueue_b24.stream();
    boolean b33 = priorityqueue_b24.offer((java.lang.Boolean)true);
    java.util.stream.Stream<java.lang.Boolean> stream_b34 = priorityqueue_b24.stream();
    java.lang.Boolean b35 = priorityqueue_b24.peek();
    boolean b36 = priorityqueue_b9.remove((java.lang.Object)b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + true+ "'", b23.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b35 + "' != '" + false+ "'", b35.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    int i9 = priorityqueue_b8.size();
    java.lang.Boolean b10 = priorityqueue_b8.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b10 + "' != '" + false+ "'", b10.equals(false));

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.stream.Stream<java.lang.Boolean> stream_b7 = priorityqueue_b0.stream();
    boolean b9 = priorityqueue_b0.offer((java.lang.Boolean)true);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = priorityqueue_b0.stream();
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b0.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + false+ "'", b11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    java.lang.Object[] obj_array5 = priorityqueue_b0.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b0.stream();
    java.util.function.Consumer<java.lang.Object> consumer_obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b0.forEach(consumer_obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    boolean b13 = priorityqueue_b6.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b6.iterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b17 = priorityqueue_b6.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b19 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b20 = priorityqueue_b19.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b21 = priorityqueue_b19.spliterator();
    java.util.ArrayList<java.lang.Boolean> arraylist_b22 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array24 = new java.lang.Boolean[] { true };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b22, b_array24);
    java.util.stream.Stream<java.lang.Boolean> stream_b26 = arraylist_b22.parallelStream();
    boolean b27 = priorityqueue_b19.contains((java.lang.Object)arraylist_b22);
    java.util.stream.Stream<java.lang.Boolean> stream_b28 = arraylist_b22.parallelStream();
    boolean b29 = priorityqueue_b6.contains((java.lang.Object)arraylist_b22);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array33 = new java.lang.Boolean[] { false, false };
    boolean b34 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b30, b_array33);
    java.util.Iterator<java.lang.Boolean> iterator_b35 = priorityqueue_b30.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b36 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b30);
    java.lang.Boolean b37 = priorityqueue_b36.peek();
    int i38 = priorityqueue_b36.size();
    java.util.Comparator<java.lang.Boolean> comparator_b39 = priorityqueue_b36.comparator();
    java.lang.Object[] obj_array40 = priorityqueue_b36.toArray();
    priorityqueue_b36.clear();
    boolean b42 = priorityqueue_b6.remove((java.lang.Object)priorityqueue_b36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b37 + "' != '" + false+ "'", b37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(1, comparator_obj1);
    java.util.Iterator<java.lang.Boolean> iterator_b3 = priorityqueue_b2.iterator();
    java.util.function.Predicate<java.lang.Object> predicate_obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = priorityqueue_b2.removeIf(predicate_obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b3);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)' ');
    boolean b3 = priorityqueue_b1.add((java.lang.Boolean)false);
    java.util.Comparator<java.lang.Object> comparator_obj5 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(short)100, comparator_obj5);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b6.spliterator();
    priorityqueue_b6.clear();
    boolean b9 = priorityqueue_b1.remove((java.lang.Object)priorityqueue_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array14 = new java.lang.Boolean[] { false, false };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b11, b_array14);
    java.util.Iterator<java.lang.Boolean> iterator_b16 = priorityqueue_b11.iterator();
    boolean b18 = priorityqueue_b11.add((java.lang.Boolean)false);
    priorityqueue_b11.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b20 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array23 = new java.lang.Boolean[] { false, false };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b20, b_array23);
    java.util.Iterator<java.lang.Boolean> iterator_b25 = priorityqueue_b20.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b20);
    java.lang.Boolean b27 = priorityqueue_b26.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b28 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array31 = new java.lang.Boolean[] { false, false };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b28, b_array31);
    priorityqueue_b28.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b34 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array41 = priorityqueue_b34.toArray(str_array40);
    java.lang.String[] str_array42 = priorityqueue_b28.toArray(str_array41);
    boolean b43 = priorityqueue_b26.contains((java.lang.Object)priorityqueue_b28);
    java.lang.String[] str_array49 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array50 = priorityqueue_b28.toArray(str_array49);
    java.lang.String[] str_array51 = priorityqueue_b11.toArray(str_array49);
    boolean b52 = priorityqueue_b10.remove((java.lang.Object)str_array49);
    int i53 = priorityqueue_b10.size();
    java.util.function.Predicate<java.lang.Object> predicate_obj54 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b55 = priorityqueue_b10.removeIf(predicate_obj54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b27 + "' != '" + false+ "'", b27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.lang.Boolean b8 = priorityqueue_b0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + false+ "'", b8.equals(false));

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b9);
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b9.stream();
    java.lang.Boolean b12 = priorityqueue_b9.poll();
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b9.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b8 = priorityqueue_b6.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b8);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    int i5 = priorityqueue_b0.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Object> comparator_obj9 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100, comparator_obj9);
    int i11 = priorityqueue_b10.size();
    boolean b12 = priorityqueue_b0.contains((java.lang.Object)priorityqueue_b10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    int i8 = priorityqueue_b6.size();
    java.util.Comparator<java.lang.Boolean> comparator_b9 = priorityqueue_b6.comparator();
    java.lang.Object[] obj_array10 = priorityqueue_b6.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b6.parallelStream();
    java.lang.Boolean b12 = priorityqueue_b6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b0.comparator();
    java.lang.Boolean b7 = priorityqueue_b0.poll();
    java.lang.Boolean b8 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array11 = new java.lang.Boolean[] { false };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b9, b_array11);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b9.iterator();
    priorityqueue_b9.clear();
    boolean b16 = priorityqueue_b9.contains((java.lang.Object)1L);
    java.util.stream.Stream<java.lang.Boolean> stream_b17 = priorityqueue_b9.parallelStream();
    boolean b19 = priorityqueue_b9.offer((java.lang.Boolean)true);
    boolean b20 = priorityqueue_b0.contains((java.lang.Object)true);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + false+ "'", b7.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + false+ "'", b8.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    priorityqueue_b0.clear();
    boolean b7 = priorityqueue_b0.contains((java.lang.Object)1L);
    java.util.Comparator<java.lang.Boolean> comparator_b8 = priorityqueue_b0.comparator();
    java.lang.Boolean b9 = priorityqueue_b0.poll();
    java.util.Comparator<java.lang.Boolean> comparator_b10 = priorityqueue_b0.comparator();
    priorityqueue_b0.clear();
    java.lang.Object[] obj_array12 = priorityqueue_b0.toArray();
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b0.stream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b12 = priorityqueue_b6.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b13);
    java.lang.Boolean b15 = priorityqueue_b14.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b15 + "' != '" + true+ "'", b15.equals(true));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b8);
    java.util.Comparator<java.lang.Boolean> comparator_b10 = priorityqueue_b8.comparator();
    java.util.stream.Stream<java.lang.Boolean> stream_b11 = priorityqueue_b8.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b11);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }


    // The following exception was thrown during execution in test generation
    try {
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    boolean b8 = priorityqueue_b6.contains((java.lang.Object)(short)-1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b10 = priorityqueue_b6.iterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b6.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b5 = arraylist_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.lang.Boolean b7 = priorityqueue_b6.peek();
    java.lang.Boolean b8 = priorityqueue_b6.peek();
    boolean b10 = priorityqueue_b6.remove((java.lang.Object)(short)1);
    java.util.Iterator<java.lang.Boolean> iterator_b11 = priorityqueue_b6.iterator();
    int i12 = priorityqueue_b6.size();
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b8 + "' != '" + true+ "'", b8.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }


    java.util.TreeSet<java.lang.Boolean> treeset_b0 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { true, true };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b0, b_array3);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b0);
    java.lang.Boolean b7 = priorityqueue_b6.poll();
    java.lang.Boolean b8 = priorityqueue_b6.poll();
    java.lang.Object[] obj_array9 = priorityqueue_b6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b7 + "' != '" + true+ "'", b7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { false };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.Iterator<java.lang.Boolean> iterator_b4 = priorityqueue_b0.iterator();
    java.lang.Boolean b5 = priorityqueue_b0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b5 + "' != '" + false+ "'", b5.equals(false));

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(1, comparator_obj1);
    java.util.Iterator<java.lang.Boolean> iterator_b3 = priorityqueue_b2.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b3);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    int i5 = priorityqueue_b2.size();
    java.util.function.Consumer<java.lang.Object> consumer_obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    priorityqueue_b2.forEach(consumer_obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b3 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b2);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array7 = new java.lang.Boolean[] { false, false };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b4, b_array7);
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b4.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b4);
    java.util.Spliterator<java.lang.Boolean> spliterator_b11 = priorityqueue_b4.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b13 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b14 = priorityqueue_b4.remove((java.lang.Object)priorityqueue_b13);
    java.lang.Boolean b15 = priorityqueue_b13.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b16 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array19 = new java.lang.Boolean[] { false, false };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b16, b_array19);
    java.util.Iterator<java.lang.Boolean> iterator_b21 = priorityqueue_b16.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b22 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b16);
    java.lang.Boolean b23 = priorityqueue_b22.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b24 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array27 = new java.lang.Boolean[] { false, false };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b24, b_array27);
    priorityqueue_b24.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array37 = priorityqueue_b30.toArray(str_array36);
    java.lang.String[] str_array38 = priorityqueue_b24.toArray(str_array37);
    boolean b39 = priorityqueue_b22.contains((java.lang.Object)priorityqueue_b24);
    java.lang.String[] str_array45 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array46 = priorityqueue_b24.toArray(str_array45);
    java.lang.String[] str_array47 = priorityqueue_b13.toArray(str_array45);
    java.lang.String[] str_array48 = priorityqueue_b2.toArray(str_array47);
    java.lang.Boolean b49 = priorityqueue_b2.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + false+ "'", b23.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b49);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    java.util.stream.Stream<java.lang.Boolean> stream_b2 = priorityqueue_b1.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b3 = priorityqueue_b1.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b4 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array11 = priorityqueue_b4.toArray(str_array10);
    boolean b13 = priorityqueue_b4.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b14 = priorityqueue_b4.parallelStream();
    boolean b15 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b4);
    boolean b17 = priorityqueue_b1.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array7 = priorityqueue_b0.toArray(str_array6);
    boolean b9 = priorityqueue_b0.add((java.lang.Boolean)false);
    java.util.stream.Stream<java.lang.Boolean> stream_b10 = priorityqueue_b0.parallelStream();
    int i11 = priorityqueue_b0.size();
    boolean b13 = priorityqueue_b0.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    boolean b5 = priorityqueue_b1.remove((java.lang.Object)(byte)10);
    java.util.Comparator<java.lang.Boolean> comparator_b6 = priorityqueue_b1.comparator();
    int i7 = priorityqueue_b1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100);
    boolean b3 = priorityqueue_b1.add((java.lang.Boolean)true);
    priorityqueue_b1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }


    java.util.ArrayList<java.lang.Boolean> arraylist_b0 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b0, b_array2);
    java.util.stream.Stream<java.lang.Boolean> stream_b4 = arraylist_b0.parallelStream();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b5 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b0);
    java.util.TreeSet<java.lang.Boolean> treeset_b6 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array9 = new java.lang.Boolean[] { true, true };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b6, b_array9);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b6);
    boolean b12 = priorityqueue_b5.remove((java.lang.Object)treeset_b6);
    java.util.Iterator<java.lang.Boolean> iterator_b13 = priorityqueue_b5.iterator();
    priorityqueue_b5.clear();
    boolean b16 = priorityqueue_b5.offer((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b3 = priorityqueue_b1.contains((java.lang.Object)"");
    java.util.Spliterator<java.lang.Boolean> spliterator_b4 = priorityqueue_b1.spliterator();
    java.util.stream.Stream<java.lang.Boolean> stream_b5 = priorityqueue_b1.stream();
    java.util.stream.Stream<java.lang.Boolean> stream_b6 = priorityqueue_b1.parallelStream();
    java.util.TreeSet<java.lang.Boolean> treeset_b7 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array10 = new java.lang.Boolean[] { true, false };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b7, b_array10);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b12 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b7);
    boolean b13 = priorityqueue_b1.contains((java.lang.Object)priorityqueue_b12);
    priorityqueue_b1.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array17 = new java.lang.Boolean[] { false };
    boolean b18 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b15, b_array17);
    java.util.Iterator<java.lang.Boolean> iterator_b19 = priorityqueue_b15.iterator();
    priorityqueue_b15.clear();
    java.lang.Boolean b21 = priorityqueue_b15.poll();
    boolean b23 = priorityqueue_b15.contains((java.lang.Object)100.0d);
    java.util.stream.Stream<java.lang.Boolean> stream_b24 = priorityqueue_b15.stream();
    java.util.TreeSet<java.lang.Boolean> treeset_b25 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array28 = new java.lang.Boolean[] { true, true };
    boolean b29 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b25, b_array28);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b30 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b25);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b31 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b25);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b32 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b25);
    boolean b33 = priorityqueue_b15.contains((java.lang.Object)treeset_b25);
    java.util.stream.Stream<java.lang.Boolean> stream_b34 = treeset_b25.parallelStream();
    boolean b35 = priorityqueue_b1.contains((java.lang.Object)treeset_b25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }


    java.util.Comparator<java.lang.Object> comparator_obj1 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(100, comparator_obj1);
    boolean b4 = priorityqueue_b2.offer((java.lang.Boolean)true);
    int i5 = priorityqueue_b2.size();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b7 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b9 = priorityqueue_b7.contains((java.lang.Object)"");
    boolean b11 = priorityqueue_b7.remove((java.lang.Object)(byte)10);
    boolean b12 = priorityqueue_b2.remove((java.lang.Object)priorityqueue_b7);
    java.util.stream.Stream<java.lang.Boolean> stream_b13 = priorityqueue_b7.stream();
    java.util.function.Predicate<java.lang.Object> predicate_obj14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = priorityqueue_b7.removeIf(predicate_obj14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b13);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b6 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b0);
    java.util.Spliterator<java.lang.Boolean> spliterator_b7 = priorityqueue_b0.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)(byte)100);
    boolean b10 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b9);
    java.lang.Boolean b11 = priorityqueue_b9.peek();
    java.lang.Boolean b12 = priorityqueue_b9.peek();
    java.util.Spliterator<java.lang.Boolean> spliterator_b13 = priorityqueue_b9.spliterator();
    java.util.Spliterator<java.lang.Boolean> spliterator_b14 = priorityqueue_b9.spliterator();
    java.util.Comparator<java.lang.Boolean> comparator_b15 = priorityqueue_b9.comparator();
    java.util.Comparator<java.lang.Boolean> comparator_b16 = priorityqueue_b9.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator_b16);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array2 = new java.lang.Boolean[] { true };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array2);
    java.util.TreeSet<java.lang.Boolean> treeset_b4 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b4, b_array6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b4);
    boolean b9 = priorityqueue_b0.remove((java.lang.Object)priorityqueue_b8);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b10 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.lang.Boolean b11 = priorityqueue_b0.peek();
    java.lang.Boolean b12 = priorityqueue_b0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b11 + "' != '" + true+ "'", b11.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + true+ "'", b12.equals(true));

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b0 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array3 = new java.lang.Boolean[] { false, false };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b0, b_array3);
    java.util.Iterator<java.lang.Boolean> iterator_b5 = priorityqueue_b0.iterator();
    boolean b7 = priorityqueue_b0.add((java.lang.Boolean)false);
    priorityqueue_b0.clear();
    java.util.Iterator<java.lang.Boolean> iterator_b9 = priorityqueue_b0.iterator();
    java.lang.Boolean b10 = priorityqueue_b0.poll();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b11 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b0);
    java.util.Comparator<java.lang.Object> comparator_obj13 = null;
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b14 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)'a', comparator_obj13);
    java.util.ArrayList<java.lang.Boolean> arraylist_b15 = new java.util.ArrayList<java.lang.Boolean>();
    java.lang.Boolean[] b_array17 = new java.lang.Boolean[] { true };
    boolean b18 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)arraylist_b15, b_array17);
    java.util.stream.Stream<java.lang.Boolean> stream_b19 = arraylist_b15.parallelStream();
    java.util.Spliterator<java.lang.Boolean> spliterator_b20 = arraylist_b15.spliterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b21 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)arraylist_b15);
    java.lang.Boolean b22 = priorityqueue_b21.peek();
    java.lang.Boolean b23 = priorityqueue_b21.peek();
    java.lang.Object[] obj_array24 = priorityqueue_b21.toArray();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b25 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b21);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b26 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array29 = new java.lang.Boolean[] { false, false };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b26, b_array29);
    java.util.Iterator<java.lang.Boolean> iterator_b31 = priorityqueue_b26.iterator();
    boolean b33 = priorityqueue_b26.add((java.lang.Boolean)false);
    priorityqueue_b26.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b35 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array38 = new java.lang.Boolean[] { false, false };
    boolean b39 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b35, b_array38);
    java.util.Iterator<java.lang.Boolean> iterator_b40 = priorityqueue_b35.iterator();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b41 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b35);
    java.lang.Boolean b42 = priorityqueue_b41.peek();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b43 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.Boolean[] b_array46 = new java.lang.Boolean[] { false, false };
    boolean b47 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)priorityqueue_b43, b_array46);
    priorityqueue_b43.clear();
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b49 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>();
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "" };
    java.lang.String[] str_array56 = priorityqueue_b49.toArray(str_array55);
    java.lang.String[] str_array57 = priorityqueue_b43.toArray(str_array56);
    boolean b58 = priorityqueue_b41.contains((java.lang.Object)priorityqueue_b43);
    java.lang.String[] str_array64 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
    java.lang.String[] str_array65 = priorityqueue_b43.toArray(str_array64);
    java.lang.String[] str_array66 = priorityqueue_b26.toArray(str_array64);
    boolean b67 = priorityqueue_b25.remove((java.lang.Object)str_array64);
    java.lang.String[] str_array68 = priorityqueue_b14.toArray(str_array64);
    java.lang.String[] str_array69 = priorityqueue_b0.toArray(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_b19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b22 + "' != '" + true+ "'", b22.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b23 + "' != '" + true+ "'", b23.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_b40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b42 + "' != '" + false+ "'", b42.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }


    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b1 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((int)' ');
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b2 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.Collection<java.lang.Boolean>)priorityqueue_b1);
    int i3 = priorityqueue_b2.size();
    java.util.TreeSet<java.lang.Boolean> treeset_b4 = new java.util.TreeSet<java.lang.Boolean>();
    java.lang.Boolean[] b_array6 = new java.lang.Boolean[] { true };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Boolean>)treeset_b4, b_array6);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b8 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b4);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b9 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>((java.util.SortedSet<java.lang.Boolean>)treeset_b4);
    boolean b11 = priorityqueue_b9.offer((java.lang.Boolean)false);
    java.lang.Boolean b12 = priorityqueue_b9.poll();
    boolean b14 = priorityqueue_b9.offer((java.lang.Boolean)false);
    br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean> priorityqueue_b15 = new br.ufal.ic.br.myjdk.PriorityQueue<java.lang.Boolean>(priorityqueue_b9);
    boolean b16 = priorityqueue_b2.remove((java.lang.Object)priorityqueue_b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(b_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + b12 + "' != '" + false+ "'", b12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

}
