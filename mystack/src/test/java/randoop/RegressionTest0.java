package randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    boolean b4 = stack1.empty();
    java.lang.Object obj5 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)-1);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stack5.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    boolean b11 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)'#');

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)'4');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    boolean b11 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stack11.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    boolean b11 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    boolean b4 = stack1.empty();
    boolean b5 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)1);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(short)1);
    java.lang.Object obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stack1.push(obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (short)1+ "'", obj3.equals((short)1));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    boolean b15 = stack11.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stack11.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1.0d+ "'", obj4.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0d+ "'", obj5.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0d+ "'", obj6.equals(1.0d));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj34 = stack32.push((java.lang.Object)100.0f);
    java.lang.Object obj35 = stack32.peek();
    java.lang.Object obj37 = stack32.push((java.lang.Object)"hi!");
    java.lang.Object obj38 = stack32.pop();
    java.lang.Object obj40 = stack32.push((java.lang.Object)(short)100);
    java.lang.Object obj41 = stack16.push((java.lang.Object)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 100.0f+ "'", obj34.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 100.0f+ "'", obj35.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "hi!"+ "'", obj37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "hi!"+ "'", obj38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + (short)100+ "'", obj40.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + (short)100+ "'", obj41.equals((short)100));

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    boolean b15 = stack11.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stack11.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b6 = stack5.empty();
    java.lang.Object obj7 = stack1.push((java.lang.Object)b6);
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)10.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj13 = stack9.peek();
    java.lang.Object obj14 = stack9.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stack9.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (short)1+ "'", obj3.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + true+ "'", obj7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10.0f+ "'", obj11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0f+ "'", obj12.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10.0f+ "'", obj13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10.0f+ "'", obj14.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    java.lang.Object obj34 = stack5.peek();
    java.lang.Object obj35 = stack5.pop();
    java.lang.Object obj36 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1.0d+ "'", obj4.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0d+ "'", obj5.equals(1.0d));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    java.lang.Object obj14 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)10.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    boolean b27 = stack23.empty();
    java.lang.Object obj28 = stack23.pop();
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b31 = stack30.empty();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj34 = stack30.push((java.lang.Object)stack33);
    java.lang.Object obj35 = stack23.push((java.lang.Object)stack30);
    java.lang.Object obj36 = stack16.push((java.lang.Object)stack30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10.0f+ "'", obj18.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 10.0f+ "'", obj28.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    boolean b12 = stack5.empty();
    java.lang.Object obj13 = stack5.peek();
    java.lang.Object obj14 = stack5.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stack5.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    boolean b4 = stack1.empty();
    java.lang.Object obj5 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b5 = stack4.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj8 = stack4.push((java.lang.Object)stack7);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack7.push(obj15);
    java.lang.Object obj17 = stack1.push(obj15);
    boolean b18 = stack1.empty();
    java.lang.Object obj19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = stack1.push(obj19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    boolean b16 = stack5.empty();
    boolean b17 = stack5.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    boolean b14 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj23 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj24 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    java.lang.Object obj8 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b9 = stack8.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj12 = stack8.push((java.lang.Object)stack11);
    java.lang.Object obj13 = stack1.push((java.lang.Object)stack8);
    java.lang.Object obj14 = stack8.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stack5.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    boolean b15 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b18 = stack17.empty();
    java.lang.Object obj20 = stack17.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj28 = stack26.push((java.lang.Object)100.0f);
    java.lang.Object obj29 = stack26.peek();
    java.lang.Object obj31 = stack26.push((java.lang.Object)"hi!");
    java.lang.Object obj32 = stack26.pop();
    java.lang.Object obj34 = stack26.push((java.lang.Object)(short)100);
    java.lang.Object obj35 = stack22.push((java.lang.Object)stack26);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj39 = stack37.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj43 = stack41.push((java.lang.Object)100.0f);
    java.lang.Object obj44 = stack41.peek();
    java.lang.Object obj46 = stack41.push((java.lang.Object)"hi!");
    java.lang.Object obj47 = stack41.pop();
    java.lang.Object obj49 = stack41.push((java.lang.Object)(short)100);
    java.lang.Object obj50 = stack37.push((java.lang.Object)stack41);
    java.lang.Object obj51 = stack26.push((java.lang.Object)stack37);
    boolean b52 = stack26.empty();
    java.lang.Object obj53 = new java.lang.Object();
    java.lang.Object obj54 = stack26.push(obj53);
    java.lang.Object obj55 = stack26.pop();
    java.lang.Object obj56 = stack17.push((java.lang.Object)stack26);
    br.ufal.ic.test.mystack.Stack stack58 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj60 = stack58.push((java.lang.Object)10.0f);
    boolean b61 = stack58.empty();
    java.lang.Object obj62 = stack58.pop();
    java.lang.Object obj63 = stack26.push(obj62);
    java.lang.Object obj64 = stack26.pop();
    boolean b65 = stack26.empty();
    java.lang.Object obj66 = stack1.push((java.lang.Object)b65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (byte)0+ "'", obj20.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 100.0f+ "'", obj39.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 100.0f+ "'", obj43.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + "hi!"+ "'", obj46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "hi!"+ "'", obj47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + (short)100+ "'", obj49.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10.0f+ "'", obj60.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 10.0f+ "'", obj62.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 10.0f+ "'", obj63.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 10.0f+ "'", obj64.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + false+ "'", obj66.equals(false));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)stack3);
    java.lang.Object obj13 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    java.lang.Object obj11 = stack1.peek();
    java.lang.Object obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = stack1.push(obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    boolean b4 = stack1.empty();
    java.lang.Object obj5 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)1);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    java.lang.Object obj16 = stack10.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = stack10.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)100.0f);
    java.lang.Object obj10 = stack7.peek();
    java.lang.Object obj12 = stack7.push((java.lang.Object)"hi!");
    java.lang.Object obj13 = stack7.pop();
    java.lang.Object obj15 = stack7.push((java.lang.Object)(short)100);
    java.lang.Object obj16 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj17 = stack5.pop();
    boolean b18 = stack5.empty();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    boolean b29 = stack20.empty();
    java.lang.Object obj30 = stack20.peek();
    java.lang.Object obj31 = stack5.push((java.lang.Object)stack20);
    java.lang.Object obj32 = stack20.pop();
    java.lang.Object obj33 = stack20.peek();
    java.lang.Object obj34 = stack1.push((java.lang.Object)stack20);
    boolean b35 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + "hi!"+ "'", obj12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "hi!"+ "'", obj13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (short)100+ "'", obj16.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 100.0f+ "'", obj33.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack6.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)100.0f);
    java.lang.Object obj28 = stack25.peek();
    java.lang.Object obj30 = stack25.push((java.lang.Object)"hi!");
    java.lang.Object obj31 = stack25.pop();
    java.lang.Object obj33 = stack25.push((java.lang.Object)(short)100);
    java.lang.Object obj34 = stack21.push((java.lang.Object)stack25);
    java.lang.Object obj35 = stack10.push((java.lang.Object)stack21);
    boolean b36 = stack10.empty();
    java.lang.Object obj37 = new java.lang.Object();
    java.lang.Object obj38 = stack10.push(obj37);
    java.lang.Object obj39 = stack10.pop();
    java.lang.Object obj40 = stack1.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj44 = stack42.push((java.lang.Object)10.0f);
    boolean b45 = stack42.empty();
    java.lang.Object obj46 = stack42.pop();
    java.lang.Object obj47 = stack10.push(obj46);
    java.lang.Object obj48 = stack10.pop();
    java.lang.Object obj49 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj50 = stack10.push(obj49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "hi!"+ "'", obj30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 10.0f+ "'", obj46.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 10.0f+ "'", obj47.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 10.0f+ "'", obj48.equals(10.0f));

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    java.lang.Object obj16 = stack10.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = stack10.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    java.lang.Object obj11 = stack8.pop();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj15 = stack13.push((java.lang.Object)10.0f);
    boolean b16 = stack13.empty();
    java.lang.Object obj17 = stack13.pop();
    java.lang.Object obj18 = stack8.push(obj17);
    java.lang.Object obj19 = stack8.peek();
    java.lang.Object obj20 = stack8.peek();
    java.lang.Object obj21 = stack1.push(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10.0f+ "'", obj15.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10.0f+ "'", obj17.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10.0f+ "'", obj18.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 10.0f+ "'", obj21.equals(10.0f));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj14 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack1.empty();
    java.lang.Object obj16 = stack1.peek();
    java.lang.Object obj18 = stack1.push((java.lang.Object)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte)100+ "'", obj18.equals((byte)100));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b9 = stack8.empty();
    java.lang.Object obj10 = stack1.push((java.lang.Object)stack8);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stack8.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj33 = stack31.push((java.lang.Object)1.0d);
    java.lang.Object obj34 = stack31.peek();
    java.lang.Object obj35 = stack16.push(obj34);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj38 = stack16.push((java.lang.Object)stack37);
    java.lang.Object obj39 = stack1.push((java.lang.Object)stack16);
    boolean b40 = stack16.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 1.0d+ "'", obj33.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)' ');

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    boolean b6 = stack1.empty();
    java.lang.Object obj7 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1)+ "'", obj7.equals((-1)));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj31 = stack5.pop();
    java.lang.Object obj33 = stack5.push((java.lang.Object)(short)-1);
    java.lang.Object obj34 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)-1+ "'", obj33.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)-1+ "'", obj34.equals((short)-1));

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    java.lang.Object obj11 = stack1.peek();
    java.lang.Object obj12 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj5 = stack1.push((java.lang.Object)stack4);
    boolean b6 = stack1.empty();
    java.lang.Object obj7 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)100.0f);
    java.lang.Object obj9 = stack6.peek();
    java.lang.Object obj11 = stack6.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b14 = stack13.empty();
    java.lang.Object obj15 = stack6.push((java.lang.Object)stack13);
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack6);
    java.lang.Object obj17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = stack6.push(obj17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (byte)0+ "'", obj5.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (byte)0+ "'", obj6.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (byte)0+ "'", obj7.equals((byte)0));

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    java.lang.Object obj21 = stack1.peek();
    java.lang.Object obj22 = stack1.peek();
    java.lang.Object obj23 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 1.0d+ "'", obj21.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0d+ "'", obj22.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 1.0d+ "'", obj23.equals(1.0d));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    boolean b4 = stack1.empty();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj37 = stack35.push((java.lang.Object)1.0d);
    java.lang.Object obj38 = stack5.push(obj37);
    boolean b39 = stack5.empty();
    java.lang.Object obj40 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0d+ "'", obj37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0d+ "'", obj38.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0d+ "'", obj40.equals(1.0d));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj13 = stack11.push((java.lang.Object)100.0f);
    java.lang.Object obj14 = stack11.peek();
    java.lang.Object obj16 = stack11.push((java.lang.Object)"hi!");
    java.lang.Object obj17 = stack11.pop();
    java.lang.Object obj19 = stack11.push((java.lang.Object)(short)100);
    java.lang.Object obj20 = stack7.push((java.lang.Object)stack11);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj28 = stack26.push((java.lang.Object)100.0f);
    java.lang.Object obj29 = stack26.peek();
    java.lang.Object obj31 = stack26.push((java.lang.Object)"hi!");
    java.lang.Object obj32 = stack26.pop();
    java.lang.Object obj34 = stack26.push((java.lang.Object)(short)100);
    java.lang.Object obj35 = stack22.push((java.lang.Object)stack26);
    java.lang.Object obj36 = stack11.push((java.lang.Object)stack22);
    boolean b37 = stack11.empty();
    java.lang.Object obj38 = stack1.push((java.lang.Object)stack11);
    java.lang.Object obj39 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.peek();
    java.lang.Object obj14 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    java.lang.Object obj14 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)10.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj27 = stack23.pop();
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b30 = stack29.empty();
    boolean b31 = stack29.empty();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b34 = stack33.empty();
    boolean b35 = stack33.empty();
    java.lang.Object obj36 = stack29.push((java.lang.Object)stack33);
    java.lang.Object obj37 = stack23.push((java.lang.Object)stack29);
    java.lang.Object obj38 = stack16.push(obj37);
    boolean b39 = stack16.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10.0f+ "'", obj18.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    boolean b7 = stack1.empty();
    java.lang.Object obj8 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)(-1));
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj14 = stack10.peek();
    boolean b15 = stack10.empty();
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack10);
    java.lang.Object obj17 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (-1)+ "'", obj12.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (-1)+ "'", obj13.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (-1)+ "'", obj14.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)10.0f);
    java.lang.Object obj11 = stack8.peek();
    boolean b12 = stack8.empty();
    boolean b13 = stack8.empty();
    java.lang.Object obj14 = stack1.push((java.lang.Object)b13);
    java.lang.Object obj15 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10.0f+ "'", obj11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + false+ "'", obj14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + false+ "'", obj15.equals(false));

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    java.lang.Object obj21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj22 = stack1.push(obj21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj14 = stack12.push((java.lang.Object)1.0d);
    java.lang.Object obj15 = stack1.push((java.lang.Object)1.0d);
    boolean b16 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack18.pop();
    java.lang.Object obj26 = stack18.push((java.lang.Object)(short)100);
    boolean b27 = stack18.empty();
    java.lang.Object obj28 = stack18.peek();
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj32 = stack30.push((java.lang.Object)100.0f);
    java.lang.Object obj33 = stack30.peek();
    java.lang.Object obj35 = stack30.push((java.lang.Object)"hi!");
    java.lang.Object obj36 = stack30.pop();
    boolean b37 = stack30.empty();
    java.lang.Object obj38 = stack30.peek();
    java.lang.Object obj39 = stack30.pop();
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b42 = stack41.empty();
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj45 = stack41.push((java.lang.Object)stack44);
    java.lang.Object obj46 = stack30.push(obj45);
    java.lang.Object obj47 = stack18.push(obj46);
    java.lang.Object obj48 = stack18.pop();
    java.lang.Object obj49 = stack1.push((java.lang.Object)stack18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0d+ "'", obj14.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 1.0d+ "'", obj15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 100.0f+ "'", obj33.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "hi!"+ "'", obj35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "hi!"+ "'", obj36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 100.0f+ "'", obj38.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 100.0f+ "'", obj39.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    boolean b7 = stack1.empty();
    java.lang.Object obj8 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)(-1));
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj14 = stack10.peek();
    boolean b15 = stack10.empty();
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)10.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj22 = stack18.pop();
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b25 = stack24.empty();
    boolean b26 = stack24.empty();
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b29 = stack28.empty();
    boolean b30 = stack28.empty();
    java.lang.Object obj31 = stack24.push((java.lang.Object)stack28);
    java.lang.Object obj32 = stack18.push((java.lang.Object)stack24);
    boolean b33 = stack24.empty();
    java.lang.Object obj34 = stack1.push((java.lang.Object)b33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (-1)+ "'", obj12.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (-1)+ "'", obj13.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (-1)+ "'", obj14.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 10.0f+ "'", obj21.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 10.0f+ "'", obj22.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + false+ "'", obj34.equals(false));

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)(-1));
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj9 = stack5.peek();
    java.lang.Object obj10 = stack1.push(obj9);
    java.lang.Object obj11 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1)+ "'", obj7.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + (-1)+ "'", obj8.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (-1)+ "'", obj9.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1)+ "'", obj10.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (-1)+ "'", obj11.equals((-1)));

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    boolean b7 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj13 = stack11.push((java.lang.Object)100.0f);
    java.lang.Object obj14 = stack11.peek();
    java.lang.Object obj16 = stack11.push((java.lang.Object)"hi!");
    java.lang.Object obj17 = stack11.pop();
    java.lang.Object obj19 = stack11.push((java.lang.Object)(short)100);
    java.lang.Object obj20 = stack9.push((java.lang.Object)(short)100);
    boolean b21 = stack9.empty();
    java.lang.Object obj22 = stack9.peek();
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj26 = stack24.push((java.lang.Object)10.0f);
    java.lang.Object obj27 = stack24.peek();
    java.lang.Object obj28 = stack24.peek();
    java.lang.Object obj29 = stack9.push((java.lang.Object)stack24);
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj33 = stack31.push((java.lang.Object)10.0f);
    java.lang.Object obj34 = stack31.peek();
    java.lang.Object obj35 = stack31.pop();
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b38 = stack37.empty();
    boolean b39 = stack37.empty();
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b42 = stack41.empty();
    boolean b43 = stack41.empty();
    java.lang.Object obj44 = stack37.push((java.lang.Object)stack41);
    java.lang.Object obj45 = stack31.push((java.lang.Object)stack37);
    java.lang.Object obj46 = stack24.push(obj45);
    java.lang.Object obj47 = stack1.push(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (short)100+ "'", obj22.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 10.0f+ "'", obj28.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10.0f+ "'", obj34.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    java.lang.Object obj34 = stack5.pop();
    java.lang.Object obj35 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)'4');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj34 = stack32.push((java.lang.Object)10.0f);
    java.lang.Object obj35 = stack32.peek();
    boolean b36 = stack32.empty();
    java.lang.Object obj37 = stack32.peek();
    boolean b38 = stack32.empty();
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b41 = stack40.empty();
    boolean b42 = stack40.empty();
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj46 = stack44.push((java.lang.Object)100.0f);
    java.lang.Object obj47 = stack44.peek();
    java.lang.Object obj49 = stack44.push((java.lang.Object)"hi!");
    java.lang.Object obj50 = stack44.pop();
    boolean b51 = stack44.empty();
    java.lang.Object obj52 = stack44.peek();
    java.lang.Object obj53 = stack44.pop();
    java.lang.Object obj54 = stack40.push((java.lang.Object)stack44);
    java.lang.Object obj55 = stack32.push(obj54);
    java.lang.Object obj56 = stack5.push(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10.0f+ "'", obj34.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 100.0f+ "'", obj46.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 100.0f+ "'", obj47.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "hi!"+ "'", obj49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "hi!"+ "'", obj50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 100.0f+ "'", obj52.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 100.0f+ "'", obj53.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    boolean b12 = stack5.empty();
    java.lang.Object obj13 = stack5.peek();
    java.lang.Object obj14 = stack5.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj34 = stack32.push((java.lang.Object)1.0d);
    java.lang.Object obj35 = stack32.peek();
    java.lang.Object obj36 = stack17.push(obj35);
    java.lang.Object obj37 = stack1.push(obj35);
    boolean b38 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 1.0d+ "'", obj36.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0d+ "'", obj37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack1.push((java.lang.Object)0);
    java.lang.Object obj8 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 0+ "'", obj7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 0+ "'", obj8.equals(0));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    java.lang.Object obj7 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj10 = stack5.push((java.lang.Object)(-1L));
    java.lang.Object obj11 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1L)+ "'", obj10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (-1L)+ "'", obj11.equals((-1L)));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    java.lang.Object obj5 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (byte)0+ "'", obj5.equals((byte)0));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    java.lang.Object obj4 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack6.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)100.0f);
    java.lang.Object obj28 = stack25.peek();
    java.lang.Object obj30 = stack25.push((java.lang.Object)"hi!");
    java.lang.Object obj31 = stack25.pop();
    java.lang.Object obj33 = stack25.push((java.lang.Object)(short)100);
    java.lang.Object obj34 = stack21.push((java.lang.Object)stack25);
    java.lang.Object obj35 = stack10.push((java.lang.Object)stack21);
    java.lang.Object obj36 = stack21.peek();
    java.lang.Object obj37 = stack1.push(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1.0d+ "'", obj4.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "hi!"+ "'", obj30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b12 = stack11.empty();
    boolean b13 = stack11.empty();
    java.lang.Object obj14 = stack7.push((java.lang.Object)stack11);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack7);
    java.lang.Object obj16 = stack7.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = stack7.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack8.push((java.lang.Object)(short)100);
    boolean b20 = stack8.empty();
    java.lang.Object obj21 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj27 = stack23.peek();
    java.lang.Object obj28 = stack8.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack1.push((java.lang.Object)stack23);
    java.lang.Object obj30 = stack23.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (short)100+ "'", obj21.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 10.0f+ "'", obj30.equals(10.0f));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    java.lang.Object obj34 = stack5.pop();
    java.lang.Object obj35 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    boolean b17 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    boolean b25 = stack16.empty();
    java.lang.Object obj26 = stack16.peek();
    java.lang.Object obj27 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj28 = stack16.pop();
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj32 = stack30.push((java.lang.Object)1.0d);
    java.lang.Object obj33 = stack30.peek();
    java.lang.Object obj34 = stack30.peek();
    java.lang.Object obj35 = stack30.pop();
    java.lang.Object obj36 = stack16.push((java.lang.Object)stack30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 1.0d+ "'", obj32.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 1.0d+ "'", obj33.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj23 = stack1.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b26 = stack25.empty();
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b29 = stack28.empty();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj32 = stack28.push((java.lang.Object)stack31);
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)100.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj39 = stack34.push((java.lang.Object)"hi!");
    java.lang.Object obj40 = stack31.push(obj39);
    java.lang.Object obj41 = stack25.push(obj39);
    java.lang.Object obj42 = stack22.push((java.lang.Object)stack25);
    java.lang.Object obj43 = stack25.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "hi!"+ "'", obj41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "hi!"+ "'", obj43.equals("hi!"));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj23 = stack1.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b26 = stack25.empty();
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b29 = stack28.empty();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj32 = stack28.push((java.lang.Object)stack31);
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)100.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj39 = stack34.push((java.lang.Object)"hi!");
    java.lang.Object obj40 = stack31.push(obj39);
    java.lang.Object obj41 = stack25.push(obj39);
    java.lang.Object obj42 = stack22.push((java.lang.Object)stack25);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj46 = stack44.push((java.lang.Object)10.0f);
    java.lang.Object obj47 = stack44.peek();
    boolean b48 = stack44.empty();
    java.lang.Object obj49 = stack44.peek();
    boolean b50 = stack44.empty();
    br.ufal.ic.test.mystack.Stack stack52 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b53 = stack52.empty();
    boolean b54 = stack52.empty();
    br.ufal.ic.test.mystack.Stack stack56 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj58 = stack56.push((java.lang.Object)100.0f);
    java.lang.Object obj59 = stack56.peek();
    java.lang.Object obj61 = stack56.push((java.lang.Object)"hi!");
    java.lang.Object obj62 = stack56.pop();
    boolean b63 = stack56.empty();
    java.lang.Object obj64 = stack56.peek();
    java.lang.Object obj65 = stack56.pop();
    java.lang.Object obj66 = stack52.push((java.lang.Object)stack56);
    java.lang.Object obj67 = stack44.push(obj66);
    java.lang.Object obj68 = stack25.push(obj67);
    br.ufal.ic.test.mystack.Stack stack70 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj72 = stack70.push((java.lang.Object)100.0f);
    java.lang.Object obj73 = stack70.peek();
    boolean b74 = stack70.empty();
    java.lang.Object obj75 = stack25.push((java.lang.Object)stack70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "hi!"+ "'", obj41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 10.0f+ "'", obj46.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 10.0f+ "'", obj47.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 10.0f+ "'", obj49.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 100.0f+ "'", obj58.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + 100.0f+ "'", obj59.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "hi!"+ "'", obj61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "hi!"+ "'", obj62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 100.0f+ "'", obj64.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 100.0f+ "'", obj65.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + 100.0f+ "'", obj72.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj73 + "' != '" + 100.0f+ "'", obj73.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    java.lang.Object obj11 = stack8.peek();
    java.lang.Object obj13 = stack8.push((java.lang.Object)"hi!");
    java.lang.Object obj14 = stack8.pop();
    java.lang.Object obj16 = stack8.push((java.lang.Object)(short)100);
    java.lang.Object obj17 = stack4.push((java.lang.Object)stack8);
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj21 = stack19.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj28 = stack23.push((java.lang.Object)"hi!");
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj31 = stack23.push((java.lang.Object)(short)100);
    java.lang.Object obj32 = stack19.push((java.lang.Object)stack23);
    java.lang.Object obj33 = stack8.push((java.lang.Object)stack19);
    java.lang.Object obj34 = stack8.pop();
    java.lang.Object obj35 = stack8.pop();
    java.lang.Object obj36 = stack1.push((java.lang.Object)stack8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "hi!"+ "'", obj13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (short)100+ "'", obj16.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "hi!"+ "'", obj29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short)100+ "'", obj31.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack1.push(obj16);
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj21 = stack19.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj29 = stack27.push((java.lang.Object)100.0f);
    java.lang.Object obj30 = stack27.peek();
    java.lang.Object obj32 = stack27.push((java.lang.Object)"hi!");
    java.lang.Object obj33 = stack27.pop();
    java.lang.Object obj35 = stack27.push((java.lang.Object)(short)100);
    java.lang.Object obj36 = stack23.push((java.lang.Object)stack27);
    br.ufal.ic.test.mystack.Stack stack38 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj40 = stack38.push((java.lang.Object)1.0d);
    java.lang.Object obj41 = stack38.peek();
    java.lang.Object obj42 = stack23.push(obj41);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj45 = stack23.push((java.lang.Object)stack44);
    java.lang.Object obj46 = stack19.push((java.lang.Object)stack23);
    java.lang.Object obj47 = stack1.push((java.lang.Object)stack23);
    br.ufal.ic.test.mystack.Stack stack49 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj51 = stack49.push((java.lang.Object)100.0f);
    java.lang.Object obj52 = stack49.peek();
    java.lang.Object obj54 = stack49.push((java.lang.Object)"hi!");
    java.lang.Object obj55 = stack49.pop();
    boolean b56 = stack49.empty();
    java.lang.Object obj57 = stack49.peek();
    java.lang.Object obj58 = stack49.pop();
    boolean b59 = stack49.empty();
    br.ufal.ic.test.mystack.Stack stack61 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj63 = stack61.push((java.lang.Object)10.0f);
    java.lang.Object obj64 = stack61.pop();
    boolean b65 = stack61.empty();
    java.lang.Object obj66 = stack49.push((java.lang.Object)b65);
    java.lang.Object obj67 = stack23.push((java.lang.Object)b65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 1.0d+ "'", obj21.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0d+ "'", obj40.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0d+ "'", obj41.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0d+ "'", obj42.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 100.0f+ "'", obj51.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 100.0f+ "'", obj52.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "hi!"+ "'", obj54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "hi!"+ "'", obj55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 100.0f+ "'", obj57.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 100.0f+ "'", obj58.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 10.0f+ "'", obj63.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 10.0f+ "'", obj64.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + true+ "'", obj66.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + true+ "'", obj67.equals(true));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    java.lang.Object obj14 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)10.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj23 = stack16.push(obj22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10.0f+ "'", obj18.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)10.0f);
    java.lang.Object obj6 = stack3.peek();
    boolean b7 = stack3.empty();
    java.lang.Object obj8 = stack3.pop();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack3.push((java.lang.Object)stack10);
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack3);
    boolean b17 = stack3.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj33 = stack31.push((java.lang.Object)1.0d);
    java.lang.Object obj34 = stack31.peek();
    java.lang.Object obj35 = stack16.push(obj34);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj38 = stack16.push((java.lang.Object)stack37);
    java.lang.Object obj39 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj40 = stack16.peek();
    boolean b41 = stack16.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 1.0d+ "'", obj33.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((-1));
    boolean b13 = stack12.empty();
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stack12.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj9 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)stack3);
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj16 = stack14.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack18.pop();
    java.lang.Object obj26 = stack18.push((java.lang.Object)(short)100);
    java.lang.Object obj27 = stack14.push((java.lang.Object)stack18);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj31 = stack29.push((java.lang.Object)1.0d);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack14.push(obj32);
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj36 = stack14.push((java.lang.Object)stack35);
    br.ufal.ic.test.mystack.Stack stack38 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b39 = stack38.empty();
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b42 = stack41.empty();
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj45 = stack41.push((java.lang.Object)stack44);
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)100.0f);
    java.lang.Object obj50 = stack47.peek();
    java.lang.Object obj52 = stack47.push((java.lang.Object)"hi!");
    java.lang.Object obj53 = stack44.push(obj52);
    java.lang.Object obj54 = stack38.push(obj52);
    java.lang.Object obj55 = stack35.push((java.lang.Object)stack38);
    java.lang.Object obj56 = stack3.push((java.lang.Object)stack35);
    java.lang.Object obj57 = stack3.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 100.0f+ "'", obj16.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 1.0d+ "'", obj31.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 1.0d+ "'", obj32.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 1.0d+ "'", obj33.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 100.0f+ "'", obj50.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "hi!"+ "'", obj52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "hi!"+ "'", obj53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "hi!"+ "'", obj54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)(-1));
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj9 = stack5.peek();
    java.lang.Object obj10 = stack1.push(obj9);
    boolean b11 = stack1.empty();
    java.lang.Object obj12 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1)+ "'", obj7.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + (-1)+ "'", obj8.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (-1)+ "'", obj9.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1)+ "'", obj10.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (-1)+ "'", obj12.equals((-1)));

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)100);
    java.lang.Object obj5 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100+ "'", obj4.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100+ "'", obj5.equals(100));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj5 = stack1.push((java.lang.Object)stack4);
    boolean b6 = stack1.empty();
    java.lang.Object obj7 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    boolean b18 = stack5.empty();
    boolean b19 = stack5.empty();
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj28 = stack23.push((java.lang.Object)"hi!");
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj31 = stack23.push((java.lang.Object)(short)100);
    java.lang.Object obj32 = stack21.push((java.lang.Object)(short)100);
    boolean b33 = stack21.empty();
    java.lang.Object obj34 = stack21.pop();
    boolean b35 = stack21.empty();
    java.lang.Object obj36 = stack5.push((java.lang.Object)stack21);
    java.lang.Object obj37 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "hi!"+ "'", obj29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short)100+ "'", obj31.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    java.lang.Object obj47 = stack22.peek();
    java.lang.Object obj48 = stack22.pop();
    java.lang.Object obj49 = stack22.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj50 = stack22.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 10.0f+ "'", obj49.equals(10.0f));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    java.lang.Object obj47 = stack22.peek();
    java.lang.Object obj48 = stack22.pop();
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b51 = stack50.empty();
    br.ufal.ic.test.mystack.Stack stack53 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj55 = stack53.push((java.lang.Object)100.0f);
    java.lang.Object obj56 = stack53.peek();
    java.lang.Object obj58 = stack53.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b61 = stack60.empty();
    java.lang.Object obj62 = stack53.push((java.lang.Object)stack60);
    java.lang.Object obj63 = stack50.push((java.lang.Object)stack60);
    java.lang.Object obj64 = stack22.push((java.lang.Object)stack50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + 100.0f+ "'", obj55.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 100.0f+ "'", obj56.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "hi!"+ "'", obj58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj37 = stack35.push((java.lang.Object)1.0d);
    java.lang.Object obj38 = stack5.push(obj37);
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)10.0f);
    java.lang.Object obj43 = stack40.peek();
    boolean b44 = stack40.empty();
    java.lang.Object obj45 = stack40.pop();
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b48 = stack47.empty();
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj51 = stack47.push((java.lang.Object)stack50);
    java.lang.Object obj52 = stack40.push((java.lang.Object)stack47);
    java.lang.Object obj53 = stack40.peek();
    boolean b54 = stack40.empty();
    java.lang.Object obj55 = stack5.push((java.lang.Object)stack40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0d+ "'", obj37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0d+ "'", obj38.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 10.0f+ "'", obj42.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0f+ "'", obj43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 10.0f+ "'", obj45.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    java.lang.Object obj14 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)10.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj27 = stack23.pop();
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b30 = stack29.empty();
    boolean b31 = stack29.empty();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b34 = stack33.empty();
    boolean b35 = stack33.empty();
    java.lang.Object obj36 = stack29.push((java.lang.Object)stack33);
    java.lang.Object obj37 = stack23.push((java.lang.Object)stack29);
    java.lang.Object obj38 = stack16.push(obj37);
    java.lang.Object obj39 = stack16.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10.0f+ "'", obj18.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b12 = stack11.empty();
    boolean b13 = stack11.empty();
    java.lang.Object obj14 = stack7.push((java.lang.Object)stack11);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack7);
    java.lang.Object obj16 = stack7.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = stack7.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj14 = stack12.push((java.lang.Object)1.0d);
    java.lang.Object obj15 = stack1.push((java.lang.Object)1.0d);
    boolean b16 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)100.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj27 = stack22.push((java.lang.Object)"hi!");
    java.lang.Object obj28 = stack22.pop();
    boolean b29 = stack22.empty();
    java.lang.Object obj30 = stack22.peek();
    java.lang.Object obj31 = stack22.pop();
    java.lang.Object obj32 = stack18.push((java.lang.Object)stack22);
    boolean b33 = stack22.empty();
    java.lang.Object obj34 = stack1.push((java.lang.Object)stack22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0d+ "'", obj14.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 1.0d+ "'", obj15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    boolean b4 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj5 = stack1.push((java.lang.Object)stack4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stack4.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b10 = stack9.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack15.push(obj23);
    java.lang.Object obj25 = stack9.push(obj23);
    java.lang.Object obj26 = stack1.push((java.lang.Object)stack9);
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj30 = stack28.push((java.lang.Object)100.0f);
    java.lang.Object obj31 = stack28.peek();
    java.lang.Object obj33 = stack28.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b36 = stack35.empty();
    java.lang.Object obj37 = stack28.push((java.lang.Object)stack35);
    boolean b38 = stack35.empty();
    java.lang.Object obj39 = stack9.push((java.lang.Object)b38);
    boolean b40 = stack9.empty();
    java.lang.Object obj41 = stack9.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + true+ "'", obj39.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + true+ "'", obj41.equals(true));

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    java.lang.Object obj5 = stack1.peek();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (byte)0+ "'", obj5.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    java.lang.Object obj11 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    java.lang.Object obj34 = stack5.peek();
    java.lang.Object obj35 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)(-1));
    java.lang.Object obj19 = stack16.peek();
    boolean b20 = stack16.empty();
    java.lang.Object obj21 = stack16.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj28 = stack23.push((java.lang.Object)"hi!");
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj31 = stack23.push((java.lang.Object)(short)100);
    boolean b32 = stack23.empty();
    java.lang.Object obj33 = stack23.peek();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj37 = stack35.push((java.lang.Object)100.0f);
    java.lang.Object obj38 = stack35.peek();
    java.lang.Object obj40 = stack35.push((java.lang.Object)"hi!");
    java.lang.Object obj41 = stack35.pop();
    boolean b42 = stack35.empty();
    java.lang.Object obj43 = stack35.peek();
    java.lang.Object obj44 = stack35.pop();
    br.ufal.ic.test.mystack.Stack stack46 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b47 = stack46.empty();
    br.ufal.ic.test.mystack.Stack stack49 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj50 = stack46.push((java.lang.Object)stack49);
    java.lang.Object obj51 = stack35.push(obj50);
    java.lang.Object obj52 = stack23.push(obj51);
    java.lang.Object obj53 = stack16.push((java.lang.Object)stack23);
    java.lang.Object obj54 = stack1.push((java.lang.Object)stack23);
    java.lang.Object obj55 = stack23.pop();
    boolean b56 = stack23.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (-1)+ "'", obj18.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (-1)+ "'", obj19.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (-1)+ "'", obj21.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "hi!"+ "'", obj29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short)100+ "'", obj31.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 100.0f+ "'", obj38.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "hi!"+ "'", obj41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 100.0f+ "'", obj43.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    boolean b16 = stack5.empty();
    java.lang.Object obj17 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b20 = stack19.empty();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj23 = stack19.push((java.lang.Object)stack22);
    java.lang.Object obj24 = stack5.push((java.lang.Object)stack19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(10);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)10.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj8 = stack4.pop();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    boolean b12 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    boolean b16 = stack14.empty();
    java.lang.Object obj17 = stack10.push((java.lang.Object)stack14);
    java.lang.Object obj18 = stack4.push((java.lang.Object)stack10);
    java.lang.Object obj19 = stack1.push((java.lang.Object)stack4);
    boolean b20 = stack4.empty();
    java.lang.Object obj21 = stack4.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (byte)0+ "'", obj5.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (byte)0+ "'", obj6.equals((byte)0));

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    boolean b17 = stack16.empty();
    java.lang.Object obj18 = stack1.push((java.lang.Object)b17);
    boolean b19 = stack1.empty();
    boolean b20 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + true+ "'", obj18.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    java.lang.Object obj21 = stack1.push((java.lang.Object)b20);
    boolean b22 = stack1.empty();
    boolean b23 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + true+ "'", obj21.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)100);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)10.0f);
    java.lang.Object obj11 = stack8.peek();
    boolean b12 = stack8.empty();
    boolean b13 = stack8.empty();
    java.lang.Object obj14 = stack1.push((java.lang.Object)b13);
    boolean b15 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj19 = stack17.push((java.lang.Object)1.0d);
    java.lang.Object obj20 = stack17.peek();
    java.lang.Object obj21 = stack17.peek();
    java.lang.Object obj22 = stack17.pop();
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj28 = stack26.push((java.lang.Object)100.0f);
    java.lang.Object obj29 = stack26.peek();
    java.lang.Object obj31 = stack26.push((java.lang.Object)"hi!");
    java.lang.Object obj32 = stack26.pop();
    java.lang.Object obj34 = stack26.push((java.lang.Object)(short)100);
    java.lang.Object obj35 = stack24.push((java.lang.Object)(short)100);
    java.lang.Object obj36 = stack24.pop();
    boolean b37 = stack24.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj41 = stack39.push((java.lang.Object)100.0f);
    java.lang.Object obj42 = stack39.peek();
    java.lang.Object obj44 = stack39.push((java.lang.Object)"hi!");
    java.lang.Object obj45 = stack39.pop();
    java.lang.Object obj47 = stack39.push((java.lang.Object)(short)100);
    boolean b48 = stack39.empty();
    java.lang.Object obj49 = stack39.peek();
    java.lang.Object obj50 = stack24.push((java.lang.Object)stack39);
    java.lang.Object obj51 = stack39.pop();
    boolean b52 = stack39.empty();
    java.lang.Object obj53 = stack17.push((java.lang.Object)stack39);
    java.lang.Object obj54 = stack1.push(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10.0f+ "'", obj11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + false+ "'", obj14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 1.0d+ "'", obj21.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0d+ "'", obj22.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (short)100+ "'", obj36.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 100.0f+ "'", obj41.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "hi!"+ "'", obj44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "hi!"+ "'", obj45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + (short)100+ "'", obj47.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + (short)100+ "'", obj49.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + (short)100+ "'", obj51.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack1.push((java.lang.Object)0);
    boolean b8 = stack1.empty();
    boolean b9 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 0+ "'", obj7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj31 = stack5.pop();
    java.lang.Object obj32 = stack5.pop();
    java.lang.Object obj33 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj37 = stack35.push((java.lang.Object)100.0f);
    java.lang.Object obj38 = stack35.peek();
    java.lang.Object obj40 = stack35.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b43 = stack42.empty();
    java.lang.Object obj44 = stack35.push((java.lang.Object)stack42);
    java.lang.Object obj45 = stack5.push((java.lang.Object)stack42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 100.0f+ "'", obj33.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 100.0f+ "'", obj38.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)-1);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    boolean b10 = stack3.empty();
    java.lang.Object obj11 = stack3.peek();
    java.lang.Object obj12 = stack3.pop();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj18 = stack14.push((java.lang.Object)stack17);
    java.lang.Object obj19 = stack3.push(obj18);
    boolean b20 = stack3.empty();
    java.lang.Object obj21 = stack1.push((java.lang.Object)b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + false+ "'", obj21.equals(false));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    boolean b31 = stack21.empty();
    java.lang.Object obj33 = stack21.push((java.lang.Object)10L);
    java.lang.Object obj34 = stack21.pop();
    boolean b35 = stack21.empty();
    java.lang.Object obj36 = stack5.push((java.lang.Object)stack21);
    boolean b37 = stack5.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj41 = stack39.push((java.lang.Object)10L);
    java.lang.Object obj42 = stack39.pop();
    boolean b43 = stack39.empty();
    br.ufal.ic.test.mystack.Stack stack45 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)100.0f);
    java.lang.Object obj50 = stack47.peek();
    java.lang.Object obj52 = stack47.push((java.lang.Object)"hi!");
    java.lang.Object obj53 = stack47.pop();
    java.lang.Object obj55 = stack47.push((java.lang.Object)(short)100);
    java.lang.Object obj56 = stack45.push((java.lang.Object)(short)100);
    boolean b57 = stack45.empty();
    java.lang.Object obj58 = stack45.peek();
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj62 = stack60.push((java.lang.Object)10.0f);
    java.lang.Object obj63 = stack60.peek();
    java.lang.Object obj64 = stack60.peek();
    java.lang.Object obj65 = stack45.push((java.lang.Object)stack60);
    br.ufal.ic.test.mystack.Stack stack67 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj69 = stack67.push((java.lang.Object)10.0f);
    java.lang.Object obj70 = stack67.peek();
    java.lang.Object obj71 = stack67.pop();
    br.ufal.ic.test.mystack.Stack stack73 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b74 = stack73.empty();
    boolean b75 = stack73.empty();
    br.ufal.ic.test.mystack.Stack stack77 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b78 = stack77.empty();
    boolean b79 = stack77.empty();
    java.lang.Object obj80 = stack73.push((java.lang.Object)stack77);
    java.lang.Object obj81 = stack67.push((java.lang.Object)stack73);
    java.lang.Object obj82 = stack60.push(obj81);
    java.lang.Object obj83 = stack39.push((java.lang.Object)stack60);
    java.lang.Object obj84 = stack60.peek();
    java.lang.Object obj85 = stack60.peek();
    java.lang.Object obj86 = stack5.push(obj85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10L+ "'", obj33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10L+ "'", obj34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 10L+ "'", obj41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 10L+ "'", obj42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 100.0f+ "'", obj50.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "hi!"+ "'", obj52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "hi!"+ "'", obj53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + (short)100+ "'", obj55.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + (short)100+ "'", obj56.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + (short)100+ "'", obj58.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 10.0f+ "'", obj62.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 10.0f+ "'", obj63.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 10.0f+ "'", obj64.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 10.0f+ "'", obj69.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 10.0f+ "'", obj70.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + 10.0f+ "'", obj71.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj86);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    boolean b10 = stack7.empty();
    java.lang.Object obj11 = stack1.push((java.lang.Object)b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + true+ "'", obj11.equals(true));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b12 = stack11.empty();
    boolean b13 = stack11.empty();
    java.lang.Object obj14 = stack7.push((java.lang.Object)stack11);
    java.lang.Object obj16 = stack11.push((java.lang.Object)false);
    java.lang.Object obj17 = stack1.push((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + false+ "'", obj16.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + false+ "'", obj17.equals(false));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)10.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj8 = stack4.pop();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    boolean b12 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    boolean b16 = stack14.empty();
    java.lang.Object obj17 = stack10.push((java.lang.Object)stack14);
    java.lang.Object obj18 = stack4.push((java.lang.Object)stack10);
    java.lang.Object obj19 = stack1.push((java.lang.Object)stack4);
    boolean b20 = stack4.empty();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)100.0f);
    java.lang.Object obj25 = stack4.push(obj24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)10.0f);
    java.lang.Object obj8 = stack5.peek();
    boolean b9 = stack5.empty();
    java.lang.Object obj10 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack5.push((java.lang.Object)stack12);
    java.lang.Object obj18 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b21 = stack20.empty();
    java.lang.Object obj23 = stack20.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)100.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj34 = stack29.push((java.lang.Object)"hi!");
    java.lang.Object obj35 = stack29.pop();
    java.lang.Object obj37 = stack29.push((java.lang.Object)(short)100);
    java.lang.Object obj38 = stack25.push((java.lang.Object)stack29);
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj46 = stack44.push((java.lang.Object)100.0f);
    java.lang.Object obj47 = stack44.peek();
    java.lang.Object obj49 = stack44.push((java.lang.Object)"hi!");
    java.lang.Object obj50 = stack44.pop();
    java.lang.Object obj52 = stack44.push((java.lang.Object)(short)100);
    java.lang.Object obj53 = stack40.push((java.lang.Object)stack44);
    java.lang.Object obj54 = stack29.push((java.lang.Object)stack40);
    boolean b55 = stack29.empty();
    java.lang.Object obj56 = new java.lang.Object();
    java.lang.Object obj57 = stack29.push(obj56);
    java.lang.Object obj58 = stack29.pop();
    java.lang.Object obj59 = stack20.push((java.lang.Object)stack29);
    java.lang.Object obj60 = stack29.peek();
    java.lang.Object obj61 = stack1.push((java.lang.Object)stack29);
    boolean b62 = stack29.empty();
    java.lang.Object obj63 = stack29.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + (byte)0+ "'", obj23.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "hi!"+ "'", obj34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "hi!"+ "'", obj35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + (short)100+ "'", obj37.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 100.0f+ "'", obj46.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 100.0f+ "'", obj47.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "hi!"+ "'", obj49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "hi!"+ "'", obj50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + (short)100+ "'", obj52.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)(-1));
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push(obj20);
    java.lang.Object obj22 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (-1)+ "'", obj18.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (-1)+ "'", obj19.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (-1)+ "'", obj20.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (-1)+ "'", obj21.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (-1)+ "'", obj22.equals((-1)));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    boolean b31 = stack21.empty();
    java.lang.Object obj33 = stack21.push((java.lang.Object)10L);
    java.lang.Object obj34 = stack21.pop();
    boolean b35 = stack21.empty();
    java.lang.Object obj36 = stack5.push((java.lang.Object)stack21);
    java.lang.Object obj37 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10L+ "'", obj33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10L+ "'", obj34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.peek();
    boolean b8 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (byte)0+ "'", obj5.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (byte)0+ "'", obj6.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (byte)0+ "'", obj7.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)10.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj8 = stack4.pop();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    boolean b12 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    boolean b16 = stack14.empty();
    java.lang.Object obj17 = stack10.push((java.lang.Object)stack14);
    java.lang.Object obj18 = stack4.push((java.lang.Object)stack10);
    java.lang.Object obj19 = stack1.push((java.lang.Object)stack4);
    java.lang.Object obj20 = stack4.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    boolean b6 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj14 = stack12.push((java.lang.Object)100.0f);
    java.lang.Object obj15 = stack12.peek();
    java.lang.Object obj17 = stack12.push((java.lang.Object)"hi!");
    java.lang.Object obj18 = stack12.pop();
    java.lang.Object obj20 = stack12.push((java.lang.Object)(short)100);
    java.lang.Object obj21 = stack8.push((java.lang.Object)stack12);
    boolean b22 = stack8.empty();
    java.lang.Object obj23 = stack8.peek();
    boolean b24 = stack8.empty();
    java.lang.Object obj25 = stack1.push((java.lang.Object)stack8);
    java.lang.Object obj26 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 100.0f+ "'", obj15.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    boolean b7 = stack1.empty();
    boolean b8 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack((int)(short)0);
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b16 = stack15.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj19 = stack15.push((java.lang.Object)stack18);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack18.push(obj26);
    java.lang.Object obj28 = stack12.push(obj26);
    boolean b29 = stack12.empty();
    java.lang.Object obj30 = stack10.push((java.lang.Object)stack12);
    java.lang.Object obj31 = stack1.push((java.lang.Object)stack12);
    java.lang.Object obj32 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack((int)(short)1);
    java.lang.Object obj33 = stack16.push((java.lang.Object)(short)1);
    java.lang.Object obj35 = stack16.push((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)1+ "'", obj33.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 0+ "'", obj35.equals(0));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    java.lang.Object obj17 = stack1.pop();
    boolean b18 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)10.0f);
    java.lang.Object obj10 = stack7.peek();
    boolean b11 = stack7.empty();
    boolean b12 = stack7.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj16 = stack14.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b19 = stack18.empty();
    java.lang.Object obj21 = stack18.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj29 = stack27.push((java.lang.Object)100.0f);
    java.lang.Object obj30 = stack27.peek();
    java.lang.Object obj32 = stack27.push((java.lang.Object)"hi!");
    java.lang.Object obj33 = stack27.pop();
    java.lang.Object obj35 = stack27.push((java.lang.Object)(short)100);
    java.lang.Object obj36 = stack23.push((java.lang.Object)stack27);
    br.ufal.ic.test.mystack.Stack stack38 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj40 = stack38.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj44 = stack42.push((java.lang.Object)100.0f);
    java.lang.Object obj45 = stack42.peek();
    java.lang.Object obj47 = stack42.push((java.lang.Object)"hi!");
    java.lang.Object obj48 = stack42.pop();
    java.lang.Object obj50 = stack42.push((java.lang.Object)(short)100);
    java.lang.Object obj51 = stack38.push((java.lang.Object)stack42);
    java.lang.Object obj52 = stack27.push((java.lang.Object)stack38);
    boolean b53 = stack27.empty();
    java.lang.Object obj54 = new java.lang.Object();
    java.lang.Object obj55 = stack27.push(obj54);
    java.lang.Object obj56 = stack27.pop();
    java.lang.Object obj57 = stack18.push((java.lang.Object)stack27);
    java.lang.Object obj58 = stack18.peek();
    java.lang.Object obj59 = stack14.push(obj58);
    java.lang.Object obj60 = stack7.push((java.lang.Object)stack14);
    java.lang.Object obj61 = stack1.push(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0f+ "'", obj9.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0d+ "'", obj16.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (byte)0+ "'", obj21.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 100.0f+ "'", obj40.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 100.0f+ "'", obj45.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "hi!"+ "'", obj47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "hi!"+ "'", obj48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (short)100+ "'", obj50.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj5 = stack1.push((java.lang.Object)stack4);
    java.lang.Object obj6 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj6);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)10.0f);
    boolean b9 = stack6.empty();
    java.lang.Object obj10 = stack6.pop();
    java.lang.Object obj11 = stack1.push(obj10);
    java.lang.Object obj12 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj16 = stack14.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack18.pop();
    java.lang.Object obj26 = stack18.push((java.lang.Object)(short)100);
    java.lang.Object obj27 = stack14.push((java.lang.Object)stack18);
    boolean b28 = stack14.empty();
    java.lang.Object obj29 = stack14.peek();
    java.lang.Object obj30 = stack14.pop();
    java.lang.Object obj31 = stack14.peek();
    java.lang.Object obj32 = stack1.push((java.lang.Object)stack14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10.0f+ "'", obj11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0f+ "'", obj12.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 100.0f+ "'", obj16.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    java.lang.Object obj34 = stack5.peek();
    java.lang.Object obj35 = stack5.pop();
    boolean b36 = stack5.empty();
    java.lang.Object obj37 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    java.lang.Object obj11 = stack1.peek();
    java.lang.Object obj12 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.pop();
    boolean b19 = stack5.empty();
    boolean b20 = stack5.empty();
    java.lang.Object obj21 = stack5.pop();
    java.lang.Object obj22 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (short)100+ "'", obj21.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b5 = stack4.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj8 = stack4.push((java.lang.Object)stack7);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack7.push(obj15);
    java.lang.Object obj17 = stack1.push(obj15);
    java.lang.Object obj18 = stack1.peek();
    java.lang.Object obj19 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "hi!"+ "'", obj19.equals("hi!"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack8.push((java.lang.Object)(short)100);
    boolean b20 = stack8.empty();
    java.lang.Object obj21 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj27 = stack23.peek();
    java.lang.Object obj28 = stack8.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack1.push((java.lang.Object)stack23);
    java.lang.Object obj30 = stack23.peek();
    java.lang.Object obj31 = stack23.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (short)100+ "'", obj21.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 10.0f+ "'", obj30.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    java.lang.Object obj14 = stack1.pop();
    boolean b15 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack18.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack18.pop();
    boolean b31 = stack18.empty();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj35 = stack33.push((java.lang.Object)100.0f);
    java.lang.Object obj36 = stack33.peek();
    java.lang.Object obj38 = stack33.push((java.lang.Object)"hi!");
    java.lang.Object obj39 = stack33.pop();
    java.lang.Object obj41 = stack33.push((java.lang.Object)(short)100);
    boolean b42 = stack33.empty();
    java.lang.Object obj43 = stack33.peek();
    java.lang.Object obj44 = stack18.push((java.lang.Object)stack33);
    boolean b45 = stack33.empty();
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj53 = stack51.push((java.lang.Object)100.0f);
    java.lang.Object obj54 = stack51.peek();
    java.lang.Object obj56 = stack51.push((java.lang.Object)"hi!");
    java.lang.Object obj57 = stack51.pop();
    java.lang.Object obj59 = stack51.push((java.lang.Object)(short)100);
    java.lang.Object obj60 = stack47.push((java.lang.Object)stack51);
    br.ufal.ic.test.mystack.Stack stack62 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj64 = stack62.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack66 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj68 = stack66.push((java.lang.Object)100.0f);
    java.lang.Object obj69 = stack66.peek();
    java.lang.Object obj71 = stack66.push((java.lang.Object)"hi!");
    java.lang.Object obj72 = stack66.pop();
    java.lang.Object obj74 = stack66.push((java.lang.Object)(short)100);
    java.lang.Object obj75 = stack62.push((java.lang.Object)stack66);
    java.lang.Object obj76 = stack51.push((java.lang.Object)stack62);
    boolean b77 = stack51.empty();
    java.lang.Object obj78 = stack51.pop();
    java.lang.Object obj79 = stack33.push((java.lang.Object)stack51);
    java.lang.Object obj80 = stack1.push((java.lang.Object)stack51);
    br.ufal.ic.test.mystack.Stack stack82 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b83 = stack82.empty();
    boolean b84 = stack82.empty();
    br.ufal.ic.test.mystack.Stack stack86 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b87 = stack86.empty();
    boolean b88 = stack86.empty();
    java.lang.Object obj89 = stack82.push((java.lang.Object)stack86);
    java.lang.Object obj90 = stack1.push((java.lang.Object)stack82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 100.0f+ "'", obj35.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "hi!"+ "'", obj38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + (short)100+ "'", obj41.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + (short)100+ "'", obj43.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 100.0f+ "'", obj53.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 100.0f+ "'", obj54.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "hi!"+ "'", obj56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "hi!"+ "'", obj57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + (short)100+ "'", obj59.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 100.0f+ "'", obj64.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + 100.0f+ "'", obj68.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 100.0f+ "'", obj69.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + "hi!"+ "'", obj71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + "hi!"+ "'", obj72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + (short)100+ "'", obj74.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj90);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj37 = stack35.push((java.lang.Object)1.0d);
    java.lang.Object obj38 = stack5.push(obj37);
    boolean b39 = stack5.empty();
    boolean b40 = stack5.empty();
    java.lang.Object obj41 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0d+ "'", obj37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0d+ "'", obj38.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0d+ "'", obj41.equals(1.0d));

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)100.0f);
    java.lang.Object obj9 = stack6.peek();
    java.lang.Object obj11 = stack6.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b14 = stack13.empty();
    java.lang.Object obj15 = stack6.push((java.lang.Object)stack13);
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack6);
    java.lang.Object obj17 = stack6.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    boolean b31 = stack21.empty();
    java.lang.Object obj33 = stack21.push((java.lang.Object)10L);
    java.lang.Object obj34 = stack21.pop();
    boolean b35 = stack21.empty();
    java.lang.Object obj36 = stack5.push((java.lang.Object)stack21);
    java.lang.Object obj37 = stack21.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10L+ "'", obj33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10L+ "'", obj34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + (short)100+ "'", obj37.equals((short)100));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    java.lang.Object obj10 = stack4.pop();
    java.lang.Object obj12 = stack4.push((java.lang.Object)(short)100);
    boolean b13 = stack4.empty();
    java.lang.Object obj14 = stack4.peek();
    java.lang.Object obj15 = stack4.pop();
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack4);
    java.lang.Object obj17 = stack4.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 100.0f+ "'", obj17.equals(100.0f));

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(byte)-1);
    java.lang.Object obj10 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (byte)-1+ "'", obj9.equals((byte)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (byte)-1+ "'", obj10.equals((byte)-1));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj14 = stack12.push((java.lang.Object)1.0d);
    java.lang.Object obj15 = stack1.push((java.lang.Object)1.0d);
    boolean b16 = stack1.empty();
    java.lang.Object obj17 = stack1.pop();
    java.lang.Object obj18 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0d+ "'", obj14.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 1.0d+ "'", obj15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 1.0d+ "'", obj17.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    java.lang.Object obj11 = stack8.peek();
    java.lang.Object obj13 = stack8.push((java.lang.Object)"hi!");
    java.lang.Object obj14 = stack8.pop();
    java.lang.Object obj16 = stack8.push((java.lang.Object)(short)100);
    boolean b17 = stack8.empty();
    java.lang.Object obj18 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    boolean b27 = stack20.empty();
    java.lang.Object obj28 = stack20.peek();
    java.lang.Object obj29 = stack20.pop();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b32 = stack31.empty();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj35 = stack31.push((java.lang.Object)stack34);
    java.lang.Object obj36 = stack20.push(obj35);
    java.lang.Object obj37 = stack8.push(obj36);
    java.lang.Object obj38 = stack1.push((java.lang.Object)stack8);
    java.lang.Object obj39 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "hi!"+ "'", obj13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (short)100+ "'", obj16.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj17 = stack15.push((java.lang.Object)100.0f);
    java.lang.Object obj18 = stack15.peek();
    java.lang.Object obj20 = stack15.push((java.lang.Object)"hi!");
    java.lang.Object obj21 = stack15.pop();
    java.lang.Object obj23 = stack15.push((java.lang.Object)(short)100);
    boolean b24 = stack15.empty();
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj28 = stack26.push((java.lang.Object)1.0d);
    java.lang.Object obj29 = stack15.push((java.lang.Object)1.0d);
    java.lang.Object obj30 = stack1.push((java.lang.Object)stack15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 100.0f+ "'", obj17.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "hi!"+ "'", obj20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + (short)100+ "'", obj23.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 1.0d+ "'", obj28.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0d+ "'", obj29.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    boolean b25 = stack16.empty();
    java.lang.Object obj26 = stack16.peek();
    java.lang.Object obj27 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj28 = stack16.pop();
    boolean b29 = stack16.empty();
    boolean b30 = stack16.empty();
    java.lang.Object obj31 = stack16.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    java.lang.Object obj10 = stack4.pop();
    java.lang.Object obj12 = stack4.push((java.lang.Object)(short)100);
    boolean b13 = stack4.empty();
    java.lang.Object obj14 = stack4.peek();
    java.lang.Object obj15 = stack4.pop();
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack4);
    java.lang.Object obj18 = stack4.push((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    boolean b12 = stack5.empty();
    java.lang.Object obj13 = stack5.peek();
    java.lang.Object obj14 = stack5.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj34 = stack32.push((java.lang.Object)1.0d);
    java.lang.Object obj35 = stack32.peek();
    java.lang.Object obj36 = stack17.push(obj35);
    java.lang.Object obj37 = stack1.push(obj35);
    java.lang.Object obj38 = stack1.pop();
    java.lang.Object obj39 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj40 = stack1.push(obj39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 1.0d+ "'", obj36.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0d+ "'", obj37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0d+ "'", obj38.equals(1.0d));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    java.lang.Object obj47 = stack22.peek();
    java.lang.Object obj48 = stack22.peek();
    java.lang.Object obj49 = stack22.peek();
    java.lang.Object obj50 = stack22.peek();
    boolean b51 = stack22.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    java.lang.Object obj21 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    boolean b27 = stack23.empty();
    boolean b28 = stack23.empty();
    java.lang.Object obj29 = stack1.push((java.lang.Object)b28);
    java.lang.Object obj30 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 1.0d+ "'", obj21.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + false+ "'", obj29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + false+ "'", obj30.equals(false));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj23 = stack1.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b26 = stack25.empty();
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b29 = stack28.empty();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj32 = stack28.push((java.lang.Object)stack31);
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)100.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj39 = stack34.push((java.lang.Object)"hi!");
    java.lang.Object obj40 = stack31.push(obj39);
    java.lang.Object obj41 = stack25.push(obj39);
    java.lang.Object obj42 = stack22.push((java.lang.Object)stack25);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack46 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj48 = stack46.push((java.lang.Object)100.0f);
    java.lang.Object obj49 = stack46.peek();
    java.lang.Object obj51 = stack46.push((java.lang.Object)"hi!");
    java.lang.Object obj52 = stack46.pop();
    java.lang.Object obj54 = stack46.push((java.lang.Object)(short)100);
    java.lang.Object obj55 = stack44.push((java.lang.Object)(short)100);
    java.lang.Object obj56 = stack44.pop();
    boolean b57 = stack44.empty();
    java.lang.Object obj58 = stack25.push((java.lang.Object)b57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "hi!"+ "'", obj41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 100.0f+ "'", obj48.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "hi!"+ "'", obj51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "hi!"+ "'", obj52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + (short)100+ "'", obj54.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + (short)100+ "'", obj55.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + (short)100+ "'", obj56.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + true+ "'", obj58.equals(true));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack8.push((java.lang.Object)(short)100);
    boolean b20 = stack8.empty();
    java.lang.Object obj21 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj27 = stack23.peek();
    java.lang.Object obj28 = stack8.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack1.push((java.lang.Object)stack23);
    boolean b30 = stack23.empty();
    java.lang.Object obj31 = stack23.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (short)100+ "'", obj21.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    boolean b11 = stack1.empty();
    boolean b12 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack1.empty();
    java.lang.Object obj16 = stack1.peek();
    boolean b17 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj21 = stack19.push((java.lang.Object)100.0f);
    java.lang.Object obj22 = stack19.peek();
    java.lang.Object obj24 = stack19.push((java.lang.Object)"hi!");
    java.lang.Object obj25 = stack19.pop();
    boolean b26 = stack19.empty();
    java.lang.Object obj27 = stack19.peek();
    java.lang.Object obj28 = stack19.peek();
    java.lang.Object obj29 = stack19.peek();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj33 = stack31.push((java.lang.Object)10L);
    java.lang.Object obj34 = stack31.pop();
    boolean b35 = stack31.empty();
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj41 = stack39.push((java.lang.Object)100.0f);
    java.lang.Object obj42 = stack39.peek();
    java.lang.Object obj44 = stack39.push((java.lang.Object)"hi!");
    java.lang.Object obj45 = stack39.pop();
    java.lang.Object obj47 = stack39.push((java.lang.Object)(short)100);
    java.lang.Object obj48 = stack37.push((java.lang.Object)(short)100);
    boolean b49 = stack37.empty();
    java.lang.Object obj50 = stack37.peek();
    br.ufal.ic.test.mystack.Stack stack52 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj54 = stack52.push((java.lang.Object)10.0f);
    java.lang.Object obj55 = stack52.peek();
    java.lang.Object obj56 = stack52.peek();
    java.lang.Object obj57 = stack37.push((java.lang.Object)stack52);
    br.ufal.ic.test.mystack.Stack stack59 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj61 = stack59.push((java.lang.Object)10.0f);
    java.lang.Object obj62 = stack59.peek();
    java.lang.Object obj63 = stack59.pop();
    br.ufal.ic.test.mystack.Stack stack65 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b66 = stack65.empty();
    boolean b67 = stack65.empty();
    br.ufal.ic.test.mystack.Stack stack69 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b70 = stack69.empty();
    boolean b71 = stack69.empty();
    java.lang.Object obj72 = stack65.push((java.lang.Object)stack69);
    java.lang.Object obj73 = stack59.push((java.lang.Object)stack65);
    java.lang.Object obj74 = stack52.push(obj73);
    java.lang.Object obj75 = stack31.push((java.lang.Object)stack52);
    java.lang.Object obj76 = stack52.peek();
    java.lang.Object obj77 = stack52.peek();
    java.lang.Object obj78 = stack52.peek();
    java.lang.Object obj79 = stack19.push((java.lang.Object)stack52);
    java.lang.Object obj80 = stack1.push(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10L+ "'", obj33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10L+ "'", obj34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 100.0f+ "'", obj41.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "hi!"+ "'", obj44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "hi!"+ "'", obj45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + (short)100+ "'", obj47.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (short)100+ "'", obj48.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (short)100+ "'", obj50.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 10.0f+ "'", obj54.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + 10.0f+ "'", obj55.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 10.0f+ "'", obj56.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + 10.0f+ "'", obj61.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 10.0f+ "'", obj62.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 10.0f+ "'", obj63.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj10 = stack5.push((java.lang.Object)(-1L));
    java.lang.Object obj11 = stack5.peek();
    java.lang.Object obj12 = stack5.peek();
    java.lang.Object obj13 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1L)+ "'", obj10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (-1L)+ "'", obj11.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (-1L)+ "'", obj12.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (-1L)+ "'", obj13.equals((-1L)));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    boolean b12 = stack5.empty();
    java.lang.Object obj13 = stack5.peek();
    java.lang.Object obj14 = stack5.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj16 = stack1.peek();
    java.lang.Object obj17 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b20 = stack19.empty();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj23 = stack19.push((java.lang.Object)stack22);
    boolean b24 = stack19.empty();
    java.lang.Object obj25 = stack19.pop();
    java.lang.Object obj27 = stack19.push((java.lang.Object)10L);
    java.lang.Object obj28 = stack1.push((java.lang.Object)10L);
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj32 = stack30.push((java.lang.Object)10.0f);
    java.lang.Object obj33 = stack30.peek();
    boolean b34 = stack30.empty();
    java.lang.Object obj35 = stack30.pop();
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b38 = stack37.empty();
    java.lang.Object obj40 = stack37.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj44 = stack42.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack46 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj48 = stack46.push((java.lang.Object)100.0f);
    java.lang.Object obj49 = stack46.peek();
    java.lang.Object obj51 = stack46.push((java.lang.Object)"hi!");
    java.lang.Object obj52 = stack46.pop();
    java.lang.Object obj54 = stack46.push((java.lang.Object)(short)100);
    java.lang.Object obj55 = stack42.push((java.lang.Object)stack46);
    br.ufal.ic.test.mystack.Stack stack57 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj59 = stack57.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack61 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj63 = stack61.push((java.lang.Object)100.0f);
    java.lang.Object obj64 = stack61.peek();
    java.lang.Object obj66 = stack61.push((java.lang.Object)"hi!");
    java.lang.Object obj67 = stack61.pop();
    java.lang.Object obj69 = stack61.push((java.lang.Object)(short)100);
    java.lang.Object obj70 = stack57.push((java.lang.Object)stack61);
    java.lang.Object obj71 = stack46.push((java.lang.Object)stack57);
    boolean b72 = stack46.empty();
    java.lang.Object obj73 = new java.lang.Object();
    java.lang.Object obj74 = stack46.push(obj73);
    java.lang.Object obj75 = stack46.pop();
    java.lang.Object obj76 = stack37.push((java.lang.Object)stack46);
    br.ufal.ic.test.mystack.Stack stack78 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj80 = stack78.push((java.lang.Object)10.0f);
    boolean b81 = stack78.empty();
    java.lang.Object obj82 = stack78.pop();
    java.lang.Object obj83 = stack46.push(obj82);
    java.lang.Object obj84 = stack46.pop();
    boolean b85 = stack46.empty();
    java.lang.Object obj86 = stack30.push((java.lang.Object)stack46);
    java.lang.Object obj87 = stack1.push(obj86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10L+ "'", obj27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 10L+ "'", obj28.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + (byte)0+ "'", obj40.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 100.0f+ "'", obj48.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "hi!"+ "'", obj51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "hi!"+ "'", obj52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + (short)100+ "'", obj54.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + 100.0f+ "'", obj59.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 100.0f+ "'", obj63.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 100.0f+ "'", obj64.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "hi!"+ "'", obj66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "hi!"+ "'", obj67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + (short)100+ "'", obj69.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj80 + "' != '" + 10.0f+ "'", obj80.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj82 + "' != '" + 10.0f+ "'", obj82.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj83 + "' != '" + 10.0f+ "'", obj83.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj84 + "' != '" + 10.0f+ "'", obj84.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj87);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    boolean b25 = stack16.empty();
    java.lang.Object obj26 = stack16.peek();
    java.lang.Object obj27 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj28 = stack16.pop();
    boolean b29 = stack16.empty();
    boolean b30 = stack16.empty();
    boolean b31 = stack16.empty();
    java.lang.Object obj32 = stack16.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)-1);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1.0d));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1.0d)+ "'", obj3.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1.0d)+ "'", obj4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    boolean b6 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj14 = stack12.push((java.lang.Object)100.0f);
    java.lang.Object obj15 = stack12.peek();
    java.lang.Object obj17 = stack12.push((java.lang.Object)"hi!");
    java.lang.Object obj18 = stack12.pop();
    java.lang.Object obj20 = stack12.push((java.lang.Object)(short)100);
    java.lang.Object obj21 = stack8.push((java.lang.Object)stack12);
    boolean b22 = stack8.empty();
    java.lang.Object obj23 = stack8.peek();
    boolean b24 = stack8.empty();
    java.lang.Object obj25 = stack1.push((java.lang.Object)stack8);
    java.lang.Object obj26 = stack8.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 100.0f+ "'", obj15.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    java.lang.Object obj11 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj15 = stack13.push((java.lang.Object)100.0f);
    java.lang.Object obj16 = stack13.peek();
    java.lang.Object obj18 = stack13.push((java.lang.Object)"hi!");
    java.lang.Object obj19 = stack13.pop();
    boolean b20 = stack13.empty();
    java.lang.Object obj21 = stack13.peek();
    java.lang.Object obj22 = stack13.pop();
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b25 = stack24.empty();
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj28 = stack24.push((java.lang.Object)stack27);
    java.lang.Object obj29 = stack13.push(obj28);
    java.lang.Object obj30 = stack1.push(obj29);
    java.lang.Object obj31 = stack1.pop();
    boolean b32 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 100.0f+ "'", obj15.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 100.0f+ "'", obj16.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "hi!"+ "'", obj19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b10 = stack9.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack15.push(obj23);
    java.lang.Object obj25 = stack9.push(obj23);
    java.lang.Object obj26 = stack1.push((java.lang.Object)stack9);
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj30 = stack28.push((java.lang.Object)100.0f);
    java.lang.Object obj31 = stack28.peek();
    java.lang.Object obj33 = stack28.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b36 = stack35.empty();
    java.lang.Object obj37 = stack28.push((java.lang.Object)stack35);
    boolean b38 = stack35.empty();
    java.lang.Object obj39 = stack9.push((java.lang.Object)b38);
    java.lang.Object obj41 = stack9.push((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + true+ "'", obj39.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "hi!"+ "'", obj41.equals("hi!"));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack8.push((java.lang.Object)(short)100);
    java.lang.Object obj20 = stack8.pop();
    boolean b21 = stack8.empty();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj28 = stack23.push((java.lang.Object)"hi!");
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj31 = stack23.push((java.lang.Object)(short)100);
    boolean b32 = stack23.empty();
    java.lang.Object obj33 = stack23.peek();
    java.lang.Object obj34 = stack8.push((java.lang.Object)stack23);
    java.lang.Object obj35 = stack23.pop();
    boolean b36 = stack23.empty();
    java.lang.Object obj37 = stack1.push((java.lang.Object)stack23);
    boolean b38 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1.0d+ "'", obj4.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0d+ "'", obj5.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0d+ "'", obj6.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "hi!"+ "'", obj29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short)100+ "'", obj31.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj53 = stack51.push((java.lang.Object)100.0f);
    java.lang.Object obj54 = stack51.peek();
    java.lang.Object obj56 = stack51.push((java.lang.Object)"hi!");
    java.lang.Object obj57 = stack51.pop();
    java.lang.Object obj59 = stack51.push((java.lang.Object)(short)100);
    java.lang.Object obj60 = stack47.push((java.lang.Object)stack51);
    br.ufal.ic.test.mystack.Stack stack62 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj64 = stack62.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack66 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj68 = stack66.push((java.lang.Object)100.0f);
    java.lang.Object obj69 = stack66.peek();
    java.lang.Object obj71 = stack66.push((java.lang.Object)"hi!");
    java.lang.Object obj72 = stack66.pop();
    java.lang.Object obj74 = stack66.push((java.lang.Object)(short)100);
    java.lang.Object obj75 = stack62.push((java.lang.Object)stack66);
    java.lang.Object obj76 = stack51.push((java.lang.Object)stack62);
    boolean b77 = stack51.empty();
    java.lang.Object obj78 = new java.lang.Object();
    java.lang.Object obj79 = stack51.push(obj78);
    br.ufal.ic.test.mystack.Stack stack81 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj83 = stack81.push((java.lang.Object)1.0d);
    java.lang.Object obj84 = stack51.push(obj83);
    boolean b85 = stack51.empty();
    java.lang.Object obj86 = stack22.push((java.lang.Object)b85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 100.0f+ "'", obj53.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 100.0f+ "'", obj54.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "hi!"+ "'", obj56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "hi!"+ "'", obj57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + (short)100+ "'", obj59.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 100.0f+ "'", obj64.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + 100.0f+ "'", obj68.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 100.0f+ "'", obj69.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + "hi!"+ "'", obj71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + "hi!"+ "'", obj72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + (short)100+ "'", obj74.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj83 + "' != '" + 1.0d+ "'", obj83.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj84 + "' != '" + 1.0d+ "'", obj84.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj86 + "' != '" + false+ "'", obj86.equals(false));

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)1);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b4 = stack3.empty();
    boolean b5 = stack3.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    java.lang.Object obj10 = stack3.push((java.lang.Object)stack7);
    java.lang.Object obj12 = stack7.push((java.lang.Object)false);
    boolean b13 = stack7.empty();
    java.lang.Object obj14 = stack7.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack7);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stack7.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + false+ "'", obj12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + false+ "'", obj14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj11 = stack9.push((java.lang.Object)10L);
    java.lang.Object obj12 = stack9.pop();
    boolean b13 = stack9.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    java.lang.Object obj20 = stack17.peek();
    java.lang.Object obj22 = stack17.push((java.lang.Object)"hi!");
    java.lang.Object obj23 = stack17.pop();
    java.lang.Object obj25 = stack17.push((java.lang.Object)(short)100);
    java.lang.Object obj26 = stack15.push((java.lang.Object)(short)100);
    boolean b27 = stack15.empty();
    java.lang.Object obj28 = stack15.peek();
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj32 = stack30.push((java.lang.Object)10.0f);
    java.lang.Object obj33 = stack30.peek();
    java.lang.Object obj34 = stack30.peek();
    java.lang.Object obj35 = stack15.push((java.lang.Object)stack30);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj39 = stack37.push((java.lang.Object)10.0f);
    java.lang.Object obj40 = stack37.peek();
    java.lang.Object obj41 = stack37.pop();
    br.ufal.ic.test.mystack.Stack stack43 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b44 = stack43.empty();
    boolean b45 = stack43.empty();
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b48 = stack47.empty();
    boolean b49 = stack47.empty();
    java.lang.Object obj50 = stack43.push((java.lang.Object)stack47);
    java.lang.Object obj51 = stack37.push((java.lang.Object)stack43);
    java.lang.Object obj52 = stack30.push(obj51);
    java.lang.Object obj53 = stack9.push((java.lang.Object)stack30);
    java.lang.Object obj54 = stack30.peek();
    java.lang.Object obj55 = stack30.peek();
    java.lang.Object obj56 = stack30.peek();
    java.lang.Object obj57 = stack30.peek();
    java.lang.Object obj58 = stack30.pop();
    java.lang.Object obj59 = stack1.push((java.lang.Object)stack30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10L+ "'", obj11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10L+ "'", obj12.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (short)100+ "'", obj25.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10.0f+ "'", obj34.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 10.0f+ "'", obj39.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 10.0f+ "'", obj40.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 10.0f+ "'", obj41.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack1.push(obj16);
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj21 = stack19.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj29 = stack27.push((java.lang.Object)100.0f);
    java.lang.Object obj30 = stack27.peek();
    java.lang.Object obj32 = stack27.push((java.lang.Object)"hi!");
    java.lang.Object obj33 = stack27.pop();
    java.lang.Object obj35 = stack27.push((java.lang.Object)(short)100);
    java.lang.Object obj36 = stack23.push((java.lang.Object)stack27);
    br.ufal.ic.test.mystack.Stack stack38 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj40 = stack38.push((java.lang.Object)1.0d);
    java.lang.Object obj41 = stack38.peek();
    java.lang.Object obj42 = stack23.push(obj41);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj45 = stack23.push((java.lang.Object)stack44);
    java.lang.Object obj46 = stack19.push((java.lang.Object)stack23);
    java.lang.Object obj47 = stack1.push((java.lang.Object)stack23);
    boolean b48 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 1.0d+ "'", obj21.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0d+ "'", obj40.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0d+ "'", obj41.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0d+ "'", obj42.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj33 = stack31.push((java.lang.Object)1.0d);
    java.lang.Object obj34 = stack31.peek();
    java.lang.Object obj35 = stack16.push(obj34);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj38 = stack16.push((java.lang.Object)stack37);
    java.lang.Object obj39 = stack1.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b42 = stack41.empty();
    java.lang.Object obj44 = stack41.push((java.lang.Object)(byte)0);
    java.lang.Object obj45 = stack16.push(obj44);
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b48 = stack47.empty();
    boolean b49 = stack47.empty();
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b52 = stack51.empty();
    boolean b53 = stack51.empty();
    java.lang.Object obj54 = stack47.push((java.lang.Object)stack51);
    java.lang.Object obj56 = stack51.push((java.lang.Object)false);
    java.lang.Object obj57 = stack16.push(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 1.0d+ "'", obj33.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + (byte)0+ "'", obj44.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + (byte)0+ "'", obj45.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + false+ "'", obj56.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + false+ "'", obj57.equals(false));

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack1.peek();
    boolean b47 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b6 = stack5.empty();
    java.lang.Object obj7 = stack1.push((java.lang.Object)b6);
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)10.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj13 = stack9.peek();
    java.lang.Object obj14 = stack9.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack9);
    java.lang.Object obj16 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (short)1+ "'", obj3.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + true+ "'", obj7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10.0f+ "'", obj11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0f+ "'", obj12.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10.0f+ "'", obj13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10.0f+ "'", obj14.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj14 = stack12.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    java.lang.Object obj25 = stack12.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj29 = stack27.push((java.lang.Object)(-1));
    java.lang.Object obj30 = stack27.peek();
    boolean b31 = stack27.empty();
    java.lang.Object obj32 = stack27.peek();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)100.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj39 = stack34.push((java.lang.Object)"hi!");
    java.lang.Object obj40 = stack34.pop();
    java.lang.Object obj42 = stack34.push((java.lang.Object)(short)100);
    boolean b43 = stack34.empty();
    java.lang.Object obj44 = stack34.peek();
    br.ufal.ic.test.mystack.Stack stack46 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj48 = stack46.push((java.lang.Object)100.0f);
    java.lang.Object obj49 = stack46.peek();
    java.lang.Object obj51 = stack46.push((java.lang.Object)"hi!");
    java.lang.Object obj52 = stack46.pop();
    boolean b53 = stack46.empty();
    java.lang.Object obj54 = stack46.peek();
    java.lang.Object obj55 = stack46.pop();
    br.ufal.ic.test.mystack.Stack stack57 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b58 = stack57.empty();
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj61 = stack57.push((java.lang.Object)stack60);
    java.lang.Object obj62 = stack46.push(obj61);
    java.lang.Object obj63 = stack34.push(obj62);
    java.lang.Object obj64 = stack27.push((java.lang.Object)stack34);
    java.lang.Object obj65 = stack12.push((java.lang.Object)stack34);
    java.lang.Object obj66 = stack1.push(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (-1)+ "'", obj29.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (-1)+ "'", obj30.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (-1)+ "'", obj32.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + (short)100+ "'", obj42.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + (short)100+ "'", obj44.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 100.0f+ "'", obj48.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "hi!"+ "'", obj51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "hi!"+ "'", obj52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 100.0f+ "'", obj54.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + 100.0f+ "'", obj55.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj66);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    boolean b4 = stack1.empty();
    java.lang.Object obj5 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10L+ "'", obj5.equals(10L));

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack1.empty();
    java.lang.Object obj16 = stack1.peek();
    boolean b17 = stack1.empty();
    java.lang.Object obj18 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    boolean b6 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj14 = stack12.push((java.lang.Object)100.0f);
    java.lang.Object obj15 = stack12.peek();
    java.lang.Object obj17 = stack12.push((java.lang.Object)"hi!");
    java.lang.Object obj18 = stack12.pop();
    java.lang.Object obj20 = stack12.push((java.lang.Object)(short)100);
    java.lang.Object obj21 = stack8.push((java.lang.Object)stack12);
    boolean b22 = stack8.empty();
    java.lang.Object obj23 = stack8.peek();
    boolean b24 = stack8.empty();
    java.lang.Object obj25 = stack1.push((java.lang.Object)stack8);
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj29 = stack27.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj33 = stack31.push((java.lang.Object)100.0f);
    java.lang.Object obj34 = stack31.peek();
    java.lang.Object obj36 = stack31.push((java.lang.Object)"hi!");
    java.lang.Object obj37 = stack31.pop();
    java.lang.Object obj39 = stack31.push((java.lang.Object)(short)100);
    java.lang.Object obj40 = stack27.push((java.lang.Object)stack31);
    boolean b41 = stack31.empty();
    java.lang.Object obj43 = stack31.push((java.lang.Object)10L);
    java.lang.Object obj44 = stack31.pop();
    br.ufal.ic.test.mystack.Stack stack46 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj48 = stack46.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b51 = stack50.empty();
    java.lang.Object obj52 = stack46.push((java.lang.Object)b51);
    br.ufal.ic.test.mystack.Stack stack54 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj56 = stack54.push((java.lang.Object)10.0f);
    java.lang.Object obj57 = stack54.peek();
    java.lang.Object obj58 = stack54.peek();
    java.lang.Object obj59 = stack54.pop();
    java.lang.Object obj60 = stack46.push((java.lang.Object)stack54);
    java.lang.Object obj61 = stack31.push(obj60);
    java.lang.Object obj62 = stack31.pop();
    java.lang.Object obj63 = stack1.push((java.lang.Object)stack31);
    br.ufal.ic.test.mystack.Stack stack65 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj67 = stack65.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack69 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj71 = stack69.push((java.lang.Object)100.0f);
    java.lang.Object obj72 = stack69.peek();
    java.lang.Object obj74 = stack69.push((java.lang.Object)"hi!");
    java.lang.Object obj75 = stack69.pop();
    java.lang.Object obj77 = stack69.push((java.lang.Object)(short)100);
    java.lang.Object obj78 = stack65.push((java.lang.Object)stack69);
    br.ufal.ic.test.mystack.Stack stack80 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj82 = stack80.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack84 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj86 = stack84.push((java.lang.Object)100.0f);
    java.lang.Object obj87 = stack84.peek();
    java.lang.Object obj89 = stack84.push((java.lang.Object)"hi!");
    java.lang.Object obj90 = stack84.pop();
    java.lang.Object obj92 = stack84.push((java.lang.Object)(short)100);
    java.lang.Object obj93 = stack80.push((java.lang.Object)stack84);
    java.lang.Object obj94 = stack69.push((java.lang.Object)stack80);
    boolean b95 = stack69.empty();
    java.lang.Object obj96 = new java.lang.Object();
    java.lang.Object obj97 = stack69.push(obj96);
    java.lang.Object obj98 = stack1.push((java.lang.Object)stack69);
    boolean b99 = stack69.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 100.0f+ "'", obj15.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 100.0f+ "'", obj33.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 100.0f+ "'", obj34.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "hi!"+ "'", obj36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "hi!"+ "'", obj37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + (short)100+ "'", obj39.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10L+ "'", obj43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10L+ "'", obj44.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (short)1+ "'", obj48.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + true+ "'", obj52.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 10.0f+ "'", obj56.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 10.0f+ "'", obj57.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 10.0f+ "'", obj58.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + 10.0f+ "'", obj59.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + 100.0f+ "'", obj67.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + 100.0f+ "'", obj71.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + 100.0f+ "'", obj72.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "hi!"+ "'", obj74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "hi!"+ "'", obj75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj77 + "' != '" + (short)100+ "'", obj77.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj82 + "' != '" + 100.0f+ "'", obj82.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj86 + "' != '" + 100.0f+ "'", obj86.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj87 + "' != '" + 100.0f+ "'", obj87.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj89 + "' != '" + "hi!"+ "'", obj89.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj90 + "' != '" + "hi!"+ "'", obj90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj92 + "' != '" + (short)100+ "'", obj92.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack((int)(short)1);
    java.lang.Object obj33 = stack16.push((java.lang.Object)(short)1);
    java.lang.Object obj34 = stack16.pop();
    java.lang.Object obj35 = stack16.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)1+ "'", obj33.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)1+ "'", obj34.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.peek();
    boolean b8 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1)+ "'", obj7.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack8.push((java.lang.Object)(short)100);
    boolean b20 = stack8.empty();
    java.lang.Object obj21 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj27 = stack23.peek();
    java.lang.Object obj28 = stack8.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack1.push((java.lang.Object)stack23);
    boolean b30 = stack23.empty();
    boolean b31 = stack23.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (short)100+ "'", obj21.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    boolean b7 = stack1.empty();
    boolean b8 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack((int)(short)0);
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b16 = stack15.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj19 = stack15.push((java.lang.Object)stack18);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack18.push(obj26);
    java.lang.Object obj28 = stack12.push(obj26);
    boolean b29 = stack12.empty();
    java.lang.Object obj30 = stack10.push((java.lang.Object)stack12);
    java.lang.Object obj31 = stack1.push((java.lang.Object)stack12);
    boolean b32 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack8.push((java.lang.Object)(short)100);
    java.lang.Object obj20 = stack8.pop();
    boolean b21 = stack8.empty();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj28 = stack23.push((java.lang.Object)"hi!");
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj31 = stack23.push((java.lang.Object)(short)100);
    boolean b32 = stack23.empty();
    java.lang.Object obj33 = stack23.peek();
    java.lang.Object obj34 = stack8.push((java.lang.Object)stack23);
    java.lang.Object obj35 = stack23.pop();
    boolean b36 = stack23.empty();
    java.lang.Object obj37 = stack1.push((java.lang.Object)stack23);
    java.lang.Object obj38 = stack23.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1.0d+ "'", obj4.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0d+ "'", obj5.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0d+ "'", obj6.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "hi!"+ "'", obj29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short)100+ "'", obj31.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 100.0f+ "'", obj38.equals(100.0f));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj22 = stack20.push((java.lang.Object)10L);
    java.lang.Object obj23 = stack20.pop();
    boolean b24 = stack20.empty();
    boolean b25 = stack20.empty();
    java.lang.Object obj26 = stack5.push((java.lang.Object)b25);
    java.lang.Object obj27 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 10L+ "'", obj22.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 10L+ "'", obj23.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + true+ "'", obj26.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + true+ "'", obj27.equals(true));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    boolean b16 = stack5.empty();
    java.lang.Object obj17 = stack5.pop();
    boolean b18 = stack5.empty();
    boolean b19 = stack5.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b6 = stack5.empty();
    java.lang.Object obj7 = stack1.push((java.lang.Object)b6);
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (short)1+ "'", obj3.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + true+ "'", obj7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + true+ "'", obj9.equals(true));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b7 = stack6.empty();
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj10 = stack6.push((java.lang.Object)stack9);
    java.lang.Object obj11 = stack6.pop();
    java.lang.Object obj12 = stack1.push((java.lang.Object)stack6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    boolean b16 = stack5.empty();
    java.lang.Object obj17 = stack5.pop();
    java.lang.Object obj18 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj10 = stack5.push((java.lang.Object)false);
    boolean b11 = stack5.empty();
    boolean b12 = stack5.empty();
    boolean b13 = stack5.empty();
    java.lang.Object obj14 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + false+ "'", obj10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + false+ "'", obj14.equals(false));

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)'a');
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)-1);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b11 = stack10.empty();
    java.lang.Object obj12 = stack3.push((java.lang.Object)stack10);
    java.lang.Object obj13 = stack3.pop();
    java.lang.Object obj14 = stack1.push(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)100.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj38 = stack5.push(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 100.0f+ "'", obj38.equals(100.0f));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)100.0f);
    java.lang.Object obj9 = stack6.peek();
    java.lang.Object obj11 = stack6.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b14 = stack13.empty();
    java.lang.Object obj15 = stack6.push((java.lang.Object)stack13);
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack6);
    boolean b17 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj10 = stack5.push((java.lang.Object)false);
    java.lang.Object obj11 = stack5.peek();
    boolean b12 = stack5.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + false+ "'", obj10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + false+ "'", obj11.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    boolean b4 = stack1.empty();
    java.lang.Object obj5 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)stack3);
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    boolean b16 = stack14.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    java.lang.Object obj21 = stack14.push((java.lang.Object)stack18);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b24 = stack23.empty();
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj27 = stack23.push((java.lang.Object)stack26);
    java.lang.Object obj28 = stack14.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj30 = stack3.push((java.lang.Object)stack23);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj31 = stack23.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)100.0f);
    java.lang.Object obj10 = stack7.peek();
    java.lang.Object obj12 = stack7.push((java.lang.Object)"hi!");
    java.lang.Object obj13 = stack7.pop();
    java.lang.Object obj15 = stack7.push((java.lang.Object)(short)100);
    java.lang.Object obj16 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj17 = stack5.pop();
    boolean b18 = stack5.empty();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    boolean b29 = stack20.empty();
    java.lang.Object obj30 = stack20.peek();
    java.lang.Object obj31 = stack5.push((java.lang.Object)stack20);
    java.lang.Object obj32 = stack20.pop();
    java.lang.Object obj33 = stack20.peek();
    java.lang.Object obj34 = stack1.push((java.lang.Object)stack20);
    br.ufal.ic.test.mystack.Stack stack36 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj37 = stack1.push((java.lang.Object)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + "hi!"+ "'", obj12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "hi!"+ "'", obj13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (short)100+ "'", obj16.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 100.0f+ "'", obj33.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + (byte)0+ "'", obj37.equals((byte)0));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.pop();
    java.lang.Object obj27 = stack1.push(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)stack3);
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    boolean b16 = stack14.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    java.lang.Object obj21 = stack14.push((java.lang.Object)stack18);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b24 = stack23.empty();
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj27 = stack23.push((java.lang.Object)stack26);
    java.lang.Object obj28 = stack14.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj30 = stack3.push((java.lang.Object)stack23);
    java.lang.Object obj31 = stack3.pop();
    java.lang.Object obj32 = stack3.peek();
    java.lang.Object obj33 = stack3.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.peek();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)10.0f);
    java.lang.Object obj11 = stack8.peek();
    boolean b12 = stack8.empty();
    boolean b13 = stack8.empty();
    java.lang.Object obj14 = stack1.push((java.lang.Object)b13);
    boolean b15 = stack1.empty();
    java.lang.Object obj16 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10.0f+ "'", obj11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + false+ "'", obj14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + false+ "'", obj16.equals(false));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b6 = stack5.empty();
    java.lang.Object obj8 = stack5.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj16 = stack14.push((java.lang.Object)100.0f);
    java.lang.Object obj17 = stack14.peek();
    java.lang.Object obj19 = stack14.push((java.lang.Object)"hi!");
    java.lang.Object obj20 = stack14.pop();
    java.lang.Object obj22 = stack14.push((java.lang.Object)(short)100);
    java.lang.Object obj23 = stack10.push((java.lang.Object)stack14);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)100.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj34 = stack29.push((java.lang.Object)"hi!");
    java.lang.Object obj35 = stack29.pop();
    java.lang.Object obj37 = stack29.push((java.lang.Object)(short)100);
    java.lang.Object obj38 = stack25.push((java.lang.Object)stack29);
    java.lang.Object obj39 = stack14.push((java.lang.Object)stack25);
    boolean b40 = stack14.empty();
    java.lang.Object obj41 = new java.lang.Object();
    java.lang.Object obj42 = stack14.push(obj41);
    java.lang.Object obj43 = stack14.pop();
    java.lang.Object obj44 = stack5.push((java.lang.Object)stack14);
    java.lang.Object obj45 = stack5.peek();
    java.lang.Object obj46 = stack1.push(obj45);
    java.lang.Object obj47 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + (byte)0+ "'", obj8.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 100.0f+ "'", obj16.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 100.0f+ "'", obj17.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "hi!"+ "'", obj19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "hi!"+ "'", obj20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (short)100+ "'", obj22.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "hi!"+ "'", obj34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "hi!"+ "'", obj35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + (short)100+ "'", obj37.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    java.lang.Object obj34 = stack5.peek();
    java.lang.Object obj35 = stack5.pop();
    java.lang.Object obj36 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b25 = stack24.empty();
    java.lang.Object obj26 = stack20.push((java.lang.Object)b25);
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj30 = stack28.push((java.lang.Object)10.0f);
    java.lang.Object obj31 = stack28.peek();
    java.lang.Object obj32 = stack28.peek();
    java.lang.Object obj33 = stack28.pop();
    java.lang.Object obj34 = stack20.push((java.lang.Object)stack28);
    java.lang.Object obj35 = stack5.push(obj34);
    java.lang.Object obj36 = stack5.pop();
    boolean b37 = stack5.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj41 = stack39.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack43 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b44 = stack43.empty();
    java.lang.Object obj46 = stack43.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack48 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj50 = stack48.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack52 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj54 = stack52.push((java.lang.Object)100.0f);
    java.lang.Object obj55 = stack52.peek();
    java.lang.Object obj57 = stack52.push((java.lang.Object)"hi!");
    java.lang.Object obj58 = stack52.pop();
    java.lang.Object obj60 = stack52.push((java.lang.Object)(short)100);
    java.lang.Object obj61 = stack48.push((java.lang.Object)stack52);
    br.ufal.ic.test.mystack.Stack stack63 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj65 = stack63.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack67 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj69 = stack67.push((java.lang.Object)100.0f);
    java.lang.Object obj70 = stack67.peek();
    java.lang.Object obj72 = stack67.push((java.lang.Object)"hi!");
    java.lang.Object obj73 = stack67.pop();
    java.lang.Object obj75 = stack67.push((java.lang.Object)(short)100);
    java.lang.Object obj76 = stack63.push((java.lang.Object)stack67);
    java.lang.Object obj77 = stack52.push((java.lang.Object)stack63);
    boolean b78 = stack52.empty();
    java.lang.Object obj79 = new java.lang.Object();
    java.lang.Object obj80 = stack52.push(obj79);
    java.lang.Object obj81 = stack52.pop();
    java.lang.Object obj82 = stack43.push((java.lang.Object)stack52);
    java.lang.Object obj83 = stack43.peek();
    java.lang.Object obj84 = stack39.push(obj83);
    java.lang.Object obj85 = stack5.push(obj84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (short)1+ "'", obj22.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + true+ "'", obj26.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 10.0f+ "'", obj30.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0d+ "'", obj41.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + (byte)0+ "'", obj46.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 100.0f+ "'", obj50.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 100.0f+ "'", obj54.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + 100.0f+ "'", obj55.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "hi!"+ "'", obj57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "hi!"+ "'", obj58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + (short)100+ "'", obj60.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 100.0f+ "'", obj65.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 100.0f+ "'", obj69.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 100.0f+ "'", obj70.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + "hi!"+ "'", obj72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj73 + "' != '" + "hi!"+ "'", obj73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + (short)100+ "'", obj75.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj85);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj10 = stack8.push((java.lang.Object)10L);
    java.lang.Object obj11 = stack8.pop();
    boolean b12 = stack8.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    java.lang.Object obj25 = stack14.push((java.lang.Object)(short)100);
    boolean b26 = stack14.empty();
    java.lang.Object obj27 = stack14.peek();
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.peek();
    java.lang.Object obj34 = stack14.push((java.lang.Object)stack29);
    br.ufal.ic.test.mystack.Stack stack36 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj38 = stack36.push((java.lang.Object)10.0f);
    java.lang.Object obj39 = stack36.peek();
    java.lang.Object obj40 = stack36.pop();
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b43 = stack42.empty();
    boolean b44 = stack42.empty();
    br.ufal.ic.test.mystack.Stack stack46 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b47 = stack46.empty();
    boolean b48 = stack46.empty();
    java.lang.Object obj49 = stack42.push((java.lang.Object)stack46);
    java.lang.Object obj50 = stack36.push((java.lang.Object)stack42);
    java.lang.Object obj51 = stack29.push(obj50);
    java.lang.Object obj52 = stack8.push((java.lang.Object)stack29);
    java.lang.Object obj53 = stack29.peek();
    java.lang.Object obj54 = stack29.peek();
    java.lang.Object obj55 = stack29.pop();
    java.lang.Object obj56 = stack29.pop();
    java.lang.Object obj57 = stack1.push((java.lang.Object)stack29);
    br.ufal.ic.test.mystack.Stack stack59 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b60 = stack59.empty();
    boolean b61 = stack59.empty();
    br.ufal.ic.test.mystack.Stack stack63 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b64 = stack63.empty();
    boolean b65 = stack63.empty();
    java.lang.Object obj66 = stack59.push((java.lang.Object)stack63);
    br.ufal.ic.test.mystack.Stack stack68 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b69 = stack68.empty();
    br.ufal.ic.test.mystack.Stack stack71 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj72 = stack68.push((java.lang.Object)stack71);
    java.lang.Object obj73 = stack59.push((java.lang.Object)stack68);
    java.lang.Object obj74 = stack68.pop();
    java.lang.Object obj75 = stack1.push(obj74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10L+ "'", obj10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10L+ "'", obj11.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (short)100+ "'", obj25.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + (short)100+ "'", obj27.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 10.0f+ "'", obj38.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 10.0f+ "'", obj39.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 10.0f+ "'", obj40.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 10.0f+ "'", obj56.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = new java.lang.Object();
    java.lang.Object obj33 = stack5.push(obj32);
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj37 = stack35.push((java.lang.Object)1.0d);
    java.lang.Object obj38 = stack5.push(obj37);
    java.lang.Object obj39 = stack5.pop();
    java.lang.Object obj40 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0d+ "'", obj37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0d+ "'", obj38.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 1.0d+ "'", obj39.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b9 = stack8.empty();
    java.lang.Object obj10 = stack1.push((java.lang.Object)stack8);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stack8.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack18.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack18.pop();
    boolean b31 = stack18.empty();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj35 = stack33.push((java.lang.Object)100.0f);
    java.lang.Object obj36 = stack33.peek();
    java.lang.Object obj38 = stack33.push((java.lang.Object)"hi!");
    java.lang.Object obj39 = stack33.pop();
    java.lang.Object obj41 = stack33.push((java.lang.Object)(short)100);
    boolean b42 = stack33.empty();
    java.lang.Object obj43 = stack33.peek();
    java.lang.Object obj44 = stack18.push((java.lang.Object)stack33);
    boolean b45 = stack33.empty();
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj53 = stack51.push((java.lang.Object)100.0f);
    java.lang.Object obj54 = stack51.peek();
    java.lang.Object obj56 = stack51.push((java.lang.Object)"hi!");
    java.lang.Object obj57 = stack51.pop();
    java.lang.Object obj59 = stack51.push((java.lang.Object)(short)100);
    java.lang.Object obj60 = stack47.push((java.lang.Object)stack51);
    br.ufal.ic.test.mystack.Stack stack62 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj64 = stack62.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack66 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj68 = stack66.push((java.lang.Object)100.0f);
    java.lang.Object obj69 = stack66.peek();
    java.lang.Object obj71 = stack66.push((java.lang.Object)"hi!");
    java.lang.Object obj72 = stack66.pop();
    java.lang.Object obj74 = stack66.push((java.lang.Object)(short)100);
    java.lang.Object obj75 = stack62.push((java.lang.Object)stack66);
    java.lang.Object obj76 = stack51.push((java.lang.Object)stack62);
    boolean b77 = stack51.empty();
    java.lang.Object obj78 = stack51.pop();
    java.lang.Object obj79 = stack33.push((java.lang.Object)stack51);
    java.lang.Object obj80 = stack1.push((java.lang.Object)stack51);
    java.lang.Object obj81 = stack1.peek();
    java.lang.Object obj82 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 100.0f+ "'", obj35.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "hi!"+ "'", obj38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + (short)100+ "'", obj41.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + (short)100+ "'", obj43.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 100.0f+ "'", obj53.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 100.0f+ "'", obj54.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "hi!"+ "'", obj56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "hi!"+ "'", obj57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + (short)100+ "'", obj59.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 100.0f+ "'", obj64.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + 100.0f+ "'", obj68.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 100.0f+ "'", obj69.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + "hi!"+ "'", obj71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + "hi!"+ "'", obj72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + (short)100+ "'", obj74.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj82);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    java.lang.Object obj17 = stack1.pop();
    java.lang.Object obj18 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj14 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.pop();
    boolean b19 = stack5.empty();
    java.lang.Object obj20 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)(-1));
    java.lang.Object obj10 = stack1.push(obj9);
    boolean b11 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (-1)+ "'", obj9.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1)+ "'", obj10.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    boolean b7 = stack1.empty();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    boolean b17 = stack16.empty();
    java.lang.Object obj18 = stack1.push((java.lang.Object)b17);
    java.lang.Object obj19 = stack1.peek();
    java.lang.Object obj20 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + true+ "'", obj18.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + true+ "'", obj19.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + true+ "'", obj20.equals(true));

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)(-1));
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push(obj20);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b24 = stack23.empty();
    boolean b25 = stack23.empty();
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)100.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj34 = stack29.push((java.lang.Object)"hi!");
    java.lang.Object obj35 = stack29.pop();
    java.lang.Object obj37 = stack29.push((java.lang.Object)(short)100);
    java.lang.Object obj38 = stack27.push((java.lang.Object)(short)100);
    java.lang.Object obj39 = stack27.pop();
    boolean b40 = stack27.empty();
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj44 = stack42.push((java.lang.Object)100.0f);
    java.lang.Object obj45 = stack42.peek();
    java.lang.Object obj47 = stack42.push((java.lang.Object)"hi!");
    java.lang.Object obj48 = stack42.pop();
    java.lang.Object obj50 = stack42.push((java.lang.Object)(short)100);
    boolean b51 = stack42.empty();
    java.lang.Object obj52 = stack42.peek();
    java.lang.Object obj53 = stack27.push((java.lang.Object)stack42);
    java.lang.Object obj54 = stack42.pop();
    java.lang.Object obj55 = stack42.peek();
    java.lang.Object obj56 = stack23.push((java.lang.Object)stack42);
    java.lang.Object obj57 = stack23.peek();
    java.lang.Object obj58 = stack1.push((java.lang.Object)stack23);
    java.lang.Object obj59 = stack23.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (-1)+ "'", obj18.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (-1)+ "'", obj19.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (-1)+ "'", obj20.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (-1)+ "'", obj21.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "hi!"+ "'", obj34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "hi!"+ "'", obj35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + (short)100+ "'", obj37.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + (short)100+ "'", obj38.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + (short)100+ "'", obj39.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 100.0f+ "'", obj45.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "hi!"+ "'", obj47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "hi!"+ "'", obj48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (short)100+ "'", obj50.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + (short)100+ "'", obj52.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + (short)100+ "'", obj54.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + 100.0f+ "'", obj55.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    boolean b7 = stack1.empty();
    java.lang.Object obj8 = stack1.peek();
    java.lang.Object obj9 = stack1.pop();
    java.lang.Object obj10 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)(-1));
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj9 = stack5.peek();
    java.lang.Object obj10 = stack1.push(obj9);
    boolean b11 = stack1.empty();
    boolean b12 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b15 = stack14.empty();
    java.lang.Object obj16 = stack1.push((java.lang.Object)b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1)+ "'", obj7.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + (-1)+ "'", obj8.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (-1)+ "'", obj9.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1)+ "'", obj10.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + true+ "'", obj16.equals(true));

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)(-1));
    java.lang.Object obj8 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b18 = stack17.empty();
    java.lang.Object obj19 = stack10.push((java.lang.Object)stack17);
    java.lang.Object obj20 = stack5.push((java.lang.Object)stack10);
    java.lang.Object obj21 = stack5.peek();
    java.lang.Object obj22 = stack5.peek();
    java.lang.Object obj23 = stack1.push((java.lang.Object)stack5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1)+ "'", obj7.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + (-1)+ "'", obj8.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    java.lang.Object obj47 = stack22.peek();
    java.lang.Object obj48 = stack22.peek();
    java.lang.Object obj49 = stack22.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)10.0f);
    java.lang.Object obj8 = stack5.peek();
    boolean b9 = stack5.empty();
    java.lang.Object obj10 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack5.push((java.lang.Object)stack12);
    java.lang.Object obj18 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj19 = stack1.peek();
    java.lang.Object obj20 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj10 = stack5.push((java.lang.Object)(-1L));
    java.lang.Object obj11 = stack5.peek();
    java.lang.Object obj12 = stack5.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = stack5.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1L)+ "'", obj10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (-1L)+ "'", obj11.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (-1L)+ "'", obj12.equals((-1L)));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    boolean b25 = stack16.empty();
    java.lang.Object obj26 = stack16.peek();
    java.lang.Object obj27 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj28 = stack16.pop();
    boolean b29 = stack16.empty();
    java.lang.Object obj30 = stack16.peek();
    boolean b31 = stack16.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    java.lang.Object obj47 = stack22.peek();
    boolean b48 = stack22.empty();
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj52 = stack50.push((java.lang.Object)10L);
    java.lang.Object obj53 = stack50.pop();
    boolean b54 = stack50.empty();
    br.ufal.ic.test.mystack.Stack stack56 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack58 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj60 = stack58.push((java.lang.Object)100.0f);
    java.lang.Object obj61 = stack58.peek();
    java.lang.Object obj63 = stack58.push((java.lang.Object)"hi!");
    java.lang.Object obj64 = stack58.pop();
    java.lang.Object obj66 = stack58.push((java.lang.Object)(short)100);
    java.lang.Object obj67 = stack56.push((java.lang.Object)(short)100);
    boolean b68 = stack56.empty();
    java.lang.Object obj69 = stack56.peek();
    br.ufal.ic.test.mystack.Stack stack71 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj73 = stack71.push((java.lang.Object)10.0f);
    java.lang.Object obj74 = stack71.peek();
    java.lang.Object obj75 = stack71.peek();
    java.lang.Object obj76 = stack56.push((java.lang.Object)stack71);
    br.ufal.ic.test.mystack.Stack stack78 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj80 = stack78.push((java.lang.Object)10.0f);
    java.lang.Object obj81 = stack78.peek();
    java.lang.Object obj82 = stack78.pop();
    br.ufal.ic.test.mystack.Stack stack84 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b85 = stack84.empty();
    boolean b86 = stack84.empty();
    br.ufal.ic.test.mystack.Stack stack88 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b89 = stack88.empty();
    boolean b90 = stack88.empty();
    java.lang.Object obj91 = stack84.push((java.lang.Object)stack88);
    java.lang.Object obj92 = stack78.push((java.lang.Object)stack84);
    java.lang.Object obj93 = stack71.push(obj92);
    java.lang.Object obj94 = stack50.push((java.lang.Object)stack71);
    java.lang.Object obj95 = stack71.peek();
    java.lang.Object obj96 = stack71.peek();
    java.lang.Object obj97 = stack71.peek();
    java.lang.Object obj98 = stack71.peek();
    java.lang.Object obj99 = stack22.push(obj98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 10L+ "'", obj52.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 10L+ "'", obj53.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 100.0f+ "'", obj60.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + 100.0f+ "'", obj61.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + "hi!"+ "'", obj63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "hi!"+ "'", obj64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + (short)100+ "'", obj66.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + (short)100+ "'", obj67.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + (short)100+ "'", obj69.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj73 + "' != '" + 10.0f+ "'", obj73.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + 10.0f+ "'", obj74.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 10.0f+ "'", obj75.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj80 + "' != '" + 10.0f+ "'", obj80.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj81 + "' != '" + 10.0f+ "'", obj81.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj82 + "' != '" + 10.0f+ "'", obj82.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj99);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack1.push(obj16);
    boolean b18 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)(-1));
    java.lang.Object obj23 = stack20.peek();
    boolean b24 = stack20.empty();
    java.lang.Object obj25 = stack20.pop();
    java.lang.Object obj26 = stack1.push((java.lang.Object)stack20);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj27 = stack20.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (-1)+ "'", obj22.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + (-1)+ "'", obj23.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (-1)+ "'", obj25.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    java.lang.Object obj11 = stack8.peek();
    java.lang.Object obj13 = stack8.push((java.lang.Object)"hi!");
    java.lang.Object obj14 = stack8.pop();
    java.lang.Object obj16 = stack8.push((java.lang.Object)(short)100);
    boolean b17 = stack8.empty();
    java.lang.Object obj18 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    boolean b27 = stack20.empty();
    java.lang.Object obj28 = stack20.peek();
    java.lang.Object obj29 = stack20.pop();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b32 = stack31.empty();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj35 = stack31.push((java.lang.Object)stack34);
    java.lang.Object obj36 = stack20.push(obj35);
    java.lang.Object obj37 = stack8.push(obj36);
    java.lang.Object obj38 = stack1.push((java.lang.Object)stack8);
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)100.0f);
    java.lang.Object obj43 = stack40.peek();
    java.lang.Object obj45 = stack40.push((java.lang.Object)"hi!");
    boolean b46 = stack40.empty();
    boolean b47 = stack40.empty();
    br.ufal.ic.test.mystack.Stack stack49 = new br.ufal.ic.test.mystack.Stack((int)(short)0);
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b52 = stack51.empty();
    br.ufal.ic.test.mystack.Stack stack54 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b55 = stack54.empty();
    br.ufal.ic.test.mystack.Stack stack57 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj58 = stack54.push((java.lang.Object)stack57);
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj62 = stack60.push((java.lang.Object)100.0f);
    java.lang.Object obj63 = stack60.peek();
    java.lang.Object obj65 = stack60.push((java.lang.Object)"hi!");
    java.lang.Object obj66 = stack57.push(obj65);
    java.lang.Object obj67 = stack51.push(obj65);
    boolean b68 = stack51.empty();
    java.lang.Object obj69 = stack49.push((java.lang.Object)stack51);
    java.lang.Object obj70 = stack40.push((java.lang.Object)stack51);
    java.lang.Object obj71 = stack8.push(obj70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "hi!"+ "'", obj13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (short)100+ "'", obj16.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 100.0f+ "'", obj43.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "hi!"+ "'", obj45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 100.0f+ "'", obj62.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 100.0f+ "'", obj63.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "hi!"+ "'", obj65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "hi!"+ "'", obj66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "hi!"+ "'", obj67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj71);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj10 = stack8.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b13 = stack12.empty();
    java.lang.Object obj15 = stack12.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj34 = stack32.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack36 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj38 = stack36.push((java.lang.Object)100.0f);
    java.lang.Object obj39 = stack36.peek();
    java.lang.Object obj41 = stack36.push((java.lang.Object)"hi!");
    java.lang.Object obj42 = stack36.pop();
    java.lang.Object obj44 = stack36.push((java.lang.Object)(short)100);
    java.lang.Object obj45 = stack32.push((java.lang.Object)stack36);
    java.lang.Object obj46 = stack21.push((java.lang.Object)stack32);
    boolean b47 = stack21.empty();
    java.lang.Object obj48 = new java.lang.Object();
    java.lang.Object obj49 = stack21.push(obj48);
    java.lang.Object obj50 = stack21.pop();
    java.lang.Object obj51 = stack12.push((java.lang.Object)stack21);
    java.lang.Object obj52 = stack12.peek();
    java.lang.Object obj53 = stack8.push(obj52);
    java.lang.Object obj54 = stack1.push((java.lang.Object)stack8);
    br.ufal.ic.test.mystack.Stack stack56 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack58 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj60 = stack58.push((java.lang.Object)100.0f);
    java.lang.Object obj61 = stack58.peek();
    java.lang.Object obj63 = stack58.push((java.lang.Object)"hi!");
    java.lang.Object obj64 = stack58.pop();
    java.lang.Object obj66 = stack58.push((java.lang.Object)(short)100);
    java.lang.Object obj67 = stack56.push((java.lang.Object)(short)100);
    boolean b68 = stack56.empty();
    java.lang.Object obj69 = stack56.peek();
    boolean b70 = stack56.empty();
    boolean b71 = stack56.empty();
    java.lang.Object obj72 = stack8.push((java.lang.Object)stack56);
    boolean b73 = stack56.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0d+ "'", obj10.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (byte)0+ "'", obj15.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 100.0f+ "'", obj34.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 100.0f+ "'", obj38.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 100.0f+ "'", obj39.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "hi!"+ "'", obj41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + "hi!"+ "'", obj42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + (short)100+ "'", obj44.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 100.0f+ "'", obj60.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + 100.0f+ "'", obj61.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + "hi!"+ "'", obj63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "hi!"+ "'", obj64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + (short)100+ "'", obj66.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + (short)100+ "'", obj67.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + (short)100+ "'", obj69.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.pop();
    boolean b19 = stack5.empty();
    boolean b20 = stack5.empty();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b27 = stack26.empty();
    java.lang.Object obj28 = stack22.push((java.lang.Object)b27);
    java.lang.Object obj29 = stack5.push(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)1+ "'", obj24.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + true+ "'", obj28.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + true+ "'", obj29.equals(true));

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.pop();
    boolean b19 = stack5.empty();
    boolean b20 = stack5.empty();
    boolean b21 = stack5.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    boolean b12 = stack5.empty();
    java.lang.Object obj13 = stack5.peek();
    java.lang.Object obj14 = stack5.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj34 = stack32.push((java.lang.Object)1.0d);
    java.lang.Object obj35 = stack32.peek();
    java.lang.Object obj36 = stack17.push(obj35);
    java.lang.Object obj37 = stack1.push(obj35);
    java.lang.Object obj38 = stack1.pop();
    java.lang.Object obj39 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 1.0d+ "'", obj36.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0d+ "'", obj37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0d+ "'", obj38.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    java.lang.Object obj15 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b10 = stack9.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack15.push(obj23);
    java.lang.Object obj25 = stack9.push(obj23);
    java.lang.Object obj26 = stack1.push((java.lang.Object)stack9);
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj30 = stack28.push((java.lang.Object)100.0f);
    java.lang.Object obj31 = stack28.peek();
    java.lang.Object obj33 = stack28.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b36 = stack35.empty();
    java.lang.Object obj37 = stack28.push((java.lang.Object)stack35);
    boolean b38 = stack35.empty();
    java.lang.Object obj39 = stack9.push((java.lang.Object)b38);
    java.lang.Object obj40 = stack9.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + true+ "'", obj39.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + true+ "'", obj40.equals(true));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj14 = stack12.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    java.lang.Object obj25 = stack12.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj29 = stack27.push((java.lang.Object)1.0d);
    java.lang.Object obj30 = stack27.peek();
    java.lang.Object obj31 = stack12.push(obj30);
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj34 = stack12.push((java.lang.Object)stack33);
    java.lang.Object obj35 = stack1.push((java.lang.Object)stack33);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj36 = stack33.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0d+ "'", obj29.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 1.0d+ "'", obj30.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 1.0d+ "'", obj31.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.peek();
    boolean b19 = stack5.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b18 = stack17.empty();
    java.lang.Object obj20 = stack17.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj28 = stack26.push((java.lang.Object)100.0f);
    java.lang.Object obj29 = stack26.peek();
    java.lang.Object obj31 = stack26.push((java.lang.Object)"hi!");
    java.lang.Object obj32 = stack26.pop();
    java.lang.Object obj34 = stack26.push((java.lang.Object)(short)100);
    java.lang.Object obj35 = stack22.push((java.lang.Object)stack26);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj39 = stack37.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj43 = stack41.push((java.lang.Object)100.0f);
    java.lang.Object obj44 = stack41.peek();
    java.lang.Object obj46 = stack41.push((java.lang.Object)"hi!");
    java.lang.Object obj47 = stack41.pop();
    java.lang.Object obj49 = stack41.push((java.lang.Object)(short)100);
    java.lang.Object obj50 = stack37.push((java.lang.Object)stack41);
    java.lang.Object obj51 = stack26.push((java.lang.Object)stack37);
    boolean b52 = stack26.empty();
    java.lang.Object obj53 = new java.lang.Object();
    java.lang.Object obj54 = stack26.push(obj53);
    java.lang.Object obj55 = stack26.pop();
    java.lang.Object obj56 = stack17.push((java.lang.Object)stack26);
    br.ufal.ic.test.mystack.Stack stack58 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj60 = stack58.push((java.lang.Object)10.0f);
    boolean b61 = stack58.empty();
    java.lang.Object obj62 = stack58.pop();
    java.lang.Object obj63 = stack26.push(obj62);
    java.lang.Object obj64 = stack1.push((java.lang.Object)stack26);
    java.lang.Object obj65 = stack26.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (byte)0+ "'", obj20.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 100.0f+ "'", obj39.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 100.0f+ "'", obj43.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + "hi!"+ "'", obj46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "hi!"+ "'", obj47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + (short)100+ "'", obj49.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10.0f+ "'", obj60.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 10.0f+ "'", obj62.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 10.0f+ "'", obj63.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 10.0f+ "'", obj65.equals(10.0f));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)1);
    boolean b2 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    java.lang.Object obj11 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj15 = stack13.push((java.lang.Object)10L);
    java.lang.Object obj16 = stack13.pop();
    boolean b17 = stack13.empty();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack19.push((java.lang.Object)(short)100);
    boolean b31 = stack19.empty();
    java.lang.Object obj32 = stack19.peek();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)10.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj38 = stack34.peek();
    java.lang.Object obj39 = stack19.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj43 = stack41.push((java.lang.Object)10.0f);
    java.lang.Object obj44 = stack41.peek();
    java.lang.Object obj45 = stack41.pop();
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b48 = stack47.empty();
    boolean b49 = stack47.empty();
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b52 = stack51.empty();
    boolean b53 = stack51.empty();
    java.lang.Object obj54 = stack47.push((java.lang.Object)stack51);
    java.lang.Object obj55 = stack41.push((java.lang.Object)stack47);
    java.lang.Object obj56 = stack34.push(obj55);
    java.lang.Object obj57 = stack13.push((java.lang.Object)stack34);
    java.lang.Object obj58 = stack34.peek();
    java.lang.Object obj59 = stack34.peek();
    java.lang.Object obj60 = stack34.peek();
    java.lang.Object obj61 = stack1.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack63 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj65 = stack63.push((java.lang.Object)(-1));
    boolean b66 = stack63.empty();
    java.lang.Object obj67 = stack34.push((java.lang.Object)stack63);
    boolean b68 = stack63.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10L+ "'", obj15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 10L+ "'", obj16.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 10.0f+ "'", obj38.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0f+ "'", obj43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 10.0f+ "'", obj45.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + (-1)+ "'", obj65.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)(-1));
    boolean b10 = stack7.empty();
    java.lang.Object obj11 = stack1.push((java.lang.Object)b10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (-1)+ "'", obj9.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + false+ "'", obj11.equals(false));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)10.0f);
    java.lang.Object obj8 = stack5.peek();
    boolean b9 = stack5.empty();
    java.lang.Object obj10 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack5.push((java.lang.Object)stack12);
    java.lang.Object obj18 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj19 = stack5.pop();
    boolean b20 = stack5.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj31 = stack5.pop();
    java.lang.Object obj33 = stack5.push((java.lang.Object)(short)-1);
    java.lang.Object obj34 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)-1+ "'", obj33.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)-1+ "'", obj34.equals((short)-1));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj10 = stack8.push((java.lang.Object)100.0f);
    java.lang.Object obj11 = stack8.peek();
    java.lang.Object obj13 = stack8.push((java.lang.Object)"hi!");
    java.lang.Object obj14 = stack8.pop();
    java.lang.Object obj16 = stack8.push((java.lang.Object)(short)100);
    boolean b17 = stack8.empty();
    java.lang.Object obj18 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    boolean b27 = stack20.empty();
    java.lang.Object obj28 = stack20.peek();
    java.lang.Object obj29 = stack20.pop();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b32 = stack31.empty();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj35 = stack31.push((java.lang.Object)stack34);
    java.lang.Object obj36 = stack20.push(obj35);
    java.lang.Object obj37 = stack8.push(obj36);
    java.lang.Object obj38 = stack1.push((java.lang.Object)stack8);
    boolean b39 = stack1.empty();
    boolean b40 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "hi!"+ "'", obj13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (short)100+ "'", obj16.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)stack3);
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj16 = stack14.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack18.pop();
    java.lang.Object obj26 = stack18.push((java.lang.Object)(short)100);
    java.lang.Object obj27 = stack14.push((java.lang.Object)stack18);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj31 = stack29.push((java.lang.Object)1.0d);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack14.push(obj32);
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj36 = stack14.push((java.lang.Object)stack35);
    br.ufal.ic.test.mystack.Stack stack38 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b39 = stack38.empty();
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b42 = stack41.empty();
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj45 = stack41.push((java.lang.Object)stack44);
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)100.0f);
    java.lang.Object obj50 = stack47.peek();
    java.lang.Object obj52 = stack47.push((java.lang.Object)"hi!");
    java.lang.Object obj53 = stack44.push(obj52);
    java.lang.Object obj54 = stack38.push(obj52);
    java.lang.Object obj55 = stack35.push((java.lang.Object)stack38);
    java.lang.Object obj56 = stack3.push((java.lang.Object)stack35);
    br.ufal.ic.test.mystack.Stack stack58 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj60 = stack58.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack62 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj64 = stack62.push((java.lang.Object)100.0f);
    java.lang.Object obj65 = stack62.peek();
    java.lang.Object obj67 = stack62.push((java.lang.Object)"hi!");
    java.lang.Object obj68 = stack62.pop();
    java.lang.Object obj70 = stack62.push((java.lang.Object)(short)100);
    java.lang.Object obj71 = stack58.push((java.lang.Object)stack62);
    br.ufal.ic.test.mystack.Stack stack73 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj75 = stack73.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack77 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj79 = stack77.push((java.lang.Object)100.0f);
    java.lang.Object obj80 = stack77.peek();
    java.lang.Object obj82 = stack77.push((java.lang.Object)"hi!");
    java.lang.Object obj83 = stack77.pop();
    java.lang.Object obj85 = stack77.push((java.lang.Object)(short)100);
    java.lang.Object obj86 = stack73.push((java.lang.Object)stack77);
    java.lang.Object obj87 = stack62.push((java.lang.Object)stack73);
    boolean b88 = stack62.empty();
    java.lang.Object obj89 = stack62.peek();
    boolean b90 = stack62.empty();
    java.lang.Object obj91 = stack62.pop();
    java.lang.Object obj92 = stack3.push(obj91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 100.0f+ "'", obj16.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 1.0d+ "'", obj31.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 1.0d+ "'", obj32.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 1.0d+ "'", obj33.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 100.0f+ "'", obj50.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "hi!"+ "'", obj52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "hi!"+ "'", obj53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "hi!"+ "'", obj54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 100.0f+ "'", obj60.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 100.0f+ "'", obj64.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 100.0f+ "'", obj65.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "hi!"+ "'", obj67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "hi!"+ "'", obj68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj70 + "' != '" + (short)100+ "'", obj70.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 100.0f+ "'", obj75.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj79 + "' != '" + 100.0f+ "'", obj79.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj80 + "' != '" + 100.0f+ "'", obj80.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj82 + "' != '" + "hi!"+ "'", obj82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj83 + "' != '" + "hi!"+ "'", obj83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj85 + "' != '" + (short)100+ "'", obj85.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj92);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    boolean b4 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack((int)(short)0);
    java.lang.Object obj7 = stack1.push((java.lang.Object)stack6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)10.0f);
    java.lang.Object obj8 = stack5.peek();
    boolean b9 = stack5.empty();
    java.lang.Object obj10 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack5.push((java.lang.Object)stack12);
    java.lang.Object obj18 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj19 = stack5.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = stack5.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj31 = stack16.pop();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj35 = stack33.push((java.lang.Object)10.0f);
    java.lang.Object obj36 = stack33.peek();
    java.lang.Object obj37 = stack33.pop();
    boolean b38 = stack33.empty();
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj46 = stack44.push((java.lang.Object)100.0f);
    java.lang.Object obj47 = stack44.peek();
    java.lang.Object obj49 = stack44.push((java.lang.Object)"hi!");
    java.lang.Object obj50 = stack44.pop();
    java.lang.Object obj52 = stack44.push((java.lang.Object)(short)100);
    java.lang.Object obj53 = stack40.push((java.lang.Object)stack44);
    boolean b54 = stack40.empty();
    java.lang.Object obj55 = stack40.peek();
    boolean b56 = stack40.empty();
    java.lang.Object obj57 = stack33.push((java.lang.Object)stack40);
    java.lang.Object obj58 = stack16.push((java.lang.Object)stack40);
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b61 = stack60.empty();
    br.ufal.ic.test.mystack.Stack stack63 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj64 = stack60.push((java.lang.Object)stack63);
    java.lang.Object obj65 = stack16.push((java.lang.Object)stack60);
    br.ufal.ic.test.mystack.Stack stack67 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj69 = stack67.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack71 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj73 = stack71.push((java.lang.Object)100.0f);
    java.lang.Object obj74 = stack71.peek();
    java.lang.Object obj76 = stack71.push((java.lang.Object)"hi!");
    java.lang.Object obj77 = stack71.pop();
    java.lang.Object obj79 = stack71.push((java.lang.Object)(short)100);
    java.lang.Object obj80 = stack67.push((java.lang.Object)stack71);
    boolean b81 = stack71.empty();
    java.lang.Object obj83 = stack71.push((java.lang.Object)10L);
    java.lang.Object obj84 = stack71.pop();
    boolean b85 = stack71.empty();
    java.lang.Object obj86 = stack16.push((java.lang.Object)b85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 100.0f+ "'", obj46.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 100.0f+ "'", obj47.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "hi!"+ "'", obj49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "hi!"+ "'", obj50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + (short)100+ "'", obj52.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 100.0f+ "'", obj69.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj73 + "' != '" + 100.0f+ "'", obj73.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + 100.0f+ "'", obj74.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj76 + "' != '" + "hi!"+ "'", obj76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj77 + "' != '" + "hi!"+ "'", obj77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj79 + "' != '" + (short)100+ "'", obj79.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj83 + "' != '" + 10L+ "'", obj83.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj84 + "' != '" + 10L+ "'", obj84.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj86 + "' != '" + false+ "'", obj86.equals(false));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj34 = stack32.push((java.lang.Object)10.0f);
    java.lang.Object obj35 = stack32.peek();
    boolean b36 = stack32.empty();
    java.lang.Object obj37 = stack32.peek();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj41 = stack39.push((java.lang.Object)10L);
    java.lang.Object obj42 = stack39.pop();
    boolean b43 = stack39.empty();
    br.ufal.ic.test.mystack.Stack stack45 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)100.0f);
    java.lang.Object obj50 = stack47.peek();
    java.lang.Object obj52 = stack47.push((java.lang.Object)"hi!");
    java.lang.Object obj53 = stack47.pop();
    java.lang.Object obj55 = stack47.push((java.lang.Object)(short)100);
    java.lang.Object obj56 = stack45.push((java.lang.Object)(short)100);
    boolean b57 = stack45.empty();
    java.lang.Object obj58 = stack45.peek();
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj62 = stack60.push((java.lang.Object)10.0f);
    java.lang.Object obj63 = stack60.peek();
    java.lang.Object obj64 = stack60.peek();
    java.lang.Object obj65 = stack45.push((java.lang.Object)stack60);
    br.ufal.ic.test.mystack.Stack stack67 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj69 = stack67.push((java.lang.Object)10.0f);
    java.lang.Object obj70 = stack67.peek();
    java.lang.Object obj71 = stack67.pop();
    br.ufal.ic.test.mystack.Stack stack73 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b74 = stack73.empty();
    boolean b75 = stack73.empty();
    br.ufal.ic.test.mystack.Stack stack77 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b78 = stack77.empty();
    boolean b79 = stack77.empty();
    java.lang.Object obj80 = stack73.push((java.lang.Object)stack77);
    java.lang.Object obj81 = stack67.push((java.lang.Object)stack73);
    java.lang.Object obj82 = stack60.push(obj81);
    java.lang.Object obj83 = stack39.push((java.lang.Object)stack60);
    java.lang.Object obj84 = stack60.peek();
    java.lang.Object obj85 = stack60.peek();
    java.lang.Object obj86 = stack60.pop();
    java.lang.Object obj87 = stack60.pop();
    java.lang.Object obj88 = stack32.push((java.lang.Object)stack60);
    java.lang.Object obj89 = stack5.push((java.lang.Object)stack60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10.0f+ "'", obj34.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 10L+ "'", obj41.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 10L+ "'", obj42.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 100.0f+ "'", obj49.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 100.0f+ "'", obj50.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "hi!"+ "'", obj52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "hi!"+ "'", obj53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + (short)100+ "'", obj55.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + (short)100+ "'", obj56.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + (short)100+ "'", obj58.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 10.0f+ "'", obj62.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 10.0f+ "'", obj63.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 10.0f+ "'", obj64.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 10.0f+ "'", obj69.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 10.0f+ "'", obj70.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + 10.0f+ "'", obj71.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj87 + "' != '" + 10.0f+ "'", obj87.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj89);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj10 = stack5.push((java.lang.Object)false);
    boolean b11 = stack5.empty();
    boolean b12 = stack5.empty();
    boolean b13 = stack5.empty();
    java.lang.Object obj14 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + false+ "'", obj10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + false+ "'", obj14.equals(false));

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    boolean b47 = stack22.empty();
    boolean b48 = stack22.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    java.lang.Object obj18 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b25 = stack24.empty();
    java.lang.Object obj26 = stack20.push((java.lang.Object)b25);
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj30 = stack28.push((java.lang.Object)10.0f);
    java.lang.Object obj31 = stack28.peek();
    java.lang.Object obj32 = stack28.peek();
    java.lang.Object obj33 = stack28.pop();
    java.lang.Object obj34 = stack20.push((java.lang.Object)stack28);
    java.lang.Object obj35 = stack5.push(obj34);
    java.lang.Object obj36 = stack5.pop();
    boolean b37 = stack5.empty();
    java.lang.Object obj38 = stack5.pop();
    boolean b39 = stack5.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10L+ "'", obj18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (short)1+ "'", obj22.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + true+ "'", obj26.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 10.0f+ "'", obj30.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + (short)100+ "'", obj38.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj5 = stack1.push((java.lang.Object)stack4);
    java.lang.Object obj6 = stack1.pop();
    boolean b7 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj31 = stack5.pop();
    java.lang.Object obj32 = stack5.pop();
    java.lang.Object obj33 = stack5.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 100.0f+ "'", obj33.equals(100.0f));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    boolean b11 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj15 = stack13.push((java.lang.Object)10.0f);
    java.lang.Object obj16 = stack13.pop();
    boolean b17 = stack13.empty();
    java.lang.Object obj18 = stack1.push((java.lang.Object)b17);
    boolean b19 = stack1.empty();
    java.lang.Object obj20 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10.0f+ "'", obj15.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 10.0f+ "'", obj16.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + true+ "'", obj18.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + true+ "'", obj20.equals(true));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b6 = stack5.empty();
    java.lang.Object obj7 = stack1.push((java.lang.Object)b6);
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (short)1+ "'", obj3.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + true+ "'", obj7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + true+ "'", obj9.equals(true));

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    java.lang.Object obj21 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    boolean b27 = stack23.empty();
    boolean b28 = stack23.empty();
    java.lang.Object obj29 = stack1.push((java.lang.Object)b28);
    boolean b30 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 1.0d+ "'", obj21.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + false+ "'", obj29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj15 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack17.push((java.lang.Object)stack21);
    boolean b31 = stack21.empty();
    java.lang.Object obj33 = stack21.push((java.lang.Object)10L);
    java.lang.Object obj34 = stack21.pop();
    boolean b35 = stack21.empty();
    java.lang.Object obj36 = stack5.push((java.lang.Object)stack21);
    boolean b37 = stack21.empty();
    java.lang.Object obj38 = stack21.peek();
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b41 = stack40.empty();
    br.ufal.ic.test.mystack.Stack stack43 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj44 = stack40.push((java.lang.Object)stack43);
    boolean b45 = stack40.empty();
    java.lang.Object obj46 = stack40.pop();
    java.lang.Object obj48 = stack40.push((java.lang.Object)10L);
    java.lang.Object obj49 = stack21.push(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10L+ "'", obj33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10L+ "'", obj34.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + (short)100+ "'", obj38.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 10L+ "'", obj48.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 10L+ "'", obj49.equals(10L));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)stack3);
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    boolean b16 = stack14.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    java.lang.Object obj21 = stack14.push((java.lang.Object)stack18);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b24 = stack23.empty();
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj27 = stack23.push((java.lang.Object)stack26);
    java.lang.Object obj28 = stack14.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj30 = stack3.push((java.lang.Object)stack23);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj31 = stack23.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj14 = stack12.push((java.lang.Object)100.0f);
    java.lang.Object obj15 = stack12.peek();
    java.lang.Object obj17 = stack12.push((java.lang.Object)"hi!");
    java.lang.Object obj18 = stack12.pop();
    java.lang.Object obj20 = stack12.push((java.lang.Object)(short)100);
    java.lang.Object obj21 = stack10.push((java.lang.Object)(short)100);
    boolean b22 = stack10.empty();
    java.lang.Object obj23 = stack10.peek();
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)10.0f);
    java.lang.Object obj28 = stack25.peek();
    java.lang.Object obj29 = stack25.peek();
    java.lang.Object obj30 = stack10.push((java.lang.Object)stack25);
    java.lang.Object obj31 = stack1.push((java.lang.Object)stack10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 100.0f+ "'", obj15.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (short)100+ "'", obj21.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + (short)100+ "'", obj23.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 10.0f+ "'", obj28.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 10.0f+ "'", obj29.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj10 = stack5.push((java.lang.Object)(-1L));
    java.lang.Object obj11 = stack5.peek();
    java.lang.Object obj12 = stack5.peek();
    boolean b13 = stack5.empty();
    java.lang.Object obj14 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (-1L)+ "'", obj10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (-1L)+ "'", obj11.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (-1L)+ "'", obj12.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (-1L)+ "'", obj14.equals((-1L)));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(byte)100);
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack((-1));
    java.lang.Object obj15 = stack12.push((java.lang.Object)(-1));
    java.lang.Object obj16 = stack12.peek();
    java.lang.Object obj17 = stack1.push((java.lang.Object)stack12);
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj21 = stack19.push((java.lang.Object)10L);
    java.lang.Object obj22 = stack19.pop();
    boolean b23 = stack19.empty();
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj29 = stack27.push((java.lang.Object)100.0f);
    java.lang.Object obj30 = stack27.peek();
    java.lang.Object obj32 = stack27.push((java.lang.Object)"hi!");
    java.lang.Object obj33 = stack27.pop();
    java.lang.Object obj35 = stack27.push((java.lang.Object)(short)100);
    java.lang.Object obj36 = stack25.push((java.lang.Object)(short)100);
    boolean b37 = stack25.empty();
    java.lang.Object obj38 = stack25.peek();
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)10.0f);
    java.lang.Object obj43 = stack40.peek();
    java.lang.Object obj44 = stack40.peek();
    java.lang.Object obj45 = stack25.push((java.lang.Object)stack40);
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj49 = stack47.push((java.lang.Object)10.0f);
    java.lang.Object obj50 = stack47.peek();
    java.lang.Object obj51 = stack47.pop();
    br.ufal.ic.test.mystack.Stack stack53 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b54 = stack53.empty();
    boolean b55 = stack53.empty();
    br.ufal.ic.test.mystack.Stack stack57 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b58 = stack57.empty();
    boolean b59 = stack57.empty();
    java.lang.Object obj60 = stack53.push((java.lang.Object)stack57);
    java.lang.Object obj61 = stack47.push((java.lang.Object)stack53);
    java.lang.Object obj62 = stack40.push(obj61);
    java.lang.Object obj63 = stack19.push((java.lang.Object)stack40);
    java.lang.Object obj64 = stack40.peek();
    java.lang.Object obj65 = stack40.peek();
    java.lang.Object obj66 = stack40.pop();
    java.lang.Object obj67 = stack40.pop();
    boolean b68 = stack40.empty();
    java.lang.Object obj69 = stack12.push((java.lang.Object)b68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (-1)+ "'", obj15.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (-1)+ "'", obj16.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 10L+ "'", obj21.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 10L+ "'", obj22.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (short)100+ "'", obj36.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + (short)100+ "'", obj38.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 10.0f+ "'", obj42.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0f+ "'", obj43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 10.0f+ "'", obj49.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 10.0f+ "'", obj50.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 10.0f+ "'", obj51.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + 10.0f+ "'", obj67.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + true+ "'", obj69.equals(true));

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj13 = stack11.push((java.lang.Object)100.0f);
    java.lang.Object obj14 = stack11.peek();
    java.lang.Object obj16 = stack11.push((java.lang.Object)"hi!");
    java.lang.Object obj17 = stack11.pop();
    java.lang.Object obj19 = stack11.push((java.lang.Object)(short)100);
    java.lang.Object obj20 = stack7.push((java.lang.Object)stack11);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj28 = stack26.push((java.lang.Object)100.0f);
    java.lang.Object obj29 = stack26.peek();
    java.lang.Object obj31 = stack26.push((java.lang.Object)"hi!");
    java.lang.Object obj32 = stack26.pop();
    java.lang.Object obj34 = stack26.push((java.lang.Object)(short)100);
    java.lang.Object obj35 = stack22.push((java.lang.Object)stack26);
    java.lang.Object obj36 = stack11.push((java.lang.Object)stack22);
    boolean b37 = stack11.empty();
    java.lang.Object obj38 = stack1.push((java.lang.Object)stack11);
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b41 = stack40.empty();
    java.lang.Object obj43 = stack40.push((java.lang.Object)(byte)0);
    java.lang.Object obj44 = stack40.peek();
    boolean b45 = stack40.empty();
    java.lang.Object obj46 = stack1.push((java.lang.Object)stack40);
    java.lang.Object obj47 = stack40.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + (byte)0+ "'", obj43.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + (byte)0+ "'", obj44.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + (byte)0+ "'", obj47.equals((byte)0));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj14 = stack12.push((java.lang.Object)1.0d);
    java.lang.Object obj15 = stack1.push((java.lang.Object)1.0d);
    boolean b16 = stack1.empty();
    java.lang.Object obj17 = stack1.pop();
    java.lang.Object obj18 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0d+ "'", obj14.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 1.0d+ "'", obj15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 1.0d+ "'", obj17.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    boolean b7 = stack1.empty();
    java.lang.Object obj8 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)(-1));
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj14 = stack10.peek();
    boolean b15 = stack10.empty();
    java.lang.Object obj16 = stack1.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b23 = stack22.empty();
    boolean b24 = stack22.empty();
    java.lang.Object obj25 = stack18.push((java.lang.Object)stack22);
    java.lang.Object obj27 = stack22.push((java.lang.Object)(-1L));
    java.lang.Object obj29 = stack22.push((java.lang.Object)(short)10);
    java.lang.Object obj30 = stack22.pop();
    java.lang.Object obj31 = stack1.push((java.lang.Object)stack22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (-1)+ "'", obj12.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (-1)+ "'", obj13.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (-1)+ "'", obj14.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + (-1L)+ "'", obj27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)10+ "'", obj29.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)10+ "'", obj30.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    java.lang.Object obj11 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj15 = stack13.push((java.lang.Object)10L);
    java.lang.Object obj16 = stack13.pop();
    boolean b17 = stack13.empty();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack19.push((java.lang.Object)(short)100);
    boolean b31 = stack19.empty();
    java.lang.Object obj32 = stack19.peek();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)10.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj38 = stack34.peek();
    java.lang.Object obj39 = stack19.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj43 = stack41.push((java.lang.Object)10.0f);
    java.lang.Object obj44 = stack41.peek();
    java.lang.Object obj45 = stack41.pop();
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b48 = stack47.empty();
    boolean b49 = stack47.empty();
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b52 = stack51.empty();
    boolean b53 = stack51.empty();
    java.lang.Object obj54 = stack47.push((java.lang.Object)stack51);
    java.lang.Object obj55 = stack41.push((java.lang.Object)stack47);
    java.lang.Object obj56 = stack34.push(obj55);
    java.lang.Object obj57 = stack13.push((java.lang.Object)stack34);
    java.lang.Object obj58 = stack34.peek();
    java.lang.Object obj59 = stack34.peek();
    java.lang.Object obj60 = stack34.peek();
    java.lang.Object obj61 = stack1.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack63 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj65 = stack63.push((java.lang.Object)(-1));
    boolean b66 = stack63.empty();
    java.lang.Object obj67 = stack34.push((java.lang.Object)stack63);
    java.lang.Object obj68 = stack63.pop();
    br.ufal.ic.test.mystack.Stack stack70 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj72 = stack70.push((java.lang.Object)100.0f);
    java.lang.Object obj73 = stack70.peek();
    java.lang.Object obj75 = stack70.push((java.lang.Object)"hi!");
    java.lang.Object obj76 = stack70.pop();
    boolean b77 = stack70.empty();
    java.lang.Object obj78 = stack70.peek();
    java.lang.Object obj79 = stack70.peek();
    java.lang.Object obj80 = stack70.peek();
    java.lang.Object obj81 = stack63.push(obj80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10L+ "'", obj15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 10L+ "'", obj16.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 10.0f+ "'", obj38.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0f+ "'", obj43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 10.0f+ "'", obj45.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + (-1)+ "'", obj65.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + (-1)+ "'", obj68.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + 100.0f+ "'", obj72.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj73 + "' != '" + 100.0f+ "'", obj73.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "hi!"+ "'", obj75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj76 + "' != '" + "hi!"+ "'", obj76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj78 + "' != '" + 100.0f+ "'", obj78.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj79 + "' != '" + 100.0f+ "'", obj79.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj80 + "' != '" + 100.0f+ "'", obj80.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj81 + "' != '" + 100.0f+ "'", obj81.equals(100.0f));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)'a');
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)10.0f);
    java.lang.Object obj8 = stack5.peek();
    boolean b9 = stack5.empty();
    java.lang.Object obj10 = stack5.peek();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj14 = stack12.push((java.lang.Object)10L);
    java.lang.Object obj15 = stack12.pop();
    boolean b16 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack18.push((java.lang.Object)(short)100);
    boolean b30 = stack18.empty();
    java.lang.Object obj31 = stack18.peek();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj35 = stack33.push((java.lang.Object)10.0f);
    java.lang.Object obj36 = stack33.peek();
    java.lang.Object obj37 = stack33.peek();
    java.lang.Object obj38 = stack18.push((java.lang.Object)stack33);
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)10.0f);
    java.lang.Object obj43 = stack40.peek();
    java.lang.Object obj44 = stack40.pop();
    br.ufal.ic.test.mystack.Stack stack46 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b47 = stack46.empty();
    boolean b48 = stack46.empty();
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b51 = stack50.empty();
    boolean b52 = stack50.empty();
    java.lang.Object obj53 = stack46.push((java.lang.Object)stack50);
    java.lang.Object obj54 = stack40.push((java.lang.Object)stack46);
    java.lang.Object obj55 = stack33.push(obj54);
    java.lang.Object obj56 = stack12.push((java.lang.Object)stack33);
    java.lang.Object obj57 = stack33.peek();
    java.lang.Object obj58 = stack33.peek();
    java.lang.Object obj59 = stack33.pop();
    java.lang.Object obj60 = stack33.pop();
    java.lang.Object obj61 = stack5.push((java.lang.Object)stack33);
    java.lang.Object obj62 = stack1.push(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10L+ "'", obj14.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10L+ "'", obj15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short)100+ "'", obj31.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 10.0f+ "'", obj42.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0f+ "'", obj43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10.0f+ "'", obj60.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj62);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj31 = stack16.pop();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj35 = stack33.push((java.lang.Object)10.0f);
    java.lang.Object obj36 = stack33.peek();
    java.lang.Object obj37 = stack33.pop();
    boolean b38 = stack33.empty();
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj46 = stack44.push((java.lang.Object)100.0f);
    java.lang.Object obj47 = stack44.peek();
    java.lang.Object obj49 = stack44.push((java.lang.Object)"hi!");
    java.lang.Object obj50 = stack44.pop();
    java.lang.Object obj52 = stack44.push((java.lang.Object)(short)100);
    java.lang.Object obj53 = stack40.push((java.lang.Object)stack44);
    boolean b54 = stack40.empty();
    java.lang.Object obj55 = stack40.peek();
    boolean b56 = stack40.empty();
    java.lang.Object obj57 = stack33.push((java.lang.Object)stack40);
    java.lang.Object obj58 = stack16.push((java.lang.Object)stack40);
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b61 = stack60.empty();
    br.ufal.ic.test.mystack.Stack stack63 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj64 = stack60.push((java.lang.Object)stack63);
    java.lang.Object obj65 = stack16.push((java.lang.Object)stack60);
    java.lang.Object obj66 = stack16.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 100.0f+ "'", obj46.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 100.0f+ "'", obj47.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "hi!"+ "'", obj49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "hi!"+ "'", obj50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + (short)100+ "'", obj52.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj66);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stack1.peek();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b12 = stack11.empty();
    boolean b13 = stack11.empty();
    java.lang.Object obj14 = stack7.push((java.lang.Object)stack11);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack7);
    java.lang.Object obj16 = stack7.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    boolean b10 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj14 = stack12.push((java.lang.Object)1.0d);
    java.lang.Object obj15 = stack1.push((java.lang.Object)1.0d);
    java.lang.Object obj16 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0d+ "'", obj14.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 1.0d+ "'", obj15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0d+ "'", obj16.equals(1.0d));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)10.0f);
    java.lang.Object obj8 = stack5.peek();
    boolean b9 = stack5.empty();
    java.lang.Object obj10 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack5.push((java.lang.Object)stack12);
    java.lang.Object obj18 = stack1.push((java.lang.Object)stack5);
    boolean b19 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj23 = stack21.push((java.lang.Object)10L);
    java.lang.Object obj24 = stack1.push((java.lang.Object)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 10L+ "'", obj23.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10L+ "'", obj24.equals(10L));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)-1);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1.0d));
    java.lang.Object obj4 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b7 = stack6.empty();
    java.lang.Object obj9 = stack6.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj13 = stack11.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj17 = stack15.push((java.lang.Object)100.0f);
    java.lang.Object obj18 = stack15.peek();
    java.lang.Object obj20 = stack15.push((java.lang.Object)"hi!");
    java.lang.Object obj21 = stack15.pop();
    java.lang.Object obj23 = stack15.push((java.lang.Object)(short)100);
    java.lang.Object obj24 = stack11.push((java.lang.Object)stack15);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj28 = stack26.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj32 = stack30.push((java.lang.Object)100.0f);
    java.lang.Object obj33 = stack30.peek();
    java.lang.Object obj35 = stack30.push((java.lang.Object)"hi!");
    java.lang.Object obj36 = stack30.pop();
    java.lang.Object obj38 = stack30.push((java.lang.Object)(short)100);
    java.lang.Object obj39 = stack26.push((java.lang.Object)stack30);
    java.lang.Object obj40 = stack15.push((java.lang.Object)stack26);
    boolean b41 = stack15.empty();
    java.lang.Object obj42 = new java.lang.Object();
    java.lang.Object obj43 = stack15.push(obj42);
    java.lang.Object obj44 = stack15.pop();
    java.lang.Object obj45 = stack6.push((java.lang.Object)stack15);
    java.lang.Object obj46 = stack15.pop();
    java.lang.Object obj47 = stack15.peek();
    java.lang.Object obj48 = stack1.push((java.lang.Object)stack15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1.0d)+ "'", obj3.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1.0d)+ "'", obj4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (byte)0+ "'", obj9.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 100.0f+ "'", obj17.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "hi!"+ "'", obj20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + (short)100+ "'", obj23.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 100.0f+ "'", obj33.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "hi!"+ "'", obj35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "hi!"+ "'", obj36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + (short)100+ "'", obj38.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + (short)100+ "'", obj47.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj31 = stack16.pop();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj35 = stack33.push((java.lang.Object)10.0f);
    java.lang.Object obj36 = stack33.peek();
    java.lang.Object obj37 = stack33.pop();
    boolean b38 = stack33.empty();
    br.ufal.ic.test.mystack.Stack stack40 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj42 = stack40.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj46 = stack44.push((java.lang.Object)100.0f);
    java.lang.Object obj47 = stack44.peek();
    java.lang.Object obj49 = stack44.push((java.lang.Object)"hi!");
    java.lang.Object obj50 = stack44.pop();
    java.lang.Object obj52 = stack44.push((java.lang.Object)(short)100);
    java.lang.Object obj53 = stack40.push((java.lang.Object)stack44);
    boolean b54 = stack40.empty();
    java.lang.Object obj55 = stack40.peek();
    boolean b56 = stack40.empty();
    java.lang.Object obj57 = stack33.push((java.lang.Object)stack40);
    java.lang.Object obj58 = stack16.push((java.lang.Object)stack40);
    br.ufal.ic.test.mystack.Stack stack60 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj62 = stack60.push((java.lang.Object)100.0f);
    java.lang.Object obj63 = stack60.peek();
    java.lang.Object obj65 = stack60.push((java.lang.Object)"hi!");
    java.lang.Object obj66 = stack60.pop();
    java.lang.Object obj68 = stack60.push((java.lang.Object)(short)100);
    boolean b69 = stack60.empty();
    br.ufal.ic.test.mystack.Stack stack71 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj73 = stack71.push((java.lang.Object)1.0d);
    java.lang.Object obj74 = stack60.push((java.lang.Object)1.0d);
    boolean b75 = stack60.empty();
    br.ufal.ic.test.mystack.Stack stack77 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj79 = stack77.push((java.lang.Object)1.0d);
    java.lang.Object obj80 = stack77.peek();
    java.lang.Object obj81 = stack60.push((java.lang.Object)stack77);
    java.lang.Object obj82 = stack40.push((java.lang.Object)stack60);
    br.ufal.ic.test.mystack.Stack stack84 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj86 = stack84.push((java.lang.Object)(-1));
    java.lang.Object obj87 = stack40.push((java.lang.Object)stack84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 100.0f+ "'", obj46.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 100.0f+ "'", obj47.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "hi!"+ "'", obj49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "hi!"+ "'", obj50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + (short)100+ "'", obj52.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 100.0f+ "'", obj62.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 100.0f+ "'", obj63.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "hi!"+ "'", obj65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "hi!"+ "'", obj66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + (short)100+ "'", obj68.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj73 + "' != '" + 1.0d+ "'", obj73.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + 1.0d+ "'", obj74.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj79 + "' != '" + 1.0d+ "'", obj79.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj80 + "' != '" + 1.0d+ "'", obj80.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj86 + "' != '" + (-1)+ "'", obj86.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj87);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)100.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj9 = stack4.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b12 = stack11.empty();
    java.lang.Object obj13 = stack4.push((java.lang.Object)stack11);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack11);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj33 = stack31.push((java.lang.Object)1.0d);
    java.lang.Object obj34 = stack31.peek();
    java.lang.Object obj35 = stack16.push(obj34);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj38 = stack16.push((java.lang.Object)stack37);
    java.lang.Object obj39 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj40 = stack16.peek();
    java.lang.Object obj42 = stack16.push((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 1.0d+ "'", obj33.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0d+ "'", obj34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 1.0d+ "'", obj35.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0d+ "'", obj42.equals(1.0d));

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    boolean b4 = stack1.empty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj9 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj10 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)100+ "'", obj9.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (short)100+ "'", obj10.equals((short)100));

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack1.empty();
    java.lang.Object obj16 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj20 = stack18.push((java.lang.Object)10L);
    java.lang.Object obj21 = stack18.pop();
    boolean b22 = stack18.empty();
    boolean b23 = stack18.empty();
    java.lang.Object obj24 = stack1.push((java.lang.Object)b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10L+ "'", obj20.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 10L+ "'", obj21.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + true+ "'", obj24.equals(true));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)10.0f);
    boolean b9 = stack6.empty();
    java.lang.Object obj10 = stack6.pop();
    java.lang.Object obj11 = stack1.push(obj10);
    java.lang.Object obj12 = stack1.peek();
    java.lang.Object obj13 = stack1.peek();
    java.lang.Object obj14 = stack1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stack1.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10.0f+ "'", obj11.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0f+ "'", obj12.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10.0f+ "'", obj13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10.0f+ "'", obj14.equals(10.0f));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    boolean b25 = stack16.empty();
    java.lang.Object obj26 = stack16.peek();
    java.lang.Object obj27 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj28 = stack16.pop();
    java.lang.Object obj29 = stack16.pop();
    br.ufal.ic.test.mystack.Stack stack31 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b32 = stack31.empty();
    boolean b33 = stack31.empty();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj37 = stack35.push((java.lang.Object)100.0f);
    java.lang.Object obj38 = stack35.peek();
    java.lang.Object obj40 = stack35.push((java.lang.Object)"hi!");
    java.lang.Object obj41 = stack35.pop();
    boolean b42 = stack35.empty();
    java.lang.Object obj43 = stack35.peek();
    java.lang.Object obj44 = stack35.pop();
    java.lang.Object obj45 = stack31.push((java.lang.Object)stack35);
    java.lang.Object obj46 = stack16.push((java.lang.Object)stack35);
    boolean b47 = stack16.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 100.0f+ "'", obj38.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "hi!"+ "'", obj41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 100.0f+ "'", obj43.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    java.lang.Object obj7 = stack1.peek();
    java.lang.Object obj8 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1)+ "'", obj7.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + (-1)+ "'", obj8.equals((-1)));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(short)1);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b6 = stack5.empty();
    java.lang.Object obj7 = stack1.push((java.lang.Object)b6);
    boolean b8 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj14 = stack12.push((java.lang.Object)100.0f);
    java.lang.Object obj15 = stack12.peek();
    java.lang.Object obj17 = stack12.push((java.lang.Object)"hi!");
    java.lang.Object obj18 = stack12.pop();
    java.lang.Object obj20 = stack12.push((java.lang.Object)(short)100);
    java.lang.Object obj21 = stack10.push((java.lang.Object)stack12);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj29 = stack27.push((java.lang.Object)100.0f);
    java.lang.Object obj30 = stack27.peek();
    java.lang.Object obj32 = stack27.push((java.lang.Object)"hi!");
    java.lang.Object obj33 = stack27.pop();
    java.lang.Object obj35 = stack27.push((java.lang.Object)(short)100);
    java.lang.Object obj36 = stack23.push((java.lang.Object)stack27);
    br.ufal.ic.test.mystack.Stack stack38 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj40 = stack38.push((java.lang.Object)1.0d);
    java.lang.Object obj41 = stack38.peek();
    java.lang.Object obj42 = stack23.push(obj41);
    br.ufal.ic.test.mystack.Stack stack44 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj45 = stack23.push((java.lang.Object)stack44);
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b48 = stack47.empty();
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b51 = stack50.empty();
    br.ufal.ic.test.mystack.Stack stack53 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj54 = stack50.push((java.lang.Object)stack53);
    br.ufal.ic.test.mystack.Stack stack56 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj58 = stack56.push((java.lang.Object)100.0f);
    java.lang.Object obj59 = stack56.peek();
    java.lang.Object obj61 = stack56.push((java.lang.Object)"hi!");
    java.lang.Object obj62 = stack53.push(obj61);
    java.lang.Object obj63 = stack47.push(obj61);
    java.lang.Object obj64 = stack44.push((java.lang.Object)stack47);
    java.lang.Object obj65 = stack12.push((java.lang.Object)stack44);
    java.lang.Object obj66 = stack1.push(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (short)1+ "'", obj3.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + true+ "'", obj7.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 100.0f+ "'", obj15.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0d+ "'", obj40.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0d+ "'", obj41.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0d+ "'", obj42.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 100.0f+ "'", obj58.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + 100.0f+ "'", obj59.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "hi!"+ "'", obj61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "hi!"+ "'", obj62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + "hi!"+ "'", obj63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj66);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    java.lang.Object obj11 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj15 = stack13.push((java.lang.Object)10L);
    java.lang.Object obj16 = stack13.pop();
    boolean b17 = stack13.empty();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    java.lang.Object obj24 = stack21.peek();
    java.lang.Object obj26 = stack21.push((java.lang.Object)"hi!");
    java.lang.Object obj27 = stack21.pop();
    java.lang.Object obj29 = stack21.push((java.lang.Object)(short)100);
    java.lang.Object obj30 = stack19.push((java.lang.Object)(short)100);
    boolean b31 = stack19.empty();
    java.lang.Object obj32 = stack19.peek();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)10.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj38 = stack34.peek();
    java.lang.Object obj39 = stack19.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj43 = stack41.push((java.lang.Object)10.0f);
    java.lang.Object obj44 = stack41.peek();
    java.lang.Object obj45 = stack41.pop();
    br.ufal.ic.test.mystack.Stack stack47 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b48 = stack47.empty();
    boolean b49 = stack47.empty();
    br.ufal.ic.test.mystack.Stack stack51 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b52 = stack51.empty();
    boolean b53 = stack51.empty();
    java.lang.Object obj54 = stack47.push((java.lang.Object)stack51);
    java.lang.Object obj55 = stack41.push((java.lang.Object)stack47);
    java.lang.Object obj56 = stack34.push(obj55);
    java.lang.Object obj57 = stack13.push((java.lang.Object)stack34);
    java.lang.Object obj58 = stack34.peek();
    java.lang.Object obj59 = stack34.peek();
    java.lang.Object obj60 = stack34.peek();
    java.lang.Object obj61 = stack1.push((java.lang.Object)stack34);
    java.lang.Object obj62 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10L+ "'", obj15.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 10L+ "'", obj16.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "hi!"+ "'", obj27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (short)100+ "'", obj29.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 10.0f+ "'", obj38.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0f+ "'", obj43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 10.0f+ "'", obj45.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj62);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    java.lang.Object obj4 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1.0d+ "'", obj4.equals(1.0d));

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack1.empty();
    java.lang.Object obj16 = stack1.peek();
    java.lang.Object obj17 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b20 = stack19.empty();
    boolean b21 = stack19.empty();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)100.0f);
    java.lang.Object obj28 = stack25.peek();
    java.lang.Object obj30 = stack25.push((java.lang.Object)"hi!");
    java.lang.Object obj31 = stack25.pop();
    java.lang.Object obj33 = stack25.push((java.lang.Object)(short)100);
    java.lang.Object obj34 = stack23.push((java.lang.Object)(short)100);
    java.lang.Object obj35 = stack23.pop();
    boolean b36 = stack23.empty();
    br.ufal.ic.test.mystack.Stack stack38 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj40 = stack38.push((java.lang.Object)100.0f);
    java.lang.Object obj41 = stack38.peek();
    java.lang.Object obj43 = stack38.push((java.lang.Object)"hi!");
    java.lang.Object obj44 = stack38.pop();
    java.lang.Object obj46 = stack38.push((java.lang.Object)(short)100);
    boolean b47 = stack38.empty();
    java.lang.Object obj48 = stack38.peek();
    java.lang.Object obj49 = stack23.push((java.lang.Object)stack38);
    java.lang.Object obj50 = stack38.pop();
    java.lang.Object obj51 = stack38.peek();
    java.lang.Object obj52 = stack19.push((java.lang.Object)stack38);
    java.lang.Object obj53 = stack19.pop();
    java.lang.Object obj54 = stack1.push((java.lang.Object)stack19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "hi!"+ "'", obj30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)100+ "'", obj35.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 100.0f+ "'", obj40.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 100.0f+ "'", obj41.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "hi!"+ "'", obj43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "hi!"+ "'", obj44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + (short)100+ "'", obj46.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (short)100+ "'", obj48.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (short)100+ "'", obj50.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 100.0f+ "'", obj51.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    boolean b23 = stack16.empty();
    java.lang.Object obj24 = stack16.peek();
    java.lang.Object obj25 = stack16.pop();
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b28 = stack27.empty();
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj31 = stack27.push((java.lang.Object)stack30);
    java.lang.Object obj32 = stack16.push(obj31);
    java.lang.Object obj33 = stack5.push((java.lang.Object)stack16);
    java.lang.Object obj34 = stack5.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj18 = stack16.push((java.lang.Object)1.0d);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack1.push(obj19);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj23 = stack1.push((java.lang.Object)stack22);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj24 = stack22.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0d+ "'", obj18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0d+ "'", obj19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0d+ "'", obj20.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    boolean b12 = stack5.empty();
    java.lang.Object obj13 = stack5.peek();
    java.lang.Object obj14 = stack5.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj16 = stack1.peek();
    boolean b17 = stack1.empty();
    java.lang.Object obj18 = stack1.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    java.lang.Object obj14 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)10.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push((java.lang.Object)stack16);
    java.lang.Object obj22 = stack16.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj23 = stack16.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 10.0f+ "'", obj18.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 10.0f+ "'", obj22.equals(10.0f));

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack6.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)100.0f);
    java.lang.Object obj28 = stack25.peek();
    java.lang.Object obj30 = stack25.push((java.lang.Object)"hi!");
    java.lang.Object obj31 = stack25.pop();
    java.lang.Object obj33 = stack25.push((java.lang.Object)(short)100);
    java.lang.Object obj34 = stack21.push((java.lang.Object)stack25);
    java.lang.Object obj35 = stack10.push((java.lang.Object)stack21);
    boolean b36 = stack10.empty();
    java.lang.Object obj37 = new java.lang.Object();
    java.lang.Object obj38 = stack10.push(obj37);
    java.lang.Object obj39 = stack10.pop();
    java.lang.Object obj40 = stack1.push((java.lang.Object)stack10);
    java.lang.Object obj41 = stack1.pop();
    boolean b42 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "hi!"+ "'", obj30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    boolean b6 = stack1.empty();
    boolean b7 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b10 = stack9.empty();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)100.0f);
    java.lang.Object obj21 = stack18.peek();
    java.lang.Object obj23 = stack18.push((java.lang.Object)"hi!");
    java.lang.Object obj24 = stack15.push(obj23);
    java.lang.Object obj25 = stack9.push(obj23);
    java.lang.Object obj26 = stack1.push((java.lang.Object)stack9);
    java.lang.Object obj27 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj25 = stack20.push((java.lang.Object)"hi!");
    java.lang.Object obj26 = stack20.pop();
    java.lang.Object obj28 = stack20.push((java.lang.Object)(short)100);
    java.lang.Object obj29 = stack16.push((java.lang.Object)stack20);
    java.lang.Object obj30 = stack5.push((java.lang.Object)stack16);
    boolean b31 = stack5.empty();
    java.lang.Object obj32 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)10.0f);
    java.lang.Object obj37 = stack34.peek();
    boolean b38 = stack34.empty();
    boolean b39 = stack34.empty();
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj43 = stack41.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack45 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b46 = stack45.empty();
    java.lang.Object obj48 = stack45.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj52 = stack50.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack54 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj56 = stack54.push((java.lang.Object)100.0f);
    java.lang.Object obj57 = stack54.peek();
    java.lang.Object obj59 = stack54.push((java.lang.Object)"hi!");
    java.lang.Object obj60 = stack54.pop();
    java.lang.Object obj62 = stack54.push((java.lang.Object)(short)100);
    java.lang.Object obj63 = stack50.push((java.lang.Object)stack54);
    br.ufal.ic.test.mystack.Stack stack65 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj67 = stack65.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack69 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj71 = stack69.push((java.lang.Object)100.0f);
    java.lang.Object obj72 = stack69.peek();
    java.lang.Object obj74 = stack69.push((java.lang.Object)"hi!");
    java.lang.Object obj75 = stack69.pop();
    java.lang.Object obj77 = stack69.push((java.lang.Object)(short)100);
    java.lang.Object obj78 = stack65.push((java.lang.Object)stack69);
    java.lang.Object obj79 = stack54.push((java.lang.Object)stack65);
    boolean b80 = stack54.empty();
    java.lang.Object obj81 = new java.lang.Object();
    java.lang.Object obj82 = stack54.push(obj81);
    java.lang.Object obj83 = stack54.pop();
    java.lang.Object obj84 = stack45.push((java.lang.Object)stack54);
    java.lang.Object obj85 = stack45.peek();
    java.lang.Object obj86 = stack41.push(obj85);
    java.lang.Object obj87 = stack34.push((java.lang.Object)stack41);
    boolean b88 = stack41.empty();
    java.lang.Object obj89 = stack41.peek();
    java.lang.Object obj90 = stack5.push((java.lang.Object)stack41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0f+ "'", obj37.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 1.0d+ "'", obj43.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (byte)0+ "'", obj48.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 100.0f+ "'", obj52.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 100.0f+ "'", obj56.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 100.0f+ "'", obj57.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + "hi!"+ "'", obj59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "hi!"+ "'", obj60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + (short)100+ "'", obj62.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + 100.0f+ "'", obj67.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + 100.0f+ "'", obj71.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + 100.0f+ "'", obj72.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "hi!"+ "'", obj74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "hi!"+ "'", obj75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj77 + "' != '" + (short)100+ "'", obj77.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj90);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack5.empty();
    java.lang.Object obj17 = stack5.push((java.lang.Object)10L);
    boolean b18 = stack5.empty();
    boolean b19 = stack5.empty();
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)100.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj28 = stack23.push((java.lang.Object)"hi!");
    java.lang.Object obj29 = stack23.pop();
    java.lang.Object obj31 = stack23.push((java.lang.Object)(short)100);
    java.lang.Object obj32 = stack21.push((java.lang.Object)(short)100);
    boolean b33 = stack21.empty();
    java.lang.Object obj34 = stack21.pop();
    boolean b35 = stack21.empty();
    java.lang.Object obj36 = stack5.push((java.lang.Object)stack21);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj37 = stack21.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10L+ "'", obj17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 100.0f+ "'", obj25.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "hi!"+ "'", obj28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "hi!"+ "'", obj29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + (short)100+ "'", obj31.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b9 = stack8.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b12 = stack11.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj15 = stack11.push((java.lang.Object)stack14);
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    java.lang.Object obj20 = stack17.peek();
    java.lang.Object obj22 = stack17.push((java.lang.Object)"hi!");
    java.lang.Object obj23 = stack14.push(obj22);
    java.lang.Object obj24 = stack8.push(obj22);
    java.lang.Object obj25 = stack8.peek();
    boolean b26 = stack8.empty();
    java.lang.Object obj27 = stack1.push((java.lang.Object)b26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-1)+ "'", obj3.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1)+ "'", obj6.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!"+ "'", obj23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + false+ "'", obj27.equals(false));

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    boolean b12 = stack5.empty();
    java.lang.Object obj13 = stack5.peek();
    java.lang.Object obj14 = stack5.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj16 = stack1.peek();
    java.lang.Object obj17 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b20 = stack19.empty();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj23 = stack19.push((java.lang.Object)stack22);
    boolean b24 = stack19.empty();
    java.lang.Object obj25 = stack19.pop();
    java.lang.Object obj27 = stack19.push((java.lang.Object)10L);
    java.lang.Object obj28 = stack1.push((java.lang.Object)10L);
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b31 = stack30.empty();
    br.ufal.ic.test.mystack.Stack stack33 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b34 = stack33.empty();
    br.ufal.ic.test.mystack.Stack stack36 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj37 = stack33.push((java.lang.Object)stack36);
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj41 = stack39.push((java.lang.Object)100.0f);
    java.lang.Object obj42 = stack39.peek();
    java.lang.Object obj44 = stack39.push((java.lang.Object)"hi!");
    java.lang.Object obj45 = stack36.push(obj44);
    java.lang.Object obj46 = stack30.push(obj44);
    java.lang.Object obj47 = stack30.pop();
    java.lang.Object obj48 = stack1.push((java.lang.Object)stack30);
    br.ufal.ic.test.mystack.Stack stack50 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    br.ufal.ic.test.mystack.Stack stack52 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj54 = stack52.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack56 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj58 = stack56.push((java.lang.Object)100.0f);
    java.lang.Object obj59 = stack56.peek();
    java.lang.Object obj61 = stack56.push((java.lang.Object)"hi!");
    java.lang.Object obj62 = stack56.pop();
    java.lang.Object obj64 = stack56.push((java.lang.Object)(short)100);
    java.lang.Object obj65 = stack52.push((java.lang.Object)stack56);
    br.ufal.ic.test.mystack.Stack stack67 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj69 = stack67.push((java.lang.Object)1.0d);
    java.lang.Object obj70 = stack67.peek();
    java.lang.Object obj71 = stack52.push(obj70);
    java.lang.Object obj72 = stack52.peek();
    br.ufal.ic.test.mystack.Stack stack74 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj76 = stack74.push((java.lang.Object)100.0f);
    java.lang.Object obj77 = stack74.peek();
    boolean b78 = stack74.empty();
    boolean b79 = stack74.empty();
    java.lang.Object obj80 = stack52.push((java.lang.Object)b79);
    java.lang.Object obj81 = stack50.push(obj80);
    java.lang.Object obj82 = stack30.push(obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 100.0f+ "'", obj14.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10L+ "'", obj27.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 10L+ "'", obj28.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 100.0f+ "'", obj41.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 100.0f+ "'", obj42.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "hi!"+ "'", obj44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "hi!"+ "'", obj45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + "hi!"+ "'", obj46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "hi!"+ "'", obj47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 100.0f+ "'", obj54.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 100.0f+ "'", obj58.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + 100.0f+ "'", obj59.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "hi!"+ "'", obj61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "hi!"+ "'", obj62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + (short)100+ "'", obj64.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 1.0d+ "'", obj69.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 1.0d+ "'", obj70.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + 1.0d+ "'", obj71.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj72 + "' != '" + 1.0d+ "'", obj72.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj76 + "' != '" + 100.0f+ "'", obj76.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 100.0f+ "'", obj77.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj80 + "' != '" + false+ "'", obj80.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj81 + "' != '" + false+ "'", obj81.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj82 + "' != '" + false+ "'", obj82.equals(false));

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    java.lang.Object obj4 = stack1.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack6 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj8 = stack6.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack6.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj23 = stack21.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack25 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj27 = stack25.push((java.lang.Object)100.0f);
    java.lang.Object obj28 = stack25.peek();
    java.lang.Object obj30 = stack25.push((java.lang.Object)"hi!");
    java.lang.Object obj31 = stack25.pop();
    java.lang.Object obj33 = stack25.push((java.lang.Object)(short)100);
    java.lang.Object obj34 = stack21.push((java.lang.Object)stack25);
    java.lang.Object obj35 = stack10.push((java.lang.Object)stack21);
    boolean b36 = stack10.empty();
    java.lang.Object obj37 = new java.lang.Object();
    java.lang.Object obj38 = stack10.push(obj37);
    java.lang.Object obj39 = stack10.pop();
    java.lang.Object obj40 = stack1.push((java.lang.Object)stack10);
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj44 = stack42.push((java.lang.Object)10.0f);
    boolean b45 = stack42.empty();
    java.lang.Object obj46 = stack42.pop();
    java.lang.Object obj47 = stack10.push(obj46);
    java.lang.Object obj48 = stack10.pop();
    boolean b49 = stack10.empty();
    boolean b50 = stack10.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte)0+ "'", obj4.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 100.0f+ "'", obj23.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "hi!"+ "'", obj30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (short)100+ "'", obj33.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 10.0f+ "'", obj46.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 10.0f+ "'", obj47.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 10.0f+ "'", obj48.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    java.lang.Object obj47 = stack22.peek();
    java.lang.Object obj48 = stack22.pop();
    java.lang.Object obj49 = stack22.pop();
    boolean b50 = stack22.empty();
    boolean b51 = stack22.empty();
    java.lang.Object obj53 = stack22.push((java.lang.Object)1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 10.0f+ "'", obj49.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 1.0f+ "'", obj53.equals(1.0f));

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)1);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj6 = stack4.push((java.lang.Object)10.0f);
    java.lang.Object obj7 = stack4.peek();
    java.lang.Object obj8 = stack4.pop();
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    boolean b12 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack14 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b15 = stack14.empty();
    boolean b16 = stack14.empty();
    java.lang.Object obj17 = stack10.push((java.lang.Object)stack14);
    java.lang.Object obj18 = stack4.push((java.lang.Object)stack10);
    java.lang.Object obj19 = stack1.push((java.lang.Object)stack4);
    boolean b20 = stack4.empty();
    boolean b21 = stack4.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    boolean b25 = stack16.empty();
    java.lang.Object obj26 = stack16.peek();
    java.lang.Object obj27 = stack1.push((java.lang.Object)stack16);
    boolean b28 = stack16.empty();
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj32 = stack30.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)100.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj39 = stack34.push((java.lang.Object)"hi!");
    java.lang.Object obj40 = stack34.pop();
    java.lang.Object obj42 = stack34.push((java.lang.Object)(short)100);
    java.lang.Object obj43 = stack30.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack45 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj47 = stack45.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack49 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj51 = stack49.push((java.lang.Object)100.0f);
    java.lang.Object obj52 = stack49.peek();
    java.lang.Object obj54 = stack49.push((java.lang.Object)"hi!");
    java.lang.Object obj55 = stack49.pop();
    java.lang.Object obj57 = stack49.push((java.lang.Object)(short)100);
    java.lang.Object obj58 = stack45.push((java.lang.Object)stack49);
    java.lang.Object obj59 = stack34.push((java.lang.Object)stack45);
    boolean b60 = stack34.empty();
    java.lang.Object obj61 = stack34.pop();
    java.lang.Object obj62 = stack16.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack64 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj66 = stack64.push((java.lang.Object)100.0f);
    java.lang.Object obj67 = stack64.peek();
    java.lang.Object obj69 = stack64.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack71 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b72 = stack71.empty();
    java.lang.Object obj73 = stack64.push((java.lang.Object)stack71);
    java.lang.Object obj74 = stack34.push((java.lang.Object)stack71);
    java.lang.Object obj75 = stack34.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + (short)100+ "'", obj42.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 100.0f+ "'", obj47.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 100.0f+ "'", obj51.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 100.0f+ "'", obj52.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "hi!"+ "'", obj54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "hi!"+ "'", obj55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + (short)100+ "'", obj57.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + 100.0f+ "'", obj66.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + 100.0f+ "'", obj67.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + "hi!"+ "'", obj69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj75);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    boolean b4 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)(-1));
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj20 = stack16.peek();
    java.lang.Object obj21 = stack1.push(obj20);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b24 = stack23.empty();
    boolean b25 = stack23.empty();
    br.ufal.ic.test.mystack.Stack stack27 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)100.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj34 = stack29.push((java.lang.Object)"hi!");
    java.lang.Object obj35 = stack29.pop();
    java.lang.Object obj37 = stack29.push((java.lang.Object)(short)100);
    java.lang.Object obj38 = stack27.push((java.lang.Object)(short)100);
    java.lang.Object obj39 = stack27.pop();
    boolean b40 = stack27.empty();
    br.ufal.ic.test.mystack.Stack stack42 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj44 = stack42.push((java.lang.Object)100.0f);
    java.lang.Object obj45 = stack42.peek();
    java.lang.Object obj47 = stack42.push((java.lang.Object)"hi!");
    java.lang.Object obj48 = stack42.pop();
    java.lang.Object obj50 = stack42.push((java.lang.Object)(short)100);
    boolean b51 = stack42.empty();
    java.lang.Object obj52 = stack42.peek();
    java.lang.Object obj53 = stack27.push((java.lang.Object)stack42);
    java.lang.Object obj54 = stack42.pop();
    java.lang.Object obj55 = stack42.peek();
    java.lang.Object obj56 = stack23.push((java.lang.Object)stack42);
    java.lang.Object obj57 = stack23.peek();
    java.lang.Object obj58 = stack1.push((java.lang.Object)stack23);
    boolean b59 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (-1)+ "'", obj18.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (-1)+ "'", obj19.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (-1)+ "'", obj20.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (-1)+ "'", obj21.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "hi!"+ "'", obj34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "hi!"+ "'", obj35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + (short)100+ "'", obj37.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + (short)100+ "'", obj38.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + (short)100+ "'", obj39.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 100.0f+ "'", obj45.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "hi!"+ "'", obj47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "hi!"+ "'", obj48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (short)100+ "'", obj50.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + (short)100+ "'", obj52.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + (short)100+ "'", obj54.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + 100.0f+ "'", obj55.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack((-1));
    boolean b13 = stack12.empty();
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack12);
    java.lang.Object obj15 = stack1.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)100);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack((-1));
    java.lang.Object obj4 = stack1.push((java.lang.Object)(-1));
    java.lang.Object obj5 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b8 = stack7.empty();
    java.lang.Object obj10 = stack7.push((java.lang.Object)(byte)0);
    java.lang.Object obj11 = stack7.peek();
    boolean b12 = stack7.empty();
    java.lang.Object obj13 = stack1.push((java.lang.Object)stack7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (-1)+ "'", obj4.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (-1)+ "'", obj5.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (byte)0+ "'", obj10.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte)0+ "'", obj11.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    java.lang.Object obj8 = stack1.peek();
    java.lang.Object obj9 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj13 = stack11.push((java.lang.Object)10.0f);
    java.lang.Object obj14 = stack11.peek();
    java.lang.Object obj15 = stack11.peek();
    java.lang.Object obj16 = stack11.pop();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj20 = stack18.push((java.lang.Object)10.0f);
    java.lang.Object obj21 = stack18.peek();
    boolean b22 = stack18.empty();
    boolean b23 = stack18.empty();
    java.lang.Object obj24 = stack11.push((java.lang.Object)b23);
    java.lang.Object obj25 = stack11.pop();
    java.lang.Object obj26 = stack1.push(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10.0f+ "'", obj13.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10.0f+ "'", obj14.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10.0f+ "'", obj15.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 10.0f+ "'", obj16.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0f+ "'", obj20.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 10.0f+ "'", obj21.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + false+ "'", obj24.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + false+ "'", obj25.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + false+ "'", obj26.equals(false));

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)1);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b4 = stack3.empty();
    boolean b5 = stack3.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    java.lang.Object obj10 = stack3.push((java.lang.Object)stack7);
    java.lang.Object obj12 = stack7.push((java.lang.Object)false);
    boolean b13 = stack7.empty();
    java.lang.Object obj14 = stack7.pop();
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack7);
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b18 = stack17.empty();
    boolean b19 = stack17.empty();
    br.ufal.ic.test.mystack.Stack stack21 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b22 = stack21.empty();
    boolean b23 = stack21.empty();
    java.lang.Object obj24 = stack17.push((java.lang.Object)stack21);
    java.lang.Object obj26 = stack21.push((java.lang.Object)(-1L));
    java.lang.Object obj27 = stack21.peek();
    java.lang.Object obj28 = stack21.peek();
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b31 = stack30.empty();
    boolean b32 = stack30.empty();
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b35 = stack34.empty();
    boolean b36 = stack34.empty();
    java.lang.Object obj37 = stack30.push((java.lang.Object)stack34);
    java.lang.Object obj39 = stack34.push((java.lang.Object)false);
    boolean b40 = stack34.empty();
    java.lang.Object obj41 = stack34.pop();
    boolean b42 = stack34.empty();
    java.lang.Object obj43 = stack21.push((java.lang.Object)stack34);
    java.lang.Object obj44 = stack21.pop();
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack21);
    boolean b46 = stack21.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + false+ "'", obj12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + false+ "'", obj14.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (-1L)+ "'", obj26.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + (-1L)+ "'", obj27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (-1L)+ "'", obj28.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + false+ "'", obj39.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + false+ "'", obj41.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    java.lang.Object obj21 = stack1.push((java.lang.Object)b20);
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    boolean b27 = stack23.empty();
    boolean b28 = stack23.empty();
    java.lang.Object obj29 = stack23.peek();
    boolean b30 = stack23.empty();
    java.lang.Object obj31 = stack1.push((java.lang.Object)stack23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + true+ "'", obj21.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 10.0f+ "'", obj29.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)100);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    boolean b4 = stack1.empty();
    boolean b5 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj5 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b8 = stack7.empty();
    boolean b9 = stack7.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b12 = stack11.empty();
    boolean b13 = stack11.empty();
    java.lang.Object obj14 = stack7.push((java.lang.Object)stack11);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack7);
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj19 = stack17.push((java.lang.Object)100.0f);
    java.lang.Object obj20 = stack17.peek();
    java.lang.Object obj22 = stack17.push((java.lang.Object)"hi!");
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack(1);
    boolean b25 = stack24.empty();
    java.lang.Object obj26 = stack17.push((java.lang.Object)stack24);
    boolean b27 = stack24.empty();
    java.lang.Object obj28 = stack7.push((java.lang.Object)stack24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 10.0f+ "'", obj5.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 100.0f+ "'", obj20.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)1.0d);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack5.push((java.lang.Object)stack9);
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj22 = stack20.push((java.lang.Object)1.0d);
    java.lang.Object obj23 = stack20.peek();
    java.lang.Object obj24 = stack5.push(obj23);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    java.lang.Object obj27 = stack5.push((java.lang.Object)stack26);
    java.lang.Object obj28 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj32 = stack30.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack34 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj36 = stack34.push((java.lang.Object)100.0f);
    java.lang.Object obj37 = stack34.peek();
    java.lang.Object obj39 = stack34.push((java.lang.Object)"hi!");
    java.lang.Object obj40 = stack34.pop();
    java.lang.Object obj42 = stack34.push((java.lang.Object)(short)100);
    java.lang.Object obj43 = stack30.push((java.lang.Object)stack34);
    br.ufal.ic.test.mystack.Stack stack45 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj47 = stack45.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack49 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj51 = stack49.push((java.lang.Object)100.0f);
    java.lang.Object obj52 = stack49.peek();
    java.lang.Object obj54 = stack49.push((java.lang.Object)"hi!");
    java.lang.Object obj55 = stack49.pop();
    java.lang.Object obj57 = stack49.push((java.lang.Object)(short)100);
    java.lang.Object obj58 = stack45.push((java.lang.Object)stack49);
    java.lang.Object obj59 = stack34.push((java.lang.Object)stack45);
    boolean b60 = stack34.empty();
    java.lang.Object obj61 = stack1.push((java.lang.Object)b60);
    boolean b62 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 1.0d+ "'", obj3.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0d+ "'", obj22.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 1.0d+ "'", obj23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 1.0d+ "'", obj24.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 100.0f+ "'", obj32.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 100.0f+ "'", obj36.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 100.0f+ "'", obj37.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "hi!"+ "'", obj39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "hi!"+ "'", obj40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj42 + "' != '" + (short)100+ "'", obj42.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 100.0f+ "'", obj47.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 100.0f+ "'", obj51.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 100.0f+ "'", obj52.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "hi!"+ "'", obj54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "hi!"+ "'", obj55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + (short)100+ "'", obj57.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + false+ "'", obj61.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    java.lang.Object obj4 = stack1.peek();
    java.lang.Object obj6 = stack1.push((java.lang.Object)"hi!");
    java.lang.Object obj7 = stack1.pop();
    boolean b8 = stack1.empty();
    java.lang.Object obj9 = stack1.peek();
    java.lang.Object obj10 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack1.push(obj16);
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj21 = stack19.push((java.lang.Object)10.0f);
    java.lang.Object obj22 = stack19.peek();
    boolean b23 = stack19.empty();
    java.lang.Object obj24 = stack19.pop();
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack28 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj30 = stack28.push((java.lang.Object)100.0f);
    java.lang.Object obj31 = stack28.peek();
    java.lang.Object obj33 = stack28.push((java.lang.Object)"hi!");
    java.lang.Object obj34 = stack28.pop();
    java.lang.Object obj36 = stack28.push((java.lang.Object)(short)100);
    java.lang.Object obj37 = stack26.push((java.lang.Object)(short)100);
    boolean b38 = stack26.empty();
    java.lang.Object obj39 = stack26.peek();
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj43 = stack41.push((java.lang.Object)10.0f);
    java.lang.Object obj44 = stack41.peek();
    java.lang.Object obj45 = stack41.peek();
    java.lang.Object obj46 = stack26.push((java.lang.Object)stack41);
    java.lang.Object obj47 = stack19.push((java.lang.Object)stack41);
    java.lang.Object obj48 = new java.lang.Object();
    java.lang.Object obj49 = stack19.push(obj48);
    java.lang.Object obj50 = stack1.push(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "hi!"+ "'", obj6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "hi!"+ "'", obj7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 10.0f+ "'", obj21.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 10.0f+ "'", obj22.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 100.0f+ "'", obj30.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 100.0f+ "'", obj31.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "hi!"+ "'", obj33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "hi!"+ "'", obj34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (short)100+ "'", obj36.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + (short)100+ "'", obj37.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + (short)100+ "'", obj39.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0f+ "'", obj43.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10.0f+ "'", obj44.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 10.0f+ "'", obj45.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    boolean b13 = stack1.empty();
    java.lang.Object obj14 = stack1.peek();
    boolean b15 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj21 = stack19.push((java.lang.Object)100.0f);
    java.lang.Object obj22 = stack19.peek();
    java.lang.Object obj24 = stack19.push((java.lang.Object)"hi!");
    java.lang.Object obj25 = stack19.pop();
    java.lang.Object obj27 = stack19.push((java.lang.Object)(short)100);
    java.lang.Object obj28 = stack17.push((java.lang.Object)(short)100);
    boolean b29 = stack17.empty();
    java.lang.Object obj30 = stack17.peek();
    br.ufal.ic.test.mystack.Stack stack32 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj34 = stack32.push((java.lang.Object)10.0f);
    java.lang.Object obj35 = stack32.peek();
    java.lang.Object obj36 = stack32.peek();
    java.lang.Object obj37 = stack17.push((java.lang.Object)stack32);
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj41 = stack39.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack43 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj45 = stack43.push((java.lang.Object)100.0f);
    java.lang.Object obj46 = stack43.peek();
    java.lang.Object obj48 = stack43.push((java.lang.Object)"hi!");
    java.lang.Object obj49 = stack43.pop();
    java.lang.Object obj51 = stack43.push((java.lang.Object)(short)100);
    java.lang.Object obj52 = stack39.push((java.lang.Object)stack43);
    br.ufal.ic.test.mystack.Stack stack54 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj56 = stack54.push((java.lang.Object)(-1));
    java.lang.Object obj57 = stack54.peek();
    boolean b58 = stack54.empty();
    java.lang.Object obj59 = stack54.peek();
    br.ufal.ic.test.mystack.Stack stack61 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj63 = stack61.push((java.lang.Object)100.0f);
    java.lang.Object obj64 = stack61.peek();
    java.lang.Object obj66 = stack61.push((java.lang.Object)"hi!");
    java.lang.Object obj67 = stack61.pop();
    java.lang.Object obj69 = stack61.push((java.lang.Object)(short)100);
    boolean b70 = stack61.empty();
    java.lang.Object obj71 = stack61.peek();
    br.ufal.ic.test.mystack.Stack stack73 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj75 = stack73.push((java.lang.Object)100.0f);
    java.lang.Object obj76 = stack73.peek();
    java.lang.Object obj78 = stack73.push((java.lang.Object)"hi!");
    java.lang.Object obj79 = stack73.pop();
    boolean b80 = stack73.empty();
    java.lang.Object obj81 = stack73.peek();
    java.lang.Object obj82 = stack73.pop();
    br.ufal.ic.test.mystack.Stack stack84 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b85 = stack84.empty();
    br.ufal.ic.test.mystack.Stack stack87 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj88 = stack84.push((java.lang.Object)stack87);
    java.lang.Object obj89 = stack73.push(obj88);
    java.lang.Object obj90 = stack61.push(obj89);
    java.lang.Object obj91 = stack54.push((java.lang.Object)stack61);
    java.lang.Object obj92 = stack39.push((java.lang.Object)stack61);
    java.lang.Object obj93 = stack17.push(obj92);
    java.lang.Object obj94 = stack1.push((java.lang.Object)stack17);
    java.lang.Object obj95 = stack17.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)100+ "'", obj14.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + (short)100+ "'", obj27.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (short)100+ "'", obj28.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (short)100+ "'", obj30.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10.0f+ "'", obj34.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0f+ "'", obj35.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 100.0f+ "'", obj41.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 100.0f+ "'", obj45.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 100.0f+ "'", obj46.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "hi!"+ "'", obj48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "hi!"+ "'", obj49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + (short)100+ "'", obj51.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj56 + "' != '" + (-1)+ "'", obj56.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + (-1)+ "'", obj57.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + (-1)+ "'", obj59.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 100.0f+ "'", obj63.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 100.0f+ "'", obj64.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "hi!"+ "'", obj66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "hi!"+ "'", obj67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + (short)100+ "'", obj69.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj71 + "' != '" + (short)100+ "'", obj71.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 100.0f+ "'", obj75.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj76 + "' != '" + 100.0f+ "'", obj76.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "hi!"+ "'", obj78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj79 + "' != '" + "hi!"+ "'", obj79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj81 + "' != '" + 100.0f+ "'", obj81.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj82 + "' != '" + 100.0f+ "'", obj82.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj95);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)10.0f);
    java.lang.Object obj8 = stack5.peek();
    boolean b9 = stack5.empty();
    java.lang.Object obj10 = stack5.pop();
    br.ufal.ic.test.mystack.Stack stack12 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b13 = stack12.empty();
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj16 = stack12.push((java.lang.Object)stack15);
    java.lang.Object obj17 = stack5.push((java.lang.Object)stack12);
    java.lang.Object obj18 = stack1.push((java.lang.Object)stack5);
    java.lang.Object obj19 = stack5.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = stack5.pop();
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10.0f+ "'", obj7.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)1);
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj9 = stack7.push((java.lang.Object)100.0f);
    java.lang.Object obj10 = stack7.peek();
    java.lang.Object obj12 = stack7.push((java.lang.Object)"hi!");
    java.lang.Object obj13 = stack7.pop();
    java.lang.Object obj15 = stack7.push((java.lang.Object)(short)100);
    java.lang.Object obj16 = stack3.push((java.lang.Object)stack7);
    boolean b17 = stack3.empty();
    java.lang.Object obj18 = stack3.peek();
    java.lang.Object obj19 = stack1.push(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + "hi!"+ "'", obj12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "hi!"+ "'", obj13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (short)100+ "'", obj15.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(short)10);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10L);
    java.lang.Object obj4 = stack1.pop();
    boolean b5 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack9 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj11 = stack9.push((java.lang.Object)100.0f);
    java.lang.Object obj12 = stack9.peek();
    java.lang.Object obj14 = stack9.push((java.lang.Object)"hi!");
    java.lang.Object obj15 = stack9.pop();
    java.lang.Object obj17 = stack9.push((java.lang.Object)(short)100);
    java.lang.Object obj18 = stack7.push((java.lang.Object)(short)100);
    boolean b19 = stack7.empty();
    java.lang.Object obj20 = stack7.peek();
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)10.0f);
    java.lang.Object obj25 = stack22.peek();
    java.lang.Object obj26 = stack22.peek();
    java.lang.Object obj27 = stack7.push((java.lang.Object)stack22);
    br.ufal.ic.test.mystack.Stack stack29 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj31 = stack29.push((java.lang.Object)10.0f);
    java.lang.Object obj32 = stack29.peek();
    java.lang.Object obj33 = stack29.pop();
    br.ufal.ic.test.mystack.Stack stack35 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b36 = stack35.empty();
    boolean b37 = stack35.empty();
    br.ufal.ic.test.mystack.Stack stack39 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b40 = stack39.empty();
    boolean b41 = stack39.empty();
    java.lang.Object obj42 = stack35.push((java.lang.Object)stack39);
    java.lang.Object obj43 = stack29.push((java.lang.Object)stack35);
    java.lang.Object obj44 = stack22.push(obj43);
    java.lang.Object obj45 = stack1.push((java.lang.Object)stack22);
    java.lang.Object obj46 = stack22.peek();
    java.lang.Object obj47 = stack22.peek();
    java.lang.Object obj48 = stack22.peek();
    java.lang.Object obj49 = stack22.peek();
    boolean b50 = stack22.empty();
    java.lang.Object obj51 = stack22.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10L+ "'", obj3.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10L+ "'", obj4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 100.0f+ "'", obj11.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "hi!"+ "'", obj14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)100+ "'", obj17.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short)100+ "'", obj20.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0f+ "'", obj24.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 10.0f+ "'", obj32.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0f+ "'", obj33.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack3 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj5 = stack3.push((java.lang.Object)100.0f);
    java.lang.Object obj6 = stack3.peek();
    java.lang.Object obj8 = stack3.push((java.lang.Object)"hi!");
    java.lang.Object obj9 = stack3.pop();
    java.lang.Object obj11 = stack3.push((java.lang.Object)(short)100);
    java.lang.Object obj12 = stack1.push((java.lang.Object)(short)100);
    java.lang.Object obj13 = stack1.pop();
    boolean b14 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack16 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj18 = stack16.push((java.lang.Object)100.0f);
    java.lang.Object obj19 = stack16.peek();
    java.lang.Object obj21 = stack16.push((java.lang.Object)"hi!");
    java.lang.Object obj22 = stack16.pop();
    java.lang.Object obj24 = stack16.push((java.lang.Object)(short)100);
    boolean b25 = stack16.empty();
    java.lang.Object obj26 = stack16.peek();
    java.lang.Object obj27 = stack1.push((java.lang.Object)stack16);
    boolean b28 = stack1.empty();
    boolean b29 = stack1.empty();
    java.lang.Object obj30 = stack1.peek();
    java.lang.Object obj31 = stack1.pop();
    boolean b32 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!"+ "'", obj8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "hi!"+ "'", obj9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (short)100+ "'", obj11.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)100+ "'", obj12.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 100.0f+ "'", obj18.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 100.0f+ "'", obj19.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "hi!"+ "'", obj21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)100+ "'", obj24.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)100+ "'", obj26.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b2 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack4 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b5 = stack4.empty();
    br.ufal.ic.test.mystack.Stack stack7 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj8 = stack4.push((java.lang.Object)stack7);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack7.push(obj15);
    java.lang.Object obj17 = stack1.push(obj15);
    java.lang.Object obj18 = stack1.peek();
    br.ufal.ic.test.mystack.Stack stack20 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj22 = stack20.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack24 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj26 = stack24.push((java.lang.Object)100.0f);
    java.lang.Object obj27 = stack24.peek();
    java.lang.Object obj29 = stack24.push((java.lang.Object)"hi!");
    java.lang.Object obj30 = stack24.pop();
    java.lang.Object obj32 = stack24.push((java.lang.Object)(short)100);
    java.lang.Object obj33 = stack20.push((java.lang.Object)stack24);
    java.lang.Object obj34 = stack1.push((java.lang.Object)stack20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "hi!"+ "'", obj17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "hi!"+ "'", obj18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 100.0f+ "'", obj26.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 100.0f+ "'", obj27.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "hi!"+ "'", obj29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "hi!"+ "'", obj30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)100+ "'", obj32.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b9 = stack8.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj12 = stack8.push((java.lang.Object)stack11);
    java.lang.Object obj13 = stack1.push((java.lang.Object)stack8);
    br.ufal.ic.test.mystack.Stack stack15 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj17 = stack15.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack19 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj21 = stack19.push((java.lang.Object)100.0f);
    java.lang.Object obj22 = stack19.peek();
    java.lang.Object obj24 = stack19.push((java.lang.Object)"hi!");
    java.lang.Object obj25 = stack19.pop();
    java.lang.Object obj27 = stack19.push((java.lang.Object)(short)100);
    java.lang.Object obj28 = stack15.push((java.lang.Object)stack19);
    br.ufal.ic.test.mystack.Stack stack30 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj32 = stack30.push((java.lang.Object)(-1));
    java.lang.Object obj33 = stack30.peek();
    java.lang.Object obj34 = stack30.peek();
    java.lang.Object obj35 = stack15.push(obj34);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b38 = stack37.empty();
    boolean b39 = stack37.empty();
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack43 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj45 = stack43.push((java.lang.Object)100.0f);
    java.lang.Object obj46 = stack43.peek();
    java.lang.Object obj48 = stack43.push((java.lang.Object)"hi!");
    java.lang.Object obj49 = stack43.pop();
    java.lang.Object obj51 = stack43.push((java.lang.Object)(short)100);
    java.lang.Object obj52 = stack41.push((java.lang.Object)(short)100);
    java.lang.Object obj53 = stack41.pop();
    boolean b54 = stack41.empty();
    br.ufal.ic.test.mystack.Stack stack56 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj58 = stack56.push((java.lang.Object)100.0f);
    java.lang.Object obj59 = stack56.peek();
    java.lang.Object obj61 = stack56.push((java.lang.Object)"hi!");
    java.lang.Object obj62 = stack56.pop();
    java.lang.Object obj64 = stack56.push((java.lang.Object)(short)100);
    boolean b65 = stack56.empty();
    java.lang.Object obj66 = stack56.peek();
    java.lang.Object obj67 = stack41.push((java.lang.Object)stack56);
    java.lang.Object obj68 = stack56.pop();
    java.lang.Object obj69 = stack56.peek();
    java.lang.Object obj70 = stack37.push((java.lang.Object)stack56);
    java.lang.Object obj71 = stack37.peek();
    java.lang.Object obj72 = stack15.push((java.lang.Object)stack37);
    java.lang.Object obj73 = stack1.push((java.lang.Object)stack15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 100.0f+ "'", obj17.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 100.0f+ "'", obj21.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 100.0f+ "'", obj22.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "hi!"+ "'", obj24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "hi!"+ "'", obj25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + (short)100+ "'", obj27.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (-1)+ "'", obj32.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + (-1)+ "'", obj33.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (-1)+ "'", obj34.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (-1)+ "'", obj35.equals((-1)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 100.0f+ "'", obj45.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 100.0f+ "'", obj46.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "hi!"+ "'", obj48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "hi!"+ "'", obj49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj51 + "' != '" + (short)100+ "'", obj51.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + (short)100+ "'", obj52.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + (short)100+ "'", obj53.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 100.0f+ "'", obj58.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + 100.0f+ "'", obj59.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "hi!"+ "'", obj61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "hi!"+ "'", obj62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + (short)100+ "'", obj64.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + (short)100+ "'", obj66.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj68 + "' != '" + (short)100+ "'", obj68.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 100.0f+ "'", obj69.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj73);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack((-1));
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj12 = stack10.push((java.lang.Object)100.0f);
    java.lang.Object obj13 = stack10.peek();
    java.lang.Object obj15 = stack10.push((java.lang.Object)"hi!");
    java.lang.Object obj16 = stack10.pop();
    java.lang.Object obj18 = stack10.push((java.lang.Object)(short)100);
    java.lang.Object obj19 = stack8.push((java.lang.Object)(short)100);
    boolean b20 = stack8.empty();
    java.lang.Object obj21 = stack8.peek();
    br.ufal.ic.test.mystack.Stack stack23 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj25 = stack23.push((java.lang.Object)10.0f);
    java.lang.Object obj26 = stack23.peek();
    java.lang.Object obj27 = stack23.peek();
    java.lang.Object obj28 = stack8.push((java.lang.Object)stack23);
    java.lang.Object obj29 = stack1.push((java.lang.Object)stack23);
    boolean b30 = stack23.empty();
    java.lang.Object obj31 = stack23.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 100.0f+ "'", obj12.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 100.0f+ "'", obj13.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "hi!"+ "'", obj15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "hi!"+ "'", obj16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)100+ "'", obj18.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)100+ "'", obj19.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (short)100+ "'", obj21.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0f+ "'", obj25.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 10.0f+ "'", obj26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 10.0f+ "'", obj31.equals(10.0f));

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj7 = stack5.push((java.lang.Object)100.0f);
    java.lang.Object obj8 = stack5.peek();
    java.lang.Object obj10 = stack5.push((java.lang.Object)"hi!");
    java.lang.Object obj11 = stack5.pop();
    java.lang.Object obj13 = stack5.push((java.lang.Object)(short)100);
    java.lang.Object obj14 = stack1.push((java.lang.Object)stack5);
    boolean b15 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack17 = new br.ufal.ic.test.mystack.Stack((int)(byte)0);
    boolean b18 = stack17.empty();
    java.lang.Object obj20 = stack17.push((java.lang.Object)(byte)0);
    br.ufal.ic.test.mystack.Stack stack22 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj24 = stack22.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack26 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj28 = stack26.push((java.lang.Object)100.0f);
    java.lang.Object obj29 = stack26.peek();
    java.lang.Object obj31 = stack26.push((java.lang.Object)"hi!");
    java.lang.Object obj32 = stack26.pop();
    java.lang.Object obj34 = stack26.push((java.lang.Object)(short)100);
    java.lang.Object obj35 = stack22.push((java.lang.Object)stack26);
    br.ufal.ic.test.mystack.Stack stack37 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj39 = stack37.push((java.lang.Object)100.0f);
    br.ufal.ic.test.mystack.Stack stack41 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj43 = stack41.push((java.lang.Object)100.0f);
    java.lang.Object obj44 = stack41.peek();
    java.lang.Object obj46 = stack41.push((java.lang.Object)"hi!");
    java.lang.Object obj47 = stack41.pop();
    java.lang.Object obj49 = stack41.push((java.lang.Object)(short)100);
    java.lang.Object obj50 = stack37.push((java.lang.Object)stack41);
    java.lang.Object obj51 = stack26.push((java.lang.Object)stack37);
    boolean b52 = stack26.empty();
    java.lang.Object obj53 = new java.lang.Object();
    java.lang.Object obj54 = stack26.push(obj53);
    java.lang.Object obj55 = stack26.pop();
    java.lang.Object obj56 = stack17.push((java.lang.Object)stack26);
    br.ufal.ic.test.mystack.Stack stack58 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj60 = stack58.push((java.lang.Object)10.0f);
    boolean b61 = stack58.empty();
    java.lang.Object obj62 = stack58.pop();
    java.lang.Object obj63 = stack26.push(obj62);
    java.lang.Object obj64 = stack1.push((java.lang.Object)stack26);
    boolean b65 = stack26.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0f+ "'", obj7.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 100.0f+ "'", obj8.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "hi!"+ "'", obj10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "hi!"+ "'", obj11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)100+ "'", obj13.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (byte)0+ "'", obj20.equals((byte)0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 100.0f+ "'", obj24.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 100.0f+ "'", obj28.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 100.0f+ "'", obj29.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "hi!"+ "'", obj31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "hi!"+ "'", obj32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (short)100+ "'", obj34.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 100.0f+ "'", obj39.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 100.0f+ "'", obj43.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 100.0f+ "'", obj44.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + "hi!"+ "'", obj46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "hi!"+ "'", obj47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + (short)100+ "'", obj49.equals((short)100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj60 + "' != '" + 10.0f+ "'", obj60.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 10.0f+ "'", obj62.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 10.0f+ "'", obj63.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b2 = stack1.empty();
    boolean b3 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack5 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b6 = stack5.empty();
    boolean b7 = stack5.empty();
    java.lang.Object obj8 = stack1.push((java.lang.Object)stack5);
    br.ufal.ic.test.mystack.Stack stack10 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b11 = stack10.empty();
    br.ufal.ic.test.mystack.Stack stack13 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj14 = stack10.push((java.lang.Object)stack13);
    java.lang.Object obj15 = stack1.push((java.lang.Object)stack10);
    boolean b16 = stack1.empty();
    br.ufal.ic.test.mystack.Stack stack18 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    boolean b19 = stack18.empty();
    boolean b20 = stack18.empty();
    java.lang.Object obj21 = stack1.push((java.lang.Object)b20);
    boolean b22 = stack1.empty();
    java.lang.Object obj23 = stack1.pop();
    boolean b24 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + true+ "'", obj21.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + true+ "'", obj23.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    br.ufal.ic.test.mystack.Stack stack1 = new br.ufal.ic.test.mystack.Stack(0);
    java.lang.Object obj3 = stack1.push((java.lang.Object)10.0f);
    java.lang.Object obj4 = stack1.peek();
    boolean b5 = stack1.empty();
    java.lang.Object obj6 = stack1.pop();
    br.ufal.ic.test.mystack.Stack stack8 = new br.ufal.ic.test.mystack.Stack(0);
    boolean b9 = stack8.empty();
    br.ufal.ic.test.mystack.Stack stack11 = new br.ufal.ic.test.mystack.Stack((int)(short)100);
    java.lang.Object obj12 = stack8.push((java.lang.Object)stack11);
    java.lang.Object obj13 = stack1.push((java.lang.Object)stack8);
    java.lang.Object obj14 = stack1.peek();
    boolean b15 = stack1.empty();
    boolean b16 = stack1.empty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 10.0f+ "'", obj4.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10.0f+ "'", obj6.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

}
